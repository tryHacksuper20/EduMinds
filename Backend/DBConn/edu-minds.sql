-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Oct 10, 2024 at 05:45 PM
-- Server version: 10.4.24-MariaDB
-- PHP Version: 8.1.6

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `edu-minds`
--

-- --------------------------------------------------------

--
-- Table structure for table `courses`
--

CREATE TABLE `courses` (
  `c_id` int(11) NOT NULL,
  `title` varchar(250) NOT NULL,
  `description` varchar(500) NOT NULL,
  `imageUrl` varchar(240) NOT NULL,
  `professorName` varchar(200) NOT NULL,
  `duration` varchar(200) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `courses`
--

INSERT INTO `courses` (`c_id`, `title`, `description`, `imageUrl`, `professorName`, `duration`) VALUES
(101, 'Python', 'This comprehensive Python course offers a series of in-depth videos and articles tailored for learners at all levels, from beginners to advanced. The curriculum begins with foundational topics such as data types, loops, and functions, and gradually advances to more complex subjects like object-oriented programming, file handling, and popular libraries such as NumPy, Pandas, and Matplotlib.\r\n\r\nLearners will engage in real-world projects and examples, gaining practical experience in Python applica', 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT8E6Xlh2VtOsV4vrygfHVm6xKybmctIDBYnA&s', 'Jenny\'s Lectures CS IT', '30 Hours'),
(102, 'Excel', 'This Excel course is a comprehensive series designed for learners at all levels, from beginners to advanced users, offering a combination of video lessons and article-based resources. The course covers essential features such as formulas, functions, and data visualization techniques using charts and graphs, and progresses to advanced topics like pivot tables, VLOOKUP, and automation with macros and VBA.\r\n\r\nLearners will engage in real-world examples and projects, allowing them to apply their ski', 'https://omtsdigest.com/wp-content/uploads/2016/02/excel-1598646848.jpeg', 'Learnit Training', '28 Hours'),
(103, 'Data Analysis', 'This Data Analysis course is an extensive program designed for both beginners and intermediate learners, offering a blend of video lessons and article-based resources. The course covers essential concepts such as data manipulation using Python and R, statistical analysis, and data visualization techniques. Learners will explore popular libraries like Pandas and NumPy, as well as tools such as Tableau to derive insights from data.\r\n\r\nAdvanced topics include machine learning fundamentals, regressi', 'https://www.shutterstock.com/image-photo/close-businesswoman-holding-graphs-hand-600nw-229854826.jpg', 'Top VarSity', '45 Hours');


-- --------------------------------------------------------

--
-- Table structure for table `data_analytics_course`
--

CREATE TABLE `data_analytics_course` (
  `id` int(11) NOT NULL,
  `course_id` int(11) NOT NULL,
  `level` tinyint(1) NOT NULL CHECK (`level` in (1,2,3)),
  `topic_name` varchar(255) NOT NULL,
  `video_url` varchar(255) NOT NULL,
  `articles` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `data_analytics_course`
--

INSERT INTO `data_analytics_course` (`id`, `course_id`, `level`, `topic_name`, `video_url`, `articles`, `created_at`) VALUES
(103101, 103, 1, 'Introduction to Data Analytics', 'https://youtu.be/5zEt1_Nkiio?si=7vL7_svQkoUsB5LG', '{\r\n        \"title\": \"Introduction to Data Analytics\", \r\n        \"content\": { \r\n            \"introduction\": \"Data analytics refers to the process of analyzing raw data to find trends, answer questions, and derive insights. In today\'s business environment, data-driven decision-making is a vital skill, empowering companies to make informed choices. With the growth of big data, organizations are increasingly relying on analytics to guide their strategies.\", \r\n            \"main_content\": \"This video begins with an overview of the importance of data analytics in modern business practices. You’ll learn the basics of how data is collected, processed, and analyzed to generate valuable insights. The process typically involves data gathering, cleaning, and visualization. Key tools like Excel, SQL, and Power BI are frequently used to work with data. You’ll also understand different types of data analysis, including descriptive, diagnostic, predictive, and prescriptive analytics, each serving a distinct purpose in business intelligence. The importance of using clean and well-structured data is emphasized to avoid incorrect conclusions. Moreover, this introduction explains how professionals can use data analytics to improve efficiency, increase revenues, and manage risks.\", \r\n            \"conclusion\": \"By the end of this introductory session, you will have a solid understanding of what data analytics entails and how it applies to real-world problems. This knowledge lays the groundwork for exploring more advanced concepts in the field. Data analytics is not just for technical experts; it is an essential tool for anyone looking to drive decision-making with insights derived from data.\" \r\n        }\r\n    }', '2024-08-30 00:02:21'),
(103102, 103, 1, 'Excel Basic', 'https://youtu.be/FMSJXtwt6hE?si=Lyu-x-4qjMsLfZQ0', '{\r\n        \"title\": \"Excel Basic\",\r\n        \"content\": {\r\n            \"introduction\": \"Excel is a widely used spreadsheet application that allows users to organize, analyze, and visualize data effectively. For beginners in data analytics, mastering Excel basics is crucial as it forms the foundation for data manipulation tasks.\",\r\n            \"main_content\": \"In this video, you will be introduced to the basic features of Excel that are essential for data analysis. Key concepts covered include using Excel formulas and functions like SUM, AVERAGE, and COUNT, creating and formatting tables, and generating simple charts for data visualization. You will also learn how to filter and sort data, which are vital skills for organizing large datasets. This video lays a solid foundation for beginners to build upon and introduces you to the fundamental tools for data management in Excel.\",\r\n            \"conclusion\": \"By mastering the basics of Excel, you will be well-prepared to tackle more advanced data analysis techniques. Excel’s flexibility and wide range of functions make it an indispensable tool for anyone involved in data handling or analysis. The knowledge you gain from this session will help you to effectively manage, analyze, and present your data.\"\r\n        }\r\n    }', '2024-08-30 00:02:21'),
(103103, 103, 2, 'Advanced Excel Part 1', 'https://youtu.be/ZmjjsfNH5nE?si=1CmQIBVlKOAJwZTh', '{\r\n        \"title\": \"Advanced Excel Part 1\",\r\n        \"content\": {\r\n            \"introduction\": \"Excel is a critical tool for data analysts, and while mastering the basics provides a solid foundation, learning advanced Excel techniques can elevate your ability to analyze, automate, and visualize data efficiently. Advanced Excel skills allow you to manage large datasets, create complex reports, and enhance productivity by automating repetitive tasks.\",\r\n            \"main_content\": \"In this first part of the Advanced Excel series, we dive into essential features that make Excel a powerful tool for data professionals. One of the primary focuses is **PivotTables**, which are vital for summarizing and analyzing large volumes of data. You’ll learn how to create PivotTables from raw data, customize them to generate meaningful reports, and use slicers to filter data interactively. \n\nNext, we explore **advanced formulas** such as **VLOOKUP** and **INDEX-MATCH**, which help in looking up data from large tables quickly. **VLOOKUP** is great for vertically searching for data within a table, but **INDEX-MATCH** is often preferred for its flexibility and power in more complex lookups. This video also covers **nested IF statements** and conditional logic formulas like **IF, AND, OR**, which enable more dynamic and flexible data manipulation. \n\nAnother crucial topic is **data validation** and how to create drop-down lists, ensuring that only valid data is entered into cells. This ensures accuracy and consistency when dealing with larger datasets. Moreover, you will be introduced to **conditional formatting**, a feature that allows you to automatically format cells based on their values, making it easier to identify trends or outliers in your data. \n\n**Dynamic charts** and dashboards are also covered in this video. Learn how to create dynamic charts that update automatically as the data changes, making your reports more interactive and insightful. Excel’s charting capabilities can turn raw data into visually appealing insights, and advanced users can create dynamic dashboards that provide a snapshot of key metrics at a glance.\",\r\n            \"conclusion\": \"By mastering these advanced Excel techniques, you’ll be well-equipped to manage and analyze large datasets with ease. Understanding how to work with PivotTables, advanced formulas, and dynamic charts will significantly improve your productivity and the quality of your reports. These skills are essential for any data analyst looking to improve both the efficiency and depth of their data analysis. As you move forward in this series, you all continue to build upon these skills, learning even more advanced features that will help you excel in data analytics.\"\r\n        }\r\n    }', '2024-08-30 00:02:21'),
(103104, 103, 3, 'Advanced Excel Part 2', 'https://youtu.be/9sHGgIcHVfQ?si=-p383q4q0JTm7rpF', '{\r\n        \"title\": \"Advanced Excel Part 2\",\r\n        \"content\": {\r\n            \"introduction\": \"As you progress with Excel, the ability to handle complex datasets and automate tasks becomes even more important. In this second part of the Advanced Excel series, you will explore additional tools and techniques that further enhance your data analysis capabilities.\",\r\n            \"main_content\": \"This video continues where Part 1 left off, delving into more advanced Excel functionalities. A key focus is on **Macros** and **VBA (Visual Basic for Applications)**, which allow you to automate repetitive tasks. You’ll learn how to record simple Macros and write basic VBA scripts to streamline your workflow, saving significant time when working with large datasets.\n\nAdditionally, the video explores **Power Query**, a powerful tool for data transformation within Excel. With Power Query, you can clean, reshape, and merge data from multiple sources, making it an indispensable tool for managing complex datasets. The ability to automatically update queries with new data is particularly useful for tasks involving regularly updated data sets.\n\nThe video also covers advanced **Array Formulas**, which allow you to perform complex calculations across ranges of cells. This is especially helpful for creating dynamic reports that update automatically as data changes. **What-If Analysis** tools, such as **Goal Seek**, **Scenario Manager**, and **Data Tables**, are explored in detail to help you model different scenarios and predict outcomes based on various inputs.\n\nFinally, you’ll gain insights into creating **Interactive Dashboards** using Excel’s powerful visualization tools. By combining charts, slicers, and other dynamic elements, you can build dashboards that present your data interactively and update in real-time based on user inputs.\",\r\n            \"conclusion\": \"By the end of this session, you’ll have a deeper understanding of how to use Excel’s advanced features to automate tasks, handle large datasets, and present data dynamically. Mastering these skills will allow you to not only analyze data more efficiently but also create interactive reports that provide real-time insights. These advanced techniques are invaluable for any data analyst or professional looking to maximize their efficiency and analytical capabilities.\"\r\n        }\r\n    }', '2024-08-30 00:02:21'),
(103105, 103, 2, 'Power BI Part 1', 'https://youtu.be/KIlw5Up2hnk?si=BgtVNVScbio01fWR', '{\r\n        \"title\": \"Power BI Part 1\",\r\n        \"content\": {\r\n            \"introduction\": \"Power BI is a powerful business analytics tool by Microsoft that allows you to visualize and share insights from your data. It is widely used in the field of data analytics to create interactive and dynamic reports. This first part of the Power BI series introduces you to the basics of the platform, enabling you to start creating impactful visualizations with ease.\",\r\n            \"main_content\": \"In this video, you’ll learn the fundamentals of Power BI, starting with the **interface** and **basic navigation**. You will be guided through the installation process and shown how to connect Power BI to different data sources like Excel, SQL databases, and online services.\n\nOnce connected, you’ll explore **Power BI’s data transformation capabilities** using Power Query. This tool allows you to clean, reshape, and merge data from multiple sources, making it ready for analysis. Understanding how to use Power Query is essential for managing data before it’s visualized.\n\nAfter preparing the data, the video covers **creating your first reports**. You will learn how to use the drag-and-drop interface to build visualizations such as bar charts, line charts, pie charts, and more. The importance of choosing the right type of visualization to tell the correct story with your data is emphasized.\n\nLastly, the video introduces **basic dashboard creation**. You’ll learn how to pin visualizations to a dashboard and set up simple, interactive filters to allow users to engage with the data in a meaningful way. The dashboard functionality is one of Power BI’s key strengths, allowing you to present multiple views of data in a single, interactive space.\",\r\n            \"conclusion\": \"By the end of this first session, you will have a solid understanding of Power BI’s interface, data connection methods, and how to create basic visualizations and dashboards. These skills are foundational to using Power BI effectively, and they will allow you to start building your own reports and insights with ease. In the next session, we will explore more advanced features, including custom visuals and DAX formulas.\"\r\n        }\r\n    }', '2024-08-30 00:02:21'),
(103106, 103, 2, 'Power BI Part 2', 'https://youtu.be/O9OUqf2y4LA?si=WWJqlr5Bw3uMgDSE', '{\r\n        \"title\": \"Power BI Part 2\",\r\n        \"content\": {\r\n            \"introduction\": \"Building on the basics from Part 1, this second session of the Power BI series delves deeper into more advanced features that allow for richer data analysis and enhanced visualizations. Power BI’s powerful functionality not only helps to visualize data but also provides tools to create dynamic reports that are highly interactive and insightful.\",\r\n            \"main_content\": \"In this video, we explore more advanced capabilities of Power BI, beginning with **custom visuals**. You will learn how to download and import additional visualizations from the Power BI marketplace, enabling you to extend the standard set of visuals and use more specialized charts like bullet graphs, waterfall charts, and heatmaps. These custom visuals help in telling more complex stories with your data.\n\nNext, the focus shifts to **DAX (Data Analysis Expressions)**, a formula language unique to Power BI. You will learn how to write DAX formulas to create calculated columns, measures, and custom KPIs. DAX enables you to perform more complex calculations, such as year-over-year growth, running totals, and conditional logic, providing deeper insights into your data.\n\nAnother crucial topic covered is **data relationships** and how to model them effectively. Power BI allows you to connect multiple data tables, and understanding how to define relationships between these tables is essential for creating accurate and insightful reports. This section explains how to create relationships between tables and use them in your reports for more advanced analysis.\n\nFinally, the session introduces **Power BI Service**, where you’ll learn how to publish your reports online, share them with others, and schedule data refreshes to keep your reports updated automatically. Understanding how to deploy your reports and dashboards to the cloud is critical for collaboration and ensuring your insights are always up-to-date.\",\r\n            \"conclusion\": \"By mastering the advanced techniques covered in this session, you’ll be able to take your Power BI reports to the next level. From using custom visuals and writing DAX formulas to handling complex data relationships and publishing your reports online, these skills will significantly improve your ability to analyze data and communicate insights effectively. In the upcoming sessions, you’ll continue to explore advanced reporting techniques and learn how to fully optimize your Power BI projects for professional use.\"\r\n        }\r\n    }', '2024-08-30 00:02:21'),
(103107, 103, 1, 'SQL Basic', 'https://youtu.be/lbvQmIs6OHw?si=-L1KRLeqQXJNVukD', '{\r\n        \"title\": \"SQL Basic\",\r\n        \"content\": {\r\n            \"introduction\": \"Structured Query Language (SQL) is the standard programming language used to manage and manipulate relational databases. Understanding SQL is crucial for anyone working with data, as it allows you to retrieve, insert, update, and delete data from a database efficiently. This article introduces the fundamental concepts and commands of SQL, laying the groundwork for more advanced database management techniques.\",\r\n            \"main_content\": \"The core component of SQL is its ability to perform **queries**. The most common command used in SQL is the **SELECT** statement, which allows you to retrieve data from one or more tables. For example, the command `SELECT * FROM employees;` retrieves all columns from the \'employees\' table. You can also specify particular columns, such as `SELECT first_name, last_name FROM employees;`, to limit the output to only the desired information.\\n\\nAnother important command is the **WHERE** clause, which allows you to filter records based on specific conditions. For instance, `SELECT * FROM employees WHERE department = \'Sales\';` will return only the employees in the Sales department.\\n\\nIn addition to selecting data, SQL enables you to **insert new records** into tables using the **INSERT INTO** command. For example, `INSERT INTO employees (first_name, last_name, department) VALUES (\'John\', \'Doe\', \'Sales\');` adds a new employee to the table. Similarly, to update existing records, you can use the **UPDATE** command, such as `UPDATE employees SET department = \'Marketing\' WHERE last_name = \'Doe\';` to change the department of a specific employee.\\n\\nTo remove records, the **DELETE** statement is used. For instance, `DELETE FROM employees WHERE last_name = \'Doe\';` removes the employee with that last name from the table.\\n\\nUnderstanding how to join tables is another key aspect of SQL. The **JOIN** clause allows you to combine rows from two or more tables based on a related column between them. For example, `SELECT employees.first_name, departments.department_name FROM employees JOIN departments ON employees.department_id = departments.id;` retrieves employee names along with their respective department names.\",\r\n            \"conclusion\": \"By mastering these basic SQL commands, you will be well-equipped to handle data retrieval, manipulation, and basic reporting tasks. SQL is a powerful tool that underpins data management in numerous applications, and a solid understanding of these foundational concepts is essential for anyone looking to work with data. As you continue your SQL journey, you will be able to tackle more complex queries and database management tasks, enhancing your overall data analysis skills.\"\r\n        }\r\n    }', '2024-08-30 00:02:21'),
(103108, 103, 2, 'SQL DDL', 'https://youtu.be/GfoqC_7ZmuQ?si=sEnpNA_qjP2QgsLF', '{\r\n        \"title\": \"SQL DDL\",\r\n        \"content\": {\r\n            \"introduction\": \"Data Definition Language (DDL) is a subset of SQL used for defining and managing all structures within a database. DDL includes commands that allow you to create, modify, and delete database objects such as tables, indexes, and schemas. Understanding DDL is crucial for setting up and managing databases effectively, ensuring that your data is organized and accessible.\",\r\n            \"main_content\": \"The primary DDL commands include **CREATE**, **ALTER**, and **DROP**. Each of these commands serves a specific purpose in the management of database structures.\n\n1. **CREATE**: This command is used to create new tables, schemas, and other database objects. For example, to create a new table named \'employees\', you would use the following command:\n   ```sql\n   CREATE TABLE employees (\n       id INT PRIMARY KEY,\n       first_name VARCHAR(50),\n       last_name VARCHAR(50),\n       department VARCHAR(50)\n   );\n   ```\n   This command establishes a new table with specified columns and their data types.\n\n2. **ALTER**: The ALTER command allows you to modify existing database objects. You can add, delete, or modify columns in a table. For instance, if you want to add a new column for email addresses, you would execute:\n   ```sql\n   ALTER TABLE employees ADD email VARCHAR(100);\n   ```\n   This command adds a new column named \'email\' to the \'employees\' table.\n\n3. **DROP**: The DROP command is used to remove database objects permanently. If you need to delete the \'employees\' table, you would use:\n   ```sql\n   DROP TABLE employees;\n   ```\n   This command will remove the entire table and all its data from the database.\n\nIn addition to these primary commands, DDL also includes commands for creating **indexes** and **constraints**. **Indexes** improve the speed of data retrieval operations, while **constraints** enforce rules at the column level, such as NOT NULL, UNIQUE, and FOREIGN KEY constraints, ensuring data integrity.\n\nFor example, to create an index on the last name of employees, you could use:\n   ```sql\n   CREATE INDEX idx_last_name ON employees(last_name);\n   ```\n   This command creates an index to speed up queries that filter by last name. To add a unique constraint to the email column, ensuring that no two employees can have the same email address, you would use:\n   ```sql\n   ALTER TABLE employees ADD CONSTRAINT unique_email UNIQUE(email);\n   ```\",\r\n            \"conclusion\": \"Understanding SQL DDL is fundamental for anyone involved in database management. DDL commands allow you to define the structure of your database and ensure it is optimized for data integrity and performance. Mastery of these commands will empower you to create efficient database schemas, enforce rules, and maintain a well-structured database environment. As you progress, you will be able to leverage these DDL concepts to manage more complex database systems and operations.\"\r\n        }\r\n    }', '2024-08-30 00:02:21'),
(103109, 103, 2, 'SQL DML & Order By', 'https://youtu.be/suN0rDob0FI?si=elQynaJAzIeYBNst', '{\r\n        \"title\": \"SQL DML & Order By\",\r\n        \"content\": {\r\n            \"introduction\": \"Data Manipulation Language (DML) is a subset of SQL that allows you to manipulate and manage data stored in relational databases. DML includes commands for inserting, updating, deleting, and querying data. This article focuses on essential DML commands and the usage of the **ORDER BY** clause, which enables you to sort query results in a meaningful way.\",\r\n            \"main_content\": \"The primary DML commands include **INSERT**, **UPDATE**, and **DELETE**. These commands allow you to add, modify, or remove records in a database table.\\n\\n1. **INSERT**: This command is used to add new records to a table. For example, to add a new employee to the \'employees\' table, you would use:\\n   ```sql\\n   INSERT INTO employees (first_name, last_name, department) VALUES (\'Jane\', \'Smith\', \'Marketing\');\\n   ```\\n   This command inserts a new record with the specified first name, last name, and department.\\n\\n2. **UPDATE**: The UPDATE command modifies existing records in a table. For instance, if you want to change the department of an employee with the last name \'Smith\', you would execute:\\n   ```sql\\n   UPDATE employees SET department = \'Sales\' WHERE last_name = \'Smith\';\\n   ```\\n   This command updates the department for the specified employee, demonstrating how you can target specific records with conditions.\\n\\n3. **DELETE**: This command removes records from a table. If you want to delete an employee record based on the last name, the command would look like this:\\n   ```sql\\n   DELETE FROM employees WHERE last_name = \'Smith\';\\n   ```\\n   This command deletes all records matching the specified condition.\\n\\n### ORDER BY Clause\\nThe **ORDER BY** clause is used in SQL queries to sort the result set based on one or more columns. By default, the results are sorted in ascending order, but you can specify descending order using the **DESC** keyword.\\n\\nFor example, to retrieve all employees sorted by their last names in ascending order, you would use:\\n   ```sql\\n   SELECT * FROM employees ORDER BY last_name;\\n   ```\\n   If you want to sort by department in descending order, you would write:\\n   ```sql\\n   SELECT * FROM employees ORDER BY department DESC;\\n   ```\\n   You can also sort by multiple columns. For instance, if you want to sort employees first by department and then by last name, the query would be:\\n   ```sql\\n   SELECT * FROM employees ORDER BY department, last_name;\\n   ```\",\r\n            \"conclusion\": \"Mastering DML commands and the ORDER BY clause is essential for anyone working with databases. DML enables you to efficiently manage and manipulate data, while the ORDER BY clause enhances your ability to present data in a structured format. Together, these tools empower you to perform comprehensive data analysis and reporting. As you continue to learn SQL, you’ll be able to combine these commands with other SQL features to perform more complex queries and data operations.\"\r\n        }\r\n    }', '2024-08-30 00:02:21'),
(103110, 103, 3, 'SQL Group By', 'https://youtu.be/oHZ8udrINbM?si=y4R9sfYNPVeJ_gO8', '{\r\n        \"title\": \"SQL Group By\",\r\n        \"content\": {\r\n            \"introduction\": \"The **GROUP BY** clause in SQL is a powerful tool used to arrange identical data into groups. It is often used alongside aggregate functions like COUNT, SUM, AVG, MAX, and MIN to summarize data for better analysis and reporting. By grouping data, you can easily compute metrics for different segments of your dataset.\",\r\n            \"main_content\": \"The **GROUP BY** clause works by taking the result set of a query and grouping rows that have the same values in specified columns. It is crucial to note that when using **GROUP BY**, every column in the SELECT statement that is not an aggregate function must be included in the **GROUP BY** clause.\\n\\n### Basic Syntax\\nThe basic syntax for a **GROUP BY** query is:\\n```sql\\nSELECT column1, aggregate_function(column2)\\nFROM table_name\\nWHERE condition\\nGROUP BY column1;\\n```\\n\\n### Example Usage\\n1. **Count the number of employees in each department**:\\n   Suppose you have an `employees` table with a column named `department`. To count how many employees are in each department, you can use:\\n   ```sql\\n   SELECT department, COUNT(*) AS employee_count\\n   FROM employees\\n   GROUP BY department;\\n   ```\\n   This query will return a list of departments along with the number of employees in each.\\n\\n2. **Calculate the average salary by department**:\\n   If you want to find the average salary for each department, the query would be:\\n   ```sql\\n   SELECT department, AVG(salary) AS average_salary\\n   FROM employees\\n   GROUP BY department;\\n   ```\\n   This command groups the employees by their department and calculates the average salary for each group.\\n\\n3. **Group by multiple columns**:\\n   You can also group by multiple columns. For example, if you want to group by both `department` and `job_title`, you would write:\\n   ```sql\\n   SELECT department, job_title, COUNT(*) AS employee_count\\n   FROM employees\\n   GROUP BY department, job_title;\\n   ```\\n   This query counts employees grouped by both department and job title, providing more granular insights into your data.\\n\\n### Using HAVING with GROUP BY\\nThe **HAVING** clause can be used to filter records after grouping, unlike the **WHERE** clause, which filters records before grouping. For example, if you only want to see departments with more than 5 employees, you can do:\\n```sql\\nSELECT department, COUNT(*) AS employee_count\\nFROM employees\\nGROUP BY department\\nHAVING COUNT(*) > 5;\\n```\\nThis command filters the grouped results to only include departments with more than 5 employees.\",\r\n            \"conclusion\": \"The **GROUP BY** clause is essential for data aggregation and summarization in SQL. By effectively grouping data and applying aggregate functions, you can gain valuable insights from your datasets. Mastering the **GROUP BY** clause, along with the **HAVING** clause for filtering, enables you to perform more sophisticated data analyses and derive actionable information from your data. As you continue to explore SQL, leveraging these capabilities will enhance your reporting and analytical skills.\"\r\n        }\r\n    }', '2024-08-30 00:02:21'),
(103111, 103, 3, 'SQL Joins', 'https://youtu.be/zN5soLiX0BQ?si=DIoWHxnJ6qCV78RO', '{\r\n        \"title\": \"SQL Joins\",\r\n        \"content\": {\r\n            \"introduction\": \"SQL Joins are essential for combining rows from two or more tables based on a related column between them. By using joins, you can retrieve meaningful data that is spread across different tables, enhancing the relational aspect of databases. Understanding joins is crucial for effective database management and complex queries.\",\r\n            \"main_content\": \"There are several types of joins in SQL, each serving a different purpose:\\n\\n### 1. INNER JOIN\\nThe **INNER JOIN** keyword selects records that have matching values in both tables. If there is no match, the rows are not included in the result.\\n```sql\\nSELECT a.column1, b.column2\\nFROM table1 a\\nINNER JOIN table2 b ON a.common_column = b.common_column;\\n```\\nFor example, if you have an `employees` table and a `departments` table, you can join them to find employees along with their respective department names:\\n```sql\\nSELECT e.name, d.department_name\\nFROM employees e\\nINNER JOIN departments d ON e.department_id = d.id;\\n```\\n\\n### 2. LEFT JOIN (or LEFT OUTER JOIN)\\nA **LEFT JOIN** returns all records from the left table and the matched records from the right table. If there is no match, NULL values are returned for columns from the right table.\\n```sql\\nSELECT a.column1, b.column2\\nFROM table1 a\\nLEFT JOIN table2 b ON a.common_column = b.common_column;\\n```\\nFor example, to list all employees along with their departments, including employees who do not belong to any department:\\n```sql\\nSELECT e.name, d.department_name\\nFROM employees e\\nLEFT JOIN departments d ON e.department_id = d.id;\\n```\\n\\n### 3. RIGHT JOIN (or RIGHT OUTER JOIN)\\nThe **RIGHT JOIN** is the opposite of the LEFT JOIN; it returns all records from the right table and the matched records from the left table. If there is no match, NULL values are returned for columns from the left table.\\n```sql\\nSELECT a.column1, b.column2\\nFROM table1 a\\nRIGHT JOIN table2 b ON a.common_column = b.common_column;\\n```\\nAn example would be to list all departments along with their employees, even if some departments do not have any employees:\\n```sql\\nSELECT e.name, d.department_name\\nFROM employees e\\nRIGHT JOIN departments d ON e.department_id = d.id;\\n```\\n\\n### 4. FULL JOIN (or FULL OUTER JOIN)\\nA **FULL JOIN** returns all records when there is a match in either left or right table records. This means it will include records with no match from either side, filling in NULLs where there is no match.\\n```sql\\nSELECT a.column1, b.column2\\nFROM table1 a\\nFULL JOIN table2 b ON a.common_column = b.common_column;\\n```\\nFor instance, to list all employees and all departments, showing employees who do not belong to a department and departments without employees:\\n```sql\\nSELECT e.name, d.department_name\\nFROM employees e\\nFULL JOIN departments d ON e.department_id = d.id;\\n```\\n\\n### 5. CROSS JOIN\\nThe **CROSS JOIN** produces a Cartesian product of the two tables, meaning it returns all possible combinations of rows. This type of join does not require any condition.\\n```sql\\nSELECT a.column1, b.column2\\nFROM table1 a\\nCROSS JOIN table2 b;\\n```\\nThis join is less commonly used but can be helpful in specific scenarios where all combinations of records are needed.\",\r\n            \"conclusion\": \"Understanding SQL Joins is fundamental for working with relational databases. By using various types of joins, you can combine data from multiple tables and perform complex queries that provide deeper insights into your data. Mastering joins allows for efficient data retrieval and analysis, enabling you to create more sophisticated and informative reports.\"\r\n        }\r\n    }', '2024-08-30 00:02:21'),
(103112, 103, 1, 'Python Basic', 'https://youtu.be/TlkPGxRWKhk?si=BF5Hc3gIYIEt7pAX', '{\r\n        \"title\": \"Python Basic\",\r\n        \"content\": {\r\n            \"introduction\": \"Python is a versatile and powerful programming language known for its simplicity and readability. It is widely used for various applications, including web development, data analysis, artificial intelligence, scientific computing, and more. This article will cover basic concepts in Python that are essential for beginners to get started with programming.\",\r\n            \"main_content\": \"### 1. Installation\\nTo begin coding in Python, you need to install it on your system. You can download Python from the official website [python.org](https://www.python.org). It is available for multiple platforms, including Windows, macOS, and Linux. After installation, you can verify it by opening a terminal or command prompt and typing:\\n\\n```bash\\npython --version\\n```\\nThis should display the installed version of Python.\\n\\n### 2. Hello World\\nThe first program you typically write in any programming language is the \"Hello World\" program. In Python, this can be done with a simple command:\\n\\n```python\\nprint(\"Hello, World!\")\\n```\\nWhen you run this code, it outputs:\\n\\n```Hello, World!\\n```\\n\\n### 3. Variables and Data Types\\nPython supports several data types, including:\\n- **Integers**: Whole numbers, e.g., `a = 5`\\n- **Floats**: Decimal numbers, e.g., `b = 3.14`\\n- **Strings**: Text data, e.g., `name = \"Alice\"`\\n- **Booleans**: True or False values, e.g., `is_active = True`\\n\\nYou can assign values to variables without explicitly declaring their types, thanks to Python\'s dynamic typing.\\n\\n### 4. Basic Operators\\nPython supports various operators for arithmetic and logical operations:\\n- **Arithmetic Operators**: `+`, `-`, `*`, `/`, `//` (floor division), `%` (modulus), and `**` (exponentiation).\\n- **Comparison Operators**: `==`, `!=`, `>`, `<`, `>=`, `<=`.\\n- **Logical Operators**: `and`, `or`, `not`.\\n\\n### 5. Control Flow\\nControl flow statements allow you to control the execution of code. The main control flow statements in Python include:\\n- **if statements**: Used for conditional execution.\\n```python\\nif a > b:\\n print(\"a is greater than b\")\\nelif a < b:\\n print(\"a is less than b\")\\nelse:\\n print(\"a is equal to b\")\\n```\\n- **for loops**: Used to iterate over a sequence (like a list or string).\\n```python\\nfor i in range(5):\\n print(i)\\n```\\n- **while loops**: Repeats as long as a condition is true.\\n```python\\nwhile a < 10:\\n a += 1\\n```\\n\\n### 6. Functions\\nFunctions in Python allow you to encapsulate code for reuse. You can define a function using the `def` keyword:\\n```python\\ndef greet(name):\\n return f\"Hello, {name}!\"\\n```\\nTo call the function, simply use:\\n```python\\ngreet(\"Alice\")\\n```\\n\\n### 7. Lists\\nLists are used to store multiple items in a single variable. They are ordered and mutable (changeable).\\n```python\\nfruits = [\"apple\", \"banana\", \"cherry\"]\\nfruits.append(\"orange\") # Adds \'orange\' to the list\\n```\\nYou can access elements using their index:\\n```python\\nprint(fruits[0]) # Outputs: apple\\n```\\n\\n### 8. Libraries\\nPython has a rich ecosystem of libraries that you can import to extend functionality. For example, you can use the `math` library for mathematical functions:\\n```python\\nimport math\\nresult = math.sqrt(16) # Outputs: 4.0\\n```\\n\\n### 9. Input from Users\\nYou can take input from users using the `input()` function:\\n```python\\nname = input(\"Enter your name: \")\\nprint(f\"Hello, {name}!\")\\n```', '2024-08-30 00:02:21'),
(103113, 103, 1, 'Exploratory Data Analysis (EDA)', 'https://youtu.be/czDQqnQT3yQ?si=oAI_AFLH7Y0ghp9j', '{\r\n        \"title\": \"Exploratory Data Analysis (EDA)\",\r\n        \"content\": {\r\n            \"introduction\": \"Exploratory Data Analysis (EDA) is a critical step in the data analysis process that involves examining datasets to summarize their main characteristics, often using visual methods. EDA is essential for understanding the data before applying any formal modeling or statistical analysis. This article will outline the key concepts, techniques, and importance of EDA.\",\r\n            \"main_content\": \"### 1. Purpose of EDA\\nThe primary goal of EDA is to gain insights into the data\'s structure and underlying patterns. By exploring the data visually and statistically, analysts can identify:\\n- **Trends and Patterns**: Recognizing trends helps in forecasting and making informed decisions.\\n- **Outliers**: Identifying anomalies can reveal errors in data collection or unique phenomena.\\n- **Relationships**: Understanding the relationships between variables aids in hypothesis formulation and testing.\\n- **Data Quality**: Assessing missing values, duplicates, and inconsistent data helps improve the overall quality.\\n\\n### 2. Techniques Used in EDA\\nSeveral techniques are commonly used during EDA:\\n\\n#### a. Descriptive Statistics\\nDescriptive statistics summarize the data through metrics such as mean, median, mode, standard deviation, and percentiles. For example, to calculate basic statistics in Python using Pandas:\\n```python\\nimport pandas as pd\\n\\ndf = pd.read_csv(\'data.csv\')\\nsummary = df.describe()\\n```\\nThis provides a quick overview of the dataset’s central tendencies and dispersion.\\n\\n#### b. Data Visualization\\nVisualization techniques help in understanding data distributions and relationships:\\n- **Histograms**: Useful for showing the distribution of a single variable.\\n```python\\nimport matplotlib.pyplot as plt\\n\\nplt.hist(df[\"column_name\"], bins=20)\\nplt.title(\"Histogram of Column\")\\nplt.show()\\n```\\n- **Box Plots**: Effective for identifying outliers and understanding the spread of data.\\n```python\\nplt.boxplot(df[\"column_name\"])\\nplt.title(\"Box Plot of Column\")\\nplt.show()\\n```\\n- **Scatter Plots**: Useful for visualizing relationships between two numerical variables.\\n```python\\nplt.scatter(df[\'x_column\'], df[\'y_column\'])\\nplt.title(\'Scatter Plot\')\\nplt.xlabel(\'X Column\')\\nplt.ylabel(\'Y Column\')\\nplt.show()\\n```\\n- **Correlation Matrices**: Helps visualize the correlation between multiple variables.\\n\\n#### c. Checking Missing Values\\nUnderstanding and addressing missing data is crucial:\\n```python\\nmissing_values = df.isnull().sum()\\nprint(missing_values)\\n```\\nThis code snippet will show the count of missing values for each column.\\n\\n### 3. Importance of EDA\\n- **Informs Data Cleaning**: EDA highlights data quality issues that must be addressed before analysis.\\n- **Guides Feature Selection**: Insights gained during EDA can inform which features are most relevant for modeling.\\n- **Hypothesis Generation**: EDA allows analysts to generate hypotheses based on observed patterns in the data.\\n- **Improves Model Performance**: A thorough understanding of the data can lead to better model selection and tuning.\\n\\n### 4. Tools for EDA\\nMany tools and libraries facilitate EDA, including:\\n- **Python Libraries**: Pandas, Matplotlib, Seaborn, and NumPy are commonly used for data manipulation and visualization.\\n- **R**: The R programming language, with packages like ggplot2 and dplyr, is powerful for statistical analysis and visualization.\\n- **Tableau**: A visual analytics platform that allows users to create interactive data visualizations easily.\\n- **Excel**: A widely used spreadsheet tool with built-in functions for basic data analysis and visualization.\\n\",\r\n            \"conclusion\": \"Exploratory Data Analysis is a fundamental process in data science and analytics that enables data professionals to understand their datasets deeply. By employing descriptive statistics, visualization techniques, and a variety of tools, analysts can uncover important insights that guide further analysis and decision-making. Mastering EDA is crucial for anyone working with data, as it lays the groundwork for effective modeling and interpretation.\"\r\n        }\r\n    }', '2024-08-30 00:02:21'),
(103114, 103, 1, 'Data Visualization', 'https://youtu.be/Z6ToYVvEi2o?si=HvIzWbZsPi1EM4yJ', '{\r\n        \"title\": \"Data Visualization\",\r\n        \"content\": {\r\n            \"introduction\": \"Data Visualization is the graphical representation of information and data. By using visual elements like charts, graphs, and maps, data visualization tools provide an accessible way to see and understand trends, outliers, and patterns in data. This article discusses the importance of data visualization, common types, best practices, and tools used in the field.\",\r\n            \"main_content\": \"### 1. Importance of Data Visualization\\nData visualization plays a crucial role in data analysis for several reasons:\\n- **Simplifies Complex Data**: Large datasets can be overwhelming; visualization makes it easier to digest information quickly.\\n- **Identifies Trends and Patterns**: Graphs and charts help reveal trends over time, patterns among variables, and insights that may not be apparent in raw data.\\n- **Facilitates Decision-Making**: Visual representations enable stakeholders to make informed decisions based on data insights rather than intuition alone.\\n- **Enhances Data Storytelling**: A well-crafted visualization tells a story, making it easier for audiences to grasp the significance of the data.\\n\\n### 2. Common Types of Data Visualizations\\nDifferent types of visualizations serve various purposes:\\n\\n#### a. Bar Charts\\nBar charts are used to compare different categories. They can be vertical or horizontal and are effective for displaying discrete data.\\n```python\\nimport matplotlib.pyplot as plt\\n\\ncategories = [\'A\', \'B\', \'C\']\\nvalues = [10, 20, 15]\\nplt.bar(categories, values)\\nplt.title(\'Bar Chart Example\')\\nplt.ylabel(\'Values\')\\nplt.show()\\n```\\n\\n#### b. Line Graphs\\nLine graphs are ideal for showing trends over time, making them popular for time series data.\\n```python\\nx = [1, 2, 3, 4, 5]\\ny = [2, 3, 5, 7, 11]\\nplt.plot(x, y)\\nplt.title(\'Line Graph Example\')\\nplt.xlabel(\'X-axis\')\\nplt.ylabel(\'Y-axis\')\\nplt.show()\\n```\\n\\n#### c. Pie Charts\\nPie charts display proportions and percentages between categories. However, they are best used when there are a limited number of categories.\\n```python\\nsizes = [15, 30, 45, 10]\\nlabels = [\'A\', \'B\', \'C\', \'D\']\\nplt.pie(sizes, labels=labels, autopct=\'%1.1f%%\')\\nplt.title(\'Pie Chart Example\')\\nplt.show()\\n```\\n\\n#### d. Scatter Plots\\nScatter plots show the relationship between two continuous variables and can reveal correlations.\\n```python\\nx = [1, 2, 3, 4, 5]\\ny = [5, 7, 9, 10, 15]\\nplt.scatter(x, y)\\nplt.title(\'Scatter Plot Example\')\\nplt.xlabel(\'X-axis\')\\nplt.ylabel(\'Y-axis\')\\nplt.show()\\n```\\n\\n#### e. Heatmaps\\nHeatmaps are useful for showing data density or intensity over a two-dimensional space, often used in correlation matrices.\\n\\n### 3. Best Practices for Data Visualization\\nTo create effective visualizations, consider the following best practices:\\n- **Know Your Audience**: Tailor your visualizations to the audience’s level of expertise and interest.\\n- **Keep It Simple**: Avoid clutter; focus on the key message you want to convey.\\n- **Use Appropriate Charts**: Choose the right type of chart for the data you are presenting.\\n- **Be Consistent**: Use consistent colors, fonts, and design elements throughout your visualizations.\\n- **Label Clearly**: Ensure axes are labeled, and legends are provided where necessary to aid comprehension.\\n- **Provide Context**: Use titles, annotations, and source citations to give context to the data.\\n\\n### 4. Tools for Data Visualization\\nSeveral tools can help create effective visualizations:\\n- **Tableau**: A powerful tool for creating interactive dashboards and visualizations without extensive coding knowledge.\\n- **Power BI**: A Microsoft product that enables users to create reports and visualizations easily and integrates well with other Microsoft tools.\\n- **Python Libraries**: Libraries like Matplotlib, Seaborn, and Plotly provide flexibility for creating various types of visualizations programmatically.\\n- **R**: The ggplot2 library in R is renowned for its capability to produce high-quality visualizations.\\n- **Excel**: A common tool for quick visualizations using built-in charting features.\\n\",\r\n            \"conclusion\": \"Data visualization is an essential component of data analysis, allowing analysts and stakeholders to gain insights and communicate findings effectively. By employing various visualization techniques and adhering to best practices, data professionals can transform complex datasets into clear and actionable information. Mastering data visualization tools and techniques is vital for anyone looking to make data-driven decisions.\"\r\n        }\r\n    }', '2024-08-30 00:02:21'),
(103115, 103, 1, 'Top 5 Data Analyst Projects for Resume', 'https://youtu.be/a16r5YaYsdE?si=NjNUtJtkGawcunJn', '{\r\n        \"title\": \"Top 5 Data Analyst Projects for Resume\",\r\n        \"content\": {\r\n            \"introduction\": \"As the demand for data analysts continues to grow across various industries, showcasing practical experience through projects is crucial for standing out in the job market. Projects demonstrate your ability to apply analytical skills to real-world scenarios and effectively communicate findings. This article outlines five impactful data analyst projects that can enhance your resume and showcase your capabilities.\",\r\n            \"main_content\": \"### 1. Sales Data Analysis Project\\n**Description**: Analyze sales data from a retail company to uncover insights that can drive business decisions.\\n\\n**Skills Demonstrated**:\\n- Data cleaning and preprocessing using Python or R.\\n- Exploratory Data Analysis (EDA) to identify trends, seasonality, and outliers.\\n- Visualization of sales performance using tools like Tableau or Matplotlib.\\n\\n**Project Components**:\\n- Data Source: Use a publicly available dataset or a simulated sales dataset.\\n- Deliverables: A detailed report with visualizations, insights on sales performance, recommendations for inventory management, and potential growth strategies.\\n\\n### 2. Customer Segmentation Project\\n**Description**: Use clustering techniques to segment customers based on purchasing behavior.\\n\\n**Skills Demonstrated**:\\n- Application of clustering algorithms (K-means, Hierarchical clustering).\\n- Data visualization to present segments and insights.\\n- Ability to derive actionable business strategies based on customer profiles.\\n\\n**Project Components**:\\n- Data Source: Customer transaction dataset.\\n- Deliverables: A presentation detailing the customer segments, their characteristics, and targeted marketing strategies for each segment.\\n\\n### 3. A/B Testing Project\\n**Description**: Conduct an A/B test to evaluate the effectiveness of two different marketing strategies.\\n\\n**Skills Demonstrated**:\\n- Experimental design and hypothesis testing.\\n- Statistical analysis to compare results.\\n- Interpretation of p-values and confidence intervals.\\n\\n**Project Components**:\\n- Data Source: Simulated A/B test data or real-world marketing campaign results.\\n- Deliverables: A report summarizing the methodology, analysis results, and recommendations based on the A/B test outcomes.\\n\\n### 4. Time Series Forecasting Project\\n**Description**: Forecast future sales or demand using time series analysis techniques.\\n\\n**Skills Demonstrated**:\\n- Understanding of time series components (trend, seasonality, noise).\\n- Application of forecasting models such as ARIMA, Exponential Smoothing, or machine learning techniques.\\n- Visualization of actual vs. forecasted values.\\n\\n**Project Components**:\\n- Data Source: Historical sales data or economic indicators.\\n- Deliverables: A forecasting report with visualizations, model evaluations, and predictions for future sales.\\n\\n### 5. Dashboard Development Project\\n**Description**: Create an interactive dashboard that displays key performance indicators (KPIs) for a business.\\n\\n**Skills Demonstrated**:\\n- Proficiency in dashboard tools like Tableau, Power BI, or Google Data Studio.\\n- Ability to design intuitive user interfaces that present data effectively.\\n- Integration of multiple data sources for a comprehensive view of business performance.\\n\\n**Project Components**:\\n- Data Source: Combine data from various departments (sales, marketing, finance).\\n- Deliverables: An interactive dashboard showcasing key metrics, with a guide on how to use the dashboard and interpret the data presented.\\n\",\r\n            \"conclusion\": \"Including these top 5 data analyst projects on your resume can significantly enhance your profile and demonstrate your practical skills. Each project allows you to showcase different aspects of data analysis, from statistical analysis and data visualization to forecasting and dashboard development. As you work on these projects, remember to document your process and results clearly, as this will help you communicate your findings effectively during interviews and discussions with potential employers.\"\r\n        }\r\n    }', '2024-08-30 00:02:21');
INSERT INTO `data_analytics_course` (`id`, `course_id`, `level`, `topic_name`, `video_url`, `articles`, `created_at`) VALUES
(103116, 103, 2, 'Data Analysis End-to-End Project for RESUME Part 1', 'https://youtu.be/1TmrFEHTg54?si=AV8G1Ds4vJQ739xZ', '{\r\n        \"title\": \"Data Analysis End-to-End Project for RESUME Part 1\",\r\n        \"content\": {\r\n            \"introduction\": \"An end-to-end data analysis project demonstrates your ability to take a dataset from raw form to actionable insights. This process includes data collection, cleaning, exploratory analysis, modeling, and visualization. This article outlines the first part of a comprehensive data analysis project, guiding you through the initial phases, which are crucial for laying the groundwork for successful analysis.\",\r\n            \"main_content\": \"### 1. Project Overview\\n**Objective**: The goal of this project is to analyze a publicly available dataset and derive meaningful insights that can inform decision-making. This project can be adapted to various domains, such as finance, healthcare, retail, or any area that interests you.\\n\\n**Dataset**: Choose a dataset relevant to your project goals. Popular sources include Kaggle, UCI Machine Learning Repository, and government open data portals. For this example, we will use a dataset related to **global temperature changes** over the past century.\\n\\n### 2. Data Collection\\n**Steps**:\\n- Identify the data sources that are reliable and relevant.\\n- Download the dataset in CSV or Excel format.\\n- Understand the dataset\'s structure, including the columns, data types, and the number of records.\\n\\n**Example**: \\n```python\\nimport pandas as pd\\n\\ndataset_url = \'https://example.com/global_temperature.csv\'\\ntemperature_data = pd.read_csv(dataset_url)\\nprint(temperature_data.head())\\n```\\n\\n### 3. Data Cleaning\\nCleaning the data is crucial as raw data often contains inaccuracies and inconsistencies. Key tasks include:\\n- **Handling Missing Values**: Determine how to deal with missing values, whether to fill them with the mean, median, or remove the rows/columns altogether.\\n- **Removing Duplicates**: Ensure there are no duplicate records in the dataset.\\n- **Type Conversion**: Convert data types where necessary to facilitate analysis.\\n- **Outlier Detection**: Identify and treat any outliers that may skew your results.\\n\\n**Example**:\\n```python\\n# Checking for missing values\\nprint(temperature_data.isnull().sum())\\n\\n# Filling missing values\\ntemperature_data.fillna(method=\'ffill\', inplace=True)\\n\\n# Removing duplicates\\ntemperature_data.drop_duplicates(inplace=True)\\n```\\n\\n### 4. Exploratory Data Analysis (EDA)\\nEDA helps to understand the dataset better and forms the basis for further analysis. Key steps include:\\n- **Statistical Summary**: Generate descriptive statistics to get a sense of data distribution.\\n- **Data Visualization**: Use visualizations to explore trends, relationships, and patterns in the data.\\n\\n**Example**:\\n```python\\nimport matplotlib.pyplot as plt\\nimport seaborn as sns\\n\\n# Statistical summary\\nprint(temperature_data.describe())\\n\\n# Plotting global temperature trends over time\\nplt.figure(figsize=(12, 6))\\nsns.lineplot(data=temperature_data, x=\'Year\', y=\'Temperature\')\\nplt.title(\'Global Temperature Trends Over the Years\')\\nplt.xlabel(\'Year\')\\nplt.ylabel(\'Temperature (°C)\')\\nplt.show()\\n```\\n\\n### 5. Insights and Questions\\nDuring EDA, document any insights you discover. Consider questions like:\\n- What are the overall trends in global temperatures?\\n- Are there any noticeable spikes or drops? What could be causing them?\\n- How do different regions compare in terms of temperature changes?\\n\\n**Documentation**: Keep a log of your findings, visualizations, and questions. This will be helpful in the next phases of your project.\\n\",\r\n            \"conclusion\": \"Part 1 of this end-to-end data analysis project sets the foundation for further analysis and modeling. By collecting, cleaning, and exploring your data, you prepare for deeper insights and conclusions in the subsequent phases. In the next part, you will learn about building predictive models and communicating your findings effectively. Completing this project will not only enhance your skills but also significantly improve your resume by showcasing your ability to execute a full data analysis cycle.\"\r\n        }\r\n    }', '2024-08-30 00:02:21'),
(103117, 103, 2, 'Data Analysis End-to-End Project for RESUME Part 2', 'https://youtu.be/ze8eQpfs3_A?si=dRRSwh0WzS-uNSaz', '{\r\n        \"title\": \"Data Analysis End-to-End Project for RESUME Part 2\",\r\n        \"content\": {\r\n            \"introduction\": \"In Part 1 of this series, we focused on the foundational aspects of an end-to-end data analysis project, including data collection, cleaning, and exploratory data analysis (EDA). In Part 2, we will delve into the modeling phase, where you will build predictive models and interpret the results. This part emphasizes how to leverage the insights gained from your analysis to create meaningful conclusions.\",\r\n            \"main_content\": \"### 1. Model Selection\\n**Objective**: Choose appropriate statistical or machine learning models based on the problem statement and data characteristics.\\n\\n**Types of Models**:\\n- **Regression Models**: Used for predicting continuous outcomes (e.g., Linear Regression, Polynomial Regression).\\n- **Classification Models**: Employed when predicting categorical outcomes (e.g., Logistic Regression, Decision Trees, Random Forest).\\n- **Time Series Models**: Suitable for forecasting based on time-dependent data (e.g., ARIMA, Seasonal Decomposition).\\n\\n**Example**: For the global temperature dataset, a linear regression model could be used to predict future temperatures based on historical trends.\\n\\n### 2. Splitting the Dataset\\nBefore modeling, split your dataset into training and testing sets to evaluate the models performance.\\n\\n**Steps**:\\n- Use a typical split of 80% for training and 20% for testing.\\n- Ensure that the split maintains the distribution of data, especially for classification tasks.\\n\\n**Example**:\\n```python\\nfrom sklearn.model_selection import train_test_split\\n\\ny = temperature_data[\'Temperature\']\\nX = temperature_data[[\'Year\']]  # Predictor variable\\n\\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\\n```\\n\\n### 3. Building the Model\\nSelect a model based on your objectives and fit it to the training data. \\n\\n**Example**: Using a simple Linear Regression model:\\n```python\\nfrom sklearn.linear_model import LinearRegression\\n\\nmodel = LinearRegression()\\nmodel.fit(X_train, y_train)\\n```\\n\\n### 4. Model Evaluation\\nEvaluate the model\'s performance using appropriate metrics. Common evaluation metrics include:\\n- **Mean Absolute Error (MAE)**: The average of absolute errors between predicted and actual values.\\n- **Mean Squared Error (MSE)**: The average of the squares of errors.\\n- **R² Score**: Indicates how well the model explains the variability of the response data.\\n\\n**Example**:\\n```python\\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\\n\\npredictions = model.predict(X_test)\\nmae = mean_absolute_error(y_test, predictions)\\nmse = mean_squared_error(y_test, predictions)\\nr2 = r2_score(y_test, predictions)\\n\\nprint(f\'MAE: {mae}, MSE: {mse}, R²: {r2}\')\\n```\\n\\n### 5. Interpretation of Results\\nAfter evaluating the model, interpret the results in the context of your analysis. Consider the following:\\n- What do the evaluation metrics tell you about your model\'s performance?\\n- How do the predictions compare to actual values?\\n- What insights can you derive from the model parameters?\\n\\n**Example**: If the R² score is high (close to 1), it indicates that your model explains a significant portion of the variance in temperature changes.  \\n\\n### 6. Data Visualization of Results\\nVisualize the results to communicate findings effectively. Use scatter plots to compare predicted values against actual values.\\n\\n**Example**:\\n```python\\nplt.figure(figsize=(10, 5))\\nplt.scatter(X_test, y_test, color=\'blue\', label=\'Actual Values\')\\nplt.scatter(X_test, predictions, color=\'red\', label=\'Predicted Values\')\\nplt.title(\'Actual vs. Predicted Temperatures\')\\nplt.xlabel(\'Year\')\\nplt.ylabel(\'Temperature (°C)\')\\nplt.legend()\\nplt.show()\\n```\\n\\n### 7. Conclusion and Next Steps\\nConclude the modeling phase by summarizing key findings and suggesting potential next steps. Consider:\\n- What were the strengths and limitations of your analysis?\\n- Are there additional data sources or features that could improve the model?\\n- How might the insights inform future decisions or actions?\\n\\n**Documentation**: Ensure all findings, methodologies, and visualizations are well-documented for presentation in your resume and portfolio. You might also want to prepare a presentation summarizing your end-to-end analysis process, findings, and insights.\"\r\n        }\r\n    }', '2024-08-30 00:02:21'),
(103118, 103, 2, 'Data Analytics PowerBI Dashboard Project for Resume', 'https://youtu.be/jt0rcsCSs2s?si=_nHvZcQOr8sW6E7M', '{\r\n        \"title\": \"Data Analytics PowerBI Dashboard Project for Resume\",\r\n        \"content\": {\r\n            \"introduction\": \"Power BI is a powerful business analytics tool by Microsoft that allows users to visualize data and share insights across their organizations. This article will guide you through the process of creating a comprehensive Power BI dashboard as part of a data analytics project. By showcasing this project on your resume, you can demonstrate your ability to transform raw data into meaningful insights through visual storytelling.\",\r\n            \"main_content\": \"### 1. Project Overview\\n**Objective**: To create an interactive Power BI dashboard that provides insights into key business metrics, facilitating data-driven decision-making.\\n\\n**Data Source**: Use a dataset that contains relevant business data, such as sales performance, customer demographics, or product inventory.\\n\\n### 2. Data Preparation\\nBefore building the dashboard, ensure your data is clean and well-structured.\\n- **Importing Data**: Load your dataset into Power BI from various sources (Excel, SQL Server, web APIs, etc.).\\n- **Data Cleaning**: Use Power Query Editor to remove duplicates, handle missing values, and transform data types as needed.\\n\\n### 3. Data Modeling\\nOnce your data is cleaned, create relationships between different tables in Power BI to enable seamless data analysis.\\n- **Creating Relationships**: Establish relationships using primary and foreign keys to connect related tables.\\n- **Calculated Columns and Measures**: Create calculated columns and measures using DAX (Data Analysis Expressions) to perform advanced calculations.\\n\\n**Example**: You can create a measure to calculate total sales:\\n```DAX\\nTotal Sales = SUM(Sales[SalesAmount])\\n```\\n\\n### 4. Building the Dashboard\\nWith your data prepared and modeled, begin constructing the dashboard.\\n- **Choosing Visuals**: Select appropriate visualizations to display key metrics effectively (e.g., bar charts, line graphs, pie charts, maps).\\n- **Designing Layout**: Arrange visuals in a logical flow, emphasizing important insights. Use slicers and filters to enhance interactivity.\\n\\n**Example Visuals**:\\n- **Sales Performance by Region**: Use a map visual to show sales distribution across different geographical areas.\\n- **Monthly Sales Trend**: Implement a line chart to depict sales performance over time.\\n- **Top Products**: Utilize a bar chart to display the top-selling products based on total sales.\\n\\n### 5. Enhancing User Experience\\nMake your dashboard user-friendly by adding interactivity and usability features:\\n- **Tooltips**: Configure tooltips to provide additional information when hovering over visuals.\\n- **Bookmarks**: Create bookmarks to save specific views or filters for easy access.\\n- **Navigation**: Add buttons or navigation elements to switch between different report pages easily.\\n\\n### 6. Sharing and Publishing\\nAfter finalizing your dashboard, publish it to the Power BI Service to share insights with stakeholders:\\n- **Publishing**: Use the ‘Publish’ feature in Power BI Desktop to upload your report to the Power BI Service.\\n- **Sharing Options**: Share the dashboard with team members, allowing them to interact with the visuals and gain insights.\\n- **Collaboration**: Leverage Power BI’s collaboration features to gather feedback and make necessary adjustments based on user input.\\n\\n### 7. Conclusion and Impact\\nSummarize the project by highlighting the insights derived from the dashboard and their potential impact:\\n- **Key Insights**: Discuss what the dashboard reveals about business performance (e.g., sales trends, customer behavior).\\n- **Decision-Making**: Emphasize how the insights can influence strategic decisions, such as optimizing marketing efforts or inventory management.\\n\\n**Documentation**: Ensure you document your entire process, including data sources, methodologies, and findings. This will serve as a valuable reference for your resume and portfolio.\",\r\n            \"conclusion\": \"Creating a Power BI dashboard as part of your data analytics project not only enhances your technical skills but also demonstrates your ability to convey complex data insights in a visually compelling manner. This project is an excellent addition to your resume, showcasing your proficiency in data visualization and analytics. As you continue to develop your skills, consider exploring advanced Power BI features, such as AI-driven insights and real-time data analytics, to further enhance your portfolio.\"\r\n        }\r\n    }', '2024-08-30 00:02:21'),
(103119, 103, 3, 'Power BI Part 3', 'https://youtu.be/jt0rcsCSs2s?si=_nHvZcQOr8sW6E7M', '{\r\n        \"title\": \"Power BI Part 3\",\r\n        \"content\": {\r\n            \"introduction\": \"In this third installment of our Power BI series, we will focus on advanced data modeling techniques and the use of Power BI\'s AI capabilities. This session is designed for users who want to elevate their analytics skills by leveraging Power BI\'s features to uncover deeper insights and create highly interactive dashboards that drive decision-making.\",\r\n            \"main_content\": \"### 1. Advanced Data Modeling\\nBuilding on the data relationships discussed in Part 2, this section delves into more intricate data modeling techniques:\\n- **Star Schema vs. Snowflake Schema**: Learn the difference between these two data modeling approaches. The star schema simplifies reporting by using a central fact table connected to dimension tables, while the snowflake schema normalizes the data to reduce redundancy.\\n- **Hierarchies**: Understand how to create hierarchies in Power BI to facilitate drill-down capabilities in your reports. For example, a date hierarchy can allow users to view data by year, quarter, month, and day.\\n\\n### 2. Introduction to AI Features\\nPower BI incorporates AI capabilities that enhance data analysis:\\n- **Quick Insights**: Discover how to use Quick Insights to automatically find patterns in your data, saving time and effort in your analysis.\\n- **AI Visuals**: Utilize AI-driven visuals such as the Key Influencers visual to understand the factors that drive your metrics and the decomposition tree to explore data hierarchies interactively.\\n\\n### 3. Enhanced Report Interactivity\\nIn this segment, we will enhance the interactivity of our reports:\\n- **Drillthrough**: Implement drillthrough pages that allow users to click on a data point and view detailed information about that selection, providing deeper insights.\\n- **Tooltips and Report Page Tooltips**: Learn to create customized tooltips that provide additional context when users hover over visuals, enhancing the user experience.\\n- **What-If Parameters**: Explore how to create What-If analysis parameters that allow users to adjust variables in the report and instantly see the impact on metrics.\\n\\n### 4. Dashboard Design Best Practices\\nDesigning effective dashboards requires thoughtful consideration:\\n- **User-Centric Design**: Emphasize the importance of designing dashboards with the end-user in mind. Focus on clarity, simplicity, and the story your data tells.\\n- **Color Schemes and Layout**: Discuss how to use color schemes effectively to draw attention to key insights while maintaining a professional look.\\n\\n### 5. Collaboration and Data Governance\\nFinally, we will cover aspects of collaboration and data governance in Power BI:\\n- **Workspaces**: Learn about creating and managing workspaces in the Power BI Service to facilitate team collaboration on reports and dashboards.\\n- **Row-Level Security**: Understand how to implement row-level security to control data access at a granular level, ensuring sensitive information is protected while allowing broader access to other data.\\n\\n### 6. Conclusion\\nThis session emphasizes the advanced capabilities of Power BI that enable you to build more sophisticated reports and dashboards. By mastering data modeling, AI features, interactivity enhancements, design best practices, and collaboration tools, you will be well-equipped to provide insightful analytics that can significantly impact business strategies and decisions.\",\r\n            \"conclusion\": \"By the end of this session, you should feel empowered to take full advantage of Power BI\'s advanced features. Whether it\'s through complex data modeling or leveraging AI capabilities, these skills will not only enhance your reports but also improve your overall data storytelling ability. In the next session, we will explore how to integrate Power BI with other data sources and tools to further enhance your analytics capabilities.\"\r\n        }\r\n    }', '2024-08-30 00:02:21'),
(103120, 103, 2, 'Python Intermediate', 'https://youtu.be/czDQqnQT3yQ?si=pAtyZeizRlIawlxz', '{\r\n        \"title\": \"Python Intermediate\",\r\n        \"content\": {\r\n            \"introduction\": \"Intermediate Python covers essential concepts that allow you to write more efficient and powerful programs. This course will deepen your understanding of Python, introducing you to topics such as advanced data structures, decorators, generators, and error handling.\",\r\n            \"main_content\": \"### 1. Advanced Data Structures\\nPython includes powerful built-in data structures like lists, tuples, sets, and dictionaries. Understanding how to utilize these efficiently can enhance your programming skills.\\n\\n### 2. List Comprehensions\\nList comprehensions provide a concise way to create lists. They consist of brackets containing an expression followed by a for clause: \\n\\`\\`\\`python\\nsquares = [x**2 for x in range(10)]\\n\\`\\`\\`\\nThis generates a list of squares from 0 to 9.\\n\\n### 3. Functions as First-Class Citizens\\nIn Python, functions can be passed around as arguments to other functions, returned as values, and assigned to variables: \\n\\`\\`\\`python\\ndef add(a, b):\\n    return a + b\\n\\noperation = add\\nresult = operation(5, 3)  # Outputs: 8\\n\\`\\`\\`\\n\\n### 4. Lambda Functions\\nLambda functions are small anonymous functions defined with the lambda keyword. They can take any number of arguments but only have one expression: \\n\\`\\`\\`python\\nsquare = lambda x: x**2\\nprint(square(5))  # Outputs: 25\\n\\`\\`\\`\\n\\n### 5. Decorators\\nDecorators allow you to modify the behavior of a function or class. They are often used for logging or enforcing access controls: \\n\\`\\`\\`python\\ndef decorator_function(original_function):\\n    def wrapper_function():\\n        print(\"Wrapper executed before {}\".format(original_function.__name__))\\n        return original_function()\\n    return wrapper_function\\n\\n@decorator_function\\ndef display():\\n    return \"Display function executed\"\\n\\`\\`\\`\\n\\n### 6. Generators\\nGenerators are a type of iterable, like lists or tuples. Unlike lists, they do not store their contents in memory. Instead, they generate items on the fly: \\n\\`\\`\\`python\\ndef countdown(num):\\n    while num > 0:\\n        yield num\\n        num -= 1\\n\\`\\`\\`\\n\\n### 7. Exception Handling\\nError handling in Python is done using try, except, and finally blocks. This is crucial for writing robust programs: \\n\\`\\`\\`python\\ntry:\\n    x = 1 / 0\\nexcept ZeroDivisionError:\\n    print(\"You can not divide by zero!\")\\nfinally:\\n    print(\"This block executes no matter what\")\\n\\`\\`\\`\\n\\n### 8. File I/O\\nPython provides built-in functions to read and write files. Understanding file I/O is essential for data processing: \\n\\`\\`\\`python\\nwith open(\'example.txt\', \'r\') as file:\\n    content = file.read()\\n    print(content)\\n\\`\\`\\`\\n\\n### 9. Modules and Packages\\nModular programming helps in organizing code into manageable sections. Use modules to separate functionality and packages to structure your project: \\n\\`\\`\\`python\\nimport math\\nprint(math.sqrt(16))  # Outputs: 4.0\\n\\`\\`\\`\\n\\n### 10. Working with APIs\\nLearn to make requests to external APIs and handle JSON data: \\n\\`\\`\\`python\\nimport requests\\nresponse = requests.get(\"https://api.example.com/data\")\\nprint(response.json())\\n\\`\\`\\`\\n\",\r\n            \"conclusion\": \"By mastering these intermediate topics, you will be able to tackle more complex programming challenges and build more efficient applications. Continue to practice and explore the extensive Python ecosystem to further enhance your skills.\"\r\n        }\r\n    }', '2024-10-01 20:06:35');

-- --------------------------------------------------------

--
-- Table structure for table `data_analytics_qna`
--

CREATE TABLE `data_analytics_qna` (
  `id` int(11) NOT NULL,
  `questions` varchar(255) NOT NULL,
  `option_1` varchar(255) NOT NULL,
  `option_2` varchar(255) NOT NULL,
  `option_3` varchar(255) NOT NULL,
  `option_4` varchar(255) NOT NULL,
  `correct_option` varchar(255) NOT NULL,
  `level` int(11) NOT NULL,
  `title` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `data_analytics_qna`
--

INSERT INTO `data_analytics_qna` (`id`, `questions`, `option_1`, `option_2`, `option_3`, `option_4`, `correct_option`, `level`, `title`) VALUES
(1, 'What is data analytics?', 'The process of examining data sets to draw conclusions', 'A method of data storage', 'A software tool', 'None of the above', 'The process of examining data sets to draw conclusions', 1, 'Introduction to Data Analytics'),
(2, 'Which of the following is a key component of data analytics?', 'Data collection', 'Data formatting', 'Data filtering', 'Data conversion', 'Data collection', 1, 'Introduction to Data Analytics'),
(3, 'What is the role of a data analyst?', 'To analyze and interpret complex data', 'To format data', 'To filter unneeded information', 'None of the above', 'To analyze and interpret complex data', 1, 'Introduction to Data Analytics'),
(4, 'Which tool is most commonly used for data analysis?', 'Excel', 'Word', 'PowerPoint', 'Photoshop', 'Excel', 1, 'Introduction to Data Analytics'),
(5, 'What is the first step in data analysis?', 'Data collection', 'Data visualization', 'Data interpretation', 'Data storage', 'Data collection', 1, 'Introduction to Data Analytics'),
(6, 'What is an Excel Workbook?', 'A collection of worksheets', 'A single worksheet', 'A formula in Excel', 'A chart', 'A collection of worksheets', 1, 'Excel Basic'),
(7, 'What is a cell in Excel?', 'An intersection of a row and a column', 'A formula', 'A chart', 'A workbook', 'An intersection of a row and a column', 1, 'Excel Basic'),
(8, 'How do you create a formula in Excel?', 'By typing an equal sign (=) followed by the formula', 'By selecting the chart tool', 'By clicking on the data tab', 'None of the above', 'By typing an equal sign (=) followed by the formula', 1, 'Excel Basic'),
(9, 'What is the default file extension for an Excel workbook?', '.xlsx', '.xls', '.docx', '.csv', '.xlsx', 1, 'Excel Basic'),
(10, 'Which of the following is a built-in function in Excel?', 'SUM()', 'AVERAGE()', 'COUNT()', 'All of the above', 'All of the above', 1, 'Excel Basic'),
(11, 'What does SQL stand for?', 'Structured Query Language', 'Simple Query Language', 'Structured Question Language', 'None of the above', 'Structured Query Language', 1, 'SQL Basic'),
(12, 'Which SQL statement is used to extract data from a database?', 'SELECT', 'GET', 'EXTRACT', 'OPEN', 'SELECT', 1, 'SQL Basic'),
(13, 'Which SQL statement is used to insert new data into a database?', 'INSERT INTO', 'ADD NEW', 'INSERT NEW', 'ADD ROW', 'INSERT INTO', 1, 'SQL Basic'),
(14, 'Which SQL keyword is used to sort the result-set?', 'ORDER BY', 'SORT BY', 'GROUP BY', 'SORT ORDER', 'ORDER BY', 1, 'SQL Basic'),
(15, 'Which SQL function is used to count the number of rows in a table?', 'COUNT()', 'NUMBER()', 'SUM()', 'ROWCOUNT()', 'COUNT()', 1, 'SQL Basic'),
(16, 'What is the correct extension of a Python file?', '.py', '.python', '.pt', '.txt', '.py', 1, 'Python Basic'),
(17, 'Which keyword is used to define a function in Python?', 'def', 'func', 'define', 'function', 'def', 1, 'Python Basic'),
(18, 'Which of the following is a mutable data type in Python?', 'List', 'Tuple', 'String', 'Integer', 'List', 1, 'Python Basic'),
(19, 'Which function is used to get the length of a list in Python?', 'len()', 'length()', 'size()', 'count()', 'len()', 1, 'Python Basic'),
(20, 'How do you start a comment in Python?', '#', '//', '/*', '--', '#', 1, 'Python Basic'),
(21, 'What is Exploratory Data Analysis (EDA)?', 'A process of analyzing datasets to summarize their main characteristics', 'A method for collecting data', 'A technique for machine learning', 'None of the above', 'A process of analyzing datasets to summarize their main characteristics', 1, 'Exploratory Data Analysis (EDA)'),
(22, 'Which of the following is a key step in EDA?', 'Data visualization', 'Model training', 'Data transformation', 'Feature extraction', 'Data visualization', 1, 'Exploratory Data Analysis (EDA)'),
(23, 'Which library in Python is commonly used for data visualization in EDA?', 'Matplotlib', 'NumPy', 'Pandas', 'Scikit-learn', 'Matplotlib', 1, 'Exploratory Data Analysis (EDA)'),
(24, 'Which of the following tools can be used for EDA?', 'Excel', 'R', 'Python', 'All of the above', 'All of the above', 1, 'Exploratory Data Analysis (EDA)'),
(25, 'What is the purpose of handling missing data in EDA?', 'To ensure data completeness', 'To simplify model training', 'To remove duplicate records', 'To increase data size', 'To ensure data completeness', 1, 'Exploratory Data Analysis (EDA)'),
(26, 'What is the primary purpose of data visualization?', 'To present data in a visual format', 'To perform statistical analysis', 'To store data', 'To clean data', 'To present data in a visual format', 1, 'Data Visualization'),
(27, 'Which of the following is a common type of data visualization?', 'Bar chart', 'Line graph', 'Pie chart', 'All of the above', 'All of the above', 1, 'Data Visualization'),
(28, 'Which library in Python is commonly used for data visualization?', 'Matplotlib', 'NumPy', 'Pandas', 'SciPy', 'Matplotlib', 1, 'Data Visualization'),
(29, 'What does a scatter plot show?', 'The relationship between two variables', 'The distribution of a single variable', 'Time series data', 'Categorical data', 'The relationship between two variables', 1, 'Data Visualization'),
(30, 'Which chart is best for showing parts of a whole?', 'Pie chart', 'Bar chart', 'Histogram', 'Line graph', 'Pie chart', 1, 'Data Visualization'),
(31, 'What function is used to find the maximum value in a range in Excel?', 'MAX()', 'MIN()', 'AVERAGE()', 'SUM()', 'MAX()', 2, 'Advanced Excel Part 1'),
(32, 'Which feature allows you to automatically fill in data based on a pattern?', 'AutoFill', 'Flash Fill', 'Data Validation', 'Conditional Formatting', 'AutoFill', 2, 'Advanced Excel Part 1'),
(33, 'What is a PivotTable used for?', 'Summarizing data', 'Visualizing data', 'Filtering data', 'Entering data', 'Summarizing data', 2, 'Advanced Excel Part 1'),
(34, 'Which Excel function is used to concatenate text?', 'CONCATENATE()', 'JOIN()', 'MERGE()', 'TEXTJOIN()', 'CONCATENATE()', 2, 'Advanced Excel Part 1'),
(35, 'What does the VLOOKUP function do?', 'Looks up a value in a table and returns a corresponding value', 'Validates data', 'Visualizes data', 'Summarizes data', 'Looks up a value in a table and returns a corresponding value', 2, 'Advanced Excel Part 1'),
(36, 'What is Power BI primarily used for?', 'Data visualization and business intelligence', 'Data entry', 'Database management', 'Web development', 'Data visualization and business intelligence', 2, 'Power BI Part 1'),
(37, 'Which component of Power BI is used for creating reports?', 'Power BI Desktop', 'Power BI Service', 'Power BI Gateway', 'Power BI Mobile', 'Power BI Desktop', 2, 'Power BI Part 1'),
(38, 'What file format is commonly used to import data into Power BI?', '.pbix', '.xlsx', '.csv', '.json', '.pbix', 2, 'Power BI Part 1'),
(39, 'What feature allows you to create visuals in Power BI?', 'Report view', 'Data view', 'Model view', 'All of the above', 'All of the above', 2, 'Power BI Part 1'),
(40, 'Which of the following is NOT a data source you can connect to Power BI?', 'SQL Server', 'Excel', 'Access', 'Photoshop', 'Photoshop', 2, 'Power BI Part 1'),
(41, 'What is DAX in Power BI?', 'Data Analysis Expressions', 'Data Aggregate Expressions', 'Data Application Expressions', 'Data Access Expressions', 'Data Analysis Expressions', 2, 'Power BI Part 2'),
(42, 'Which DAX function is used to calculate the sum of a column?', 'SUM()', 'TOTAL()', 'ADD()', 'SUMX()', 'SUM()', 2, 'Power BI Part 2'),
(43, 'What is the purpose of a calculated column in Power BI?', 'To add new data to a table', 'To create a new table', 'To perform calculations on existing data', 'To visualize data', 'To perform calculations on existing data', 2, 'Power BI Part 2'),
(44, 'Which visualization is best for comparing values across categories?', 'Bar chart', 'Line chart', 'Pie chart', 'Scatter plot', 'Bar chart', 2, 'Power BI Part 2'),
(45, 'What is the function of Power Query in Power BI?', 'Data transformation and preparation', 'Data visualization', 'Data analysis', 'Data storage', 'Data transformation and preparation', 2, 'Power BI Part 2'),
(46, 'What does DDL stand for in SQL?', 'Data Definition Language', 'Data Development Language', 'Data Description Language', 'Data Document Language', 'Data Definition Language', 2, 'SQL DDL'),
(47, 'Which command is used to create a table in SQL?', 'CREATE TABLE', 'INSERT INTO', 'SELECT', 'UPDATE', 'CREATE TABLE', 2, 'SQL DDL'),
(48, 'Which SQL command is used to remove a table?', 'DROP TABLE', 'DELETE TABLE', 'REMOVE TABLE', 'TRUNCATE TABLE', 'DROP TABLE', 2, 'SQL DDL'),
(49, 'What command is used to modify an existing table structure?', 'ALTER TABLE', 'UPDATE TABLE', 'MODIFY TABLE', 'CHANGE TABLE', 'ALTER TABLE', 2, 'SQL DDL'),
(50, 'Which of the following is NOT a DDL command?', 'CREATE', 'SELECT', 'DROP', 'ALTER', 'SELECT', 2, 'SQL DDL'),
(51, 'What does DML stand for in SQL?', 'Data Manipulation Language', 'Data Management Language', 'Data Modification Language', 'Data Movement Language', 'Data Manipulation Language', 2, 'SQL DML & Order By'),
(52, 'Which command is used to retrieve data from a database?', 'SELECT', 'GET', 'FETCH', 'PULL', 'SELECT', 2, 'SQL DML & Order By'),
(53, 'What keyword is used to sort the result set in SQL?', 'ORDER BY', 'SORT BY', 'GROUP BY', 'ARRANGE BY', 'ORDER BY', 2, 'SQL DML & Order By'),
(54, 'Which command is used to insert new data into a table?', 'INSERT INTO', 'ADD INTO', 'NEW ROW', 'APPEND', 'INSERT INTO', 2, 'SQL DML & Order By'),
(55, 'What is the default sorting order when using ORDER BY?', 'Ascending', 'Descending', 'Random', 'No order', 'Ascending', 2, 'SQL DML & Order By'),
(56, 'What does the `map()` function do in Python?', 'Applies a function to all items in an iterable', 'Returns a list of items', 'Creates a dictionary from a list', 'Filters items from an iterable', 'Applies a function to all items in an iterable', 2, 'Python Intermediate'),
(57, 'Which of the following is used to define a function in Python?', 'def', 'function', 'func', 'define', 'def', 2, 'Python Intermediate'),
(58, 'What is the output of `print(type([]))`?', '<class \'list\'>', '<class \'tuple\'>', '<class \'dict\'>', '<class \'set\'>', '<class \'list\'>', 2, 'Python Intermediate'),
(59, 'Which module is used for regular expressions in Python?', 're', 'regex', 'regexp', 're_expr', 're', 2, 'Python Intermediate'),
(60, 'What keyword is used to handle exceptions in Python?', 'try', 'except', 'handle', 'catch', 'except', 2, 'Python Intermediate'),
(61, 'Which function would you use to create a dynamic range in Excel?', 'OFFSET', 'INDEX', 'MATCH', 'VLOOKUP', 'OFFSET', 3, 'Advanced Excel Part 2'),
(62, 'What is the maximum number of rows in an Excel worksheet?', '1,048,576', '1,024,576', '2,048,576', '10,000,000', '1,048,576', 3, 'Advanced Excel Part 2'),
(63, 'What feature allows you to analyze data trends over time in Excel?', 'Sparklines', 'Data Tables', 'What-If Analysis', 'Scenarios', 'Sparklines', 3, 'Advanced Excel Part 2'),
(64, 'Which formula calculates the weighted average in Excel?', 'SUMPRODUCT', 'AVERAGE', 'SUMIF', 'COUNTIF', 'SUMPRODUCT', 3, 'Advanced Excel Part 2'),
(65, 'What does the function CONCATENATE do in Excel?', 'Joins two or more strings together', 'Calculates the average', 'Counts the number of characters', 'Extracts text from a cell', 'Joins two or more strings together', 3, 'Advanced Excel Part 2'),
(66, 'What does the GROUP BY clause do in SQL?', 'Groups rows that have the same values in specified columns', 'Filters the results', 'Sorts the results', 'Joins two tables', 'Groups rows that have the same values in specified columns', 3, 'SQL Group By'),
(67, 'Which aggregate function counts the number of rows in a group?', 'COUNT()', 'SUM()', 'AVG()', 'MAX()', 'COUNT()', 3, 'SQL Group By'),
(68, 'What is the result of using GROUP BY without an aggregate function?', 'Error', 'Distinct values', 'All values', 'Grouped values', 'Error', 3, 'SQL Group By'),
(69, 'Can you use GROUP BY with the WHERE clause?', 'Yes', 'No', 'Only with certain functions', 'Only in subqueries', 'Yes', 3, 'SQL Group By'),
(70, 'Which clause is used to filter records after GROUP BY?', 'HAVING', 'WHERE', 'ORDER BY', 'LIMIT', 'HAVING', 3, 'SQL Group By'),
(71, 'What does an INNER JOIN do?', 'Returns only the rows with matching values in both tables', 'Returns all rows from the first table', 'Returns all rows from both tables', 'Returns non-matching rows', 'Returns only the rows with matching values in both tables', 3, 'SQL Joins'),
(72, 'Which join returns all records from the left table and matched records from the right table?', 'LEFT JOIN', 'RIGHT JOIN', 'INNER JOIN', 'FULL JOIN', 'LEFT JOIN', 3, 'SQL Joins'),
(73, 'What is a CROSS JOIN?', 'A join that returns the Cartesian product of two tables', 'A join that returns only matching rows', 'A join that filters data', 'A join that combines columns', 'A join that returns the Cartesian product of two tables', 3, 'SQL Joins'),
(74, 'Can you join more than two tables in SQL?', 'Yes', 'No', 'Only if they have the same columns', 'Only in subqueries', 'Yes', 3, 'SQL Joins'),
(75, 'What keyword is used to combine rows from two or more tables?', 'JOIN', 'MERGE', 'COMBINE', 'LINK', 'JOIN', 3, 'SQL Joins'),
(76, 'What is the purpose of creating a relationship between tables in Power BI?', 'To relate data and enable cross-filtering', 'To duplicate data', 'To remove duplicates', 'To enhance visualizations', 'To relate data and enable cross-filtering', 3, 'Power BI Part 3'),
(77, 'What is a measure in Power BI?', 'A calculation used in data analysis', 'A column of data', 'A type of visualization', 'A report', 'A calculation used in data analysis', 3, 'Power BI Part 3'),
(78, 'Which visualization is best for showing the percentage of a whole?', 'Pie chart', 'Bar chart', 'Line chart', 'Scatter plot', 'Pie chart', 3, 'Power BI Part 3'),
(79, 'What function is used to create a new table in Power BI?', 'DATATABLE', 'CREATETABLE', 'ADDCOLUMNS', 'SUMMARIZE', 'DATATABLE', 3, 'Power BI Part 3'),
(80, 'Which of the following is NOT a valid data type in Power BI?', 'Currency', 'Text', 'Decimal', 'Blob', 'Blob', 3, 'Power BI Part 3');

-- --------------------------------------------------------

--
-- Table structure for table `excel_course`
--

CREATE TABLE `excel_course` (
  `id` int(11) NOT NULL,
  `course_id` int(11) NOT NULL,
  `level` int(11) NOT NULL,
  `topic_name` varchar(400) NOT NULL,
  `video_url` varchar(280) NOT NULL,
  `articles` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `created_at` varchar(240) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `excel_course`
--

INSERT INTO `excel_course` (`id`, `course_id`, `level`, `topic_name`, `video_url`, `articles`, `created_at`) VALUES
(102101, 102, 1, 'Excel Introduction', 'https://youtu.be/310z5K14JXw?si=9Y6zm5-HVblqJdHM', '{\r\n    \"title\": \"Excel Introduction\",\r\n    \"content\": {\r\n        \"introduction\": \"Microsoft Excel is a powerful spreadsheet application that allows users to organize, format, and calculate data with formulas using a system of rows and columns. It is widely used for financial analysis, data management, and visualization.\",\r\n        \"main_content\": \"### 1. What is Excel?\\nExcel is part of the Microsoft Office Suite and is utilized for creating spreadsheets, graphs, and charts. It enables users to manipulate data for various tasks, including budgeting, data analysis, and forecasting.\\n\\n### 2. Getting Started with Excel\\n- **Interface Overview:** Familiarize yourself with the Excel interface, including the ribbon, workbook, worksheets, cells, and the status bar.\\n- **Creating a New Workbook:** Click on \\\"New\\\" from the File menu to create a new workbook. You can choose from various templates or start with a blank workbook.\",\r\n        \"conclusion\": \"Excel is a versatile tool that offers extensive features for working with data. Whether you are managing a personal budget or analyzing a large dataset, understanding the basics of Excel will significantly improve your productivity.\"\r\n    }\r\n}', '2024-10-02 20:16:21'),
(102102, 102, 2, 'Excel Functions Overview', 'https://youtu.be/Yo7ellmlH4Q?si=qTdZfkTXEo4rSnom', '{\r\n    \"title\": \"Excel Functions Overview\",\r\n    \"content\": {\r\n        \"introduction\": \"Excel functions are predefined formulas that perform calculations using specific values, called arguments, in a particular order. Functions are an essential part of Excel, enabling users to perform complex calculations with ease and accuracy. This article provides an overview of some commonly used Excel functions.\",\r\n        \"main_content\": \"### 1. What are Functions?\\nFunctions in Excel are built-in formulas that help users perform calculations or data analysis without having to write complex formulas from scratch. Functions can range from simple calculations, like summing numbers, to more complex operations, such as statistical analysis.\\n\\n### 2. Common Excel Functions\\n- **SUM:** The SUM function adds together a range of numbers. For example, to sum the values in cells A1 to A10, use: `=SUM(A1:A10)`.\\n- **AVERAGE:** The AVERAGE function calculates the mean of a group of numbers. For example, to find the average of the values in cells B1 to B10, use: `=AVERAGE(B1:B10)`.\\n- **COUNT:** The COUNT function counts the number of cells that contain numbers. For example, to count the number of numeric entries in cells C1 to C10, use: `=COUNT(C1:C10)`.\\n- **IF:** The IF function returns one value if a condition is true and another value if it is false. For example, to check if the value in cell D1 is greater than 100, use: `=IF(D1>100, \'Above 100\', \'100 or Below\')`.\\n- **VLOOKUP:** The VLOOKUP function searches for a value in the first column of a range and returns a value in the same row from a specified column. For example, to find the price of a product in a table, use: `=VLOOKUP(E1, A2:C10, 3, FALSE)`.\",\r\n        \"conclusion\": \"Mastering Excel functions is crucial for anyone looking to leverage Excel for data analysis and reporting. By understanding and utilizing these functions, users can significantly enhance their productivity and the accuracy of their calculations.\"\r\n    }\r\n}', '2024-10-02 20:27:04'),
(102103, 102, 2, 'Excel Intermediate', 'https://youtu.be/Yo7ellmlH4Q?si=3BOPEk_LYVBiam2C', '{\r\n    \"title\": \"Excel Intermediate\",\r\n    \"content\": {\r\n        \"introduction\": \"The intermediate level of Excel builds on the basics and introduces more advanced tools and functions for data management and analysis. This article covers key Excel features that help users streamline workflows and work with larger data sets efficiently.\",\r\n        \"main_content\": \"### 1. Working with Tables\\nTables in Excel allow you to organize large sets of data, making it easier to filter, sort, and apply formulas to entire columns. To create a table, select your data range and go to \'Insert > Table.\'\\n\\n### 2. Using Conditional Formatting\\nConditional formatting enables you to format cells based on specific criteria. For instance, you can highlight cells that contain values greater than 100 by going to \'Home > Conditional Formatting\' and setting your rule.\\n\\n### 3. Data Validation\\nData validation allows you to control what users can enter into a cell. You can set rules like only allowing numbers or dates within a specific range. Find this option under \'Data > Data Validation.\'\\n\\n### 4. Working with PivotTables\\nPivotTables help summarize large data sets by grouping and filtering data. You can create a PivotTable by selecting your data and going to \'Insert > PivotTable.\' Then, you can drag fields into the rows, columns, values, and filter areas to organize your data.\\n\\n### 5. Lookup and Reference Functions\\n- **INDEX and MATCH:** These functions are used together to create more flexible lookups than VLOOKUP. INDEX returns the value of a cell in a table, and MATCH provides the relative position of a value in a range. For example, `=INDEX(A1:B10, MATCH(D1, A1:A10, 0), 2)` returns the value in the matching row and specified column.\\n- **HLOOKUP:** Similar to VLOOKUP, HLOOKUP searches for a value in the top row of a table and returns a value in the same column from a specified row.\\n\\n### 6. Text Functions\\n- **CONCATENATE:** Combines multiple text strings into one. For example, `=CONCATENATE(A1, B1)` combines the values in cells A1 and B1.\\n- **TEXT:** Converts a value to text in a specific format. For example, `=TEXT(A1, \'dd/mm/yyyy\')` converts a date into the specified format.\\n\\n### 7. Advanced Charting\\nCreating charts with multiple data series and customizing them allows for better visualization of complex data. You can use the \'Chart Tools\' to modify the appearance and add secondary axes for better clarity.\",\r\n        \"conclusion\": \"Intermediate Excel skills open up new possibilities for handling and analyzing data. By mastering features such as PivotTables, conditional formatting, and lookup functions, users can increase efficiency and uncover deeper insights from their data.\"\r\n    }\r\n}', '2024-10-02 20:29:24'),
(102104, 102, 3, 'Excel Advance', 'https://youtu.be/gsAVUCXMQSI?si=oqjiG8OQXkJR3ZI4', '{\r\n    \"title\": \"Excel Advance\",\r\n    \"content\": {\r\n        \"introduction\": \"Advanced Excel features allow users to perform complex data analysis, automate tasks, and create dynamic reports. Mastering these advanced techniques can significantly enhance productivity and data management capabilities.\",\r\n        \"main_content\": \"### 1. Advanced Formulas\\nAdvanced formulas go beyond basic calculations. They often involve multiple functions and nested operations. Examples include:\\n- **INDEX and MATCH:** This combination allows for more flexible lookups compared to VLOOKUP. `=INDEX(B1:B10, MATCH(D1, A1:A10, 0))` retrieves a value from column B based on a match in column A.\\n- **ARRAY FORMULAS:** These formulas can perform multiple calculations on one or more items in an array. Use `CTRL + SHIFT + ENTER` to enter them. For example, `=SUM(IF(A1:A10>10, B1:B10))` calculates the sum of B1:B10 where the corresponding A1:A10 values are greater than 10.\\n\\n### 2. Pivot Tables\\nPivot Tables are powerful tools for summarizing data in Excel. They allow you to analyze large datasets efficiently.\\n- **Creating a Pivot Table:** Select your data range, go to the Insert tab, and click on PivotTable. You can then drag fields into Rows, Columns, and Values to arrange your data.\\n- **Slicers:** Use slicers for interactive filtering of data in your PivotTable. This allows for quick adjustments without modifying the source data.\\n\\n### 3. Data Visualization\\nEffective data visualization is key to presenting data clearly and compellingly.\\n- **Charts:** Excel offers various chart types, including column, line, pie, and scatter charts. Choose the chart that best represents your data.\\n- **Conditional Formatting:** Use conditional formatting to highlight important data points. For example, you can color cells based on their values or set up data bars to visualize data trends.\\n\\n### 4. Advanced Data Analysis Tools\\nExcel provides tools for advanced data analysis, including:\\n- **What-If Analysis:** Use tools like Goal Seek and Data Tables to explore different scenarios. For instance, Goal Seek can help determine what value is needed in one cell to achieve a desired outcome in another.\\n- **Solver:** The Solver add-in can help find optimal solutions for complex problems, such as maximizing profits or minimizing costs based on certain constraints.\\n\\n### 5. Macros and VBA\\nMacros automate repetitive tasks in Excel, saving time and effort.\\n- **Recording a Macro:** Go to the View tab, click on Macros, and select Record Macro. Perform the actions you want to automate, then stop recording. You can run this macro later to repeat the actions.\\n- **Using VBA:** For more advanced automation, learn Visual Basic for Applications (VBA) to create custom functions and automate tasks programmatically.\",\r\n        \"conclusion\": \"Mastering advanced Excel techniques will greatly enhance your ability to analyze data, create insightful reports, and streamline your workflow. As you become proficient in these skills, you will be better equipped to handle complex data scenarios and make informed decisions based on your findings.\"\r\n    }\r\n}', '2024-10-02 20:31:34'),
(102105, 102, 1, 'Excel Intro to Data Analysis', 'https://youtu.be/YE1HBEY2upg?si=PKZyCx15Vt8BqJi2', '{\r\n    \"title\": \"Excel Intro to Data Analysis\",\r\n    \"content\": {\r\n        \"introduction\": \"Data analysis in Excel involves using various tools and functions to interpret and present data effectively. Excel capabilities make it a popular choice for individuals and organizations to analyze and visualize data to inform decision-making.\",\r\n        \"main_content\": \"### 1. Understanding Data Analysis\\nData analysis is the process of inspecting, cleansing, transforming, and modeling data to discover useful information, draw conclusions, and support decision-making. Excel provides a user-friendly platform for performing these tasks.\\n\\n### 2. Organizing Data\\n- **Data Entry:** Enter data into Excel in a structured format, using rows for records and columns for attributes. Make sure to label your columns appropriately for clarity.\\n- **Data Formatting:** Use Excel formatting options to make your data more readable. This includes adjusting font sizes, colors, and number formats (like currency and percentages).\\n\\n### 3. Data Cleaning\\nCleaning your data is essential before analysis.\\n- **Removing Duplicates:** Use the \'Remove Duplicates\' feature under the Data tab to eliminate duplicate entries from your dataset.\\n- **Handling Missing Values:** Identify and address missing data points. You can fill them with averages, medians, or use Excel functions like `IF` and `ISBLANK` to manage them.\\n\\n### 4. Analyzing Data\\n- **Descriptive Statistics:** Use functions like AVERAGE, MEDIAN, MODE, MIN, MAX, and STDEV to summarize your data and gain insights into its characteristics.\\n- **Data Visualization:** Create charts and graphs to visualize trends and patterns in your data. Common types include bar charts, line graphs, and scatter plots.\\n\\n### 5. Using Formulas and Functions\\nExcel has a vast array of functions that can enhance your data analysis capabilities:\\n- **Logical Functions:** Use `IF`, `AND`, `OR`, and `NOT` to make decisions based on data conditions.\\n- **Lookup Functions:** Use `VLOOKUP` and `HLOOKUP` to search for specific information within your dataset.\\n- **Text Functions:** Functions like `LEFT`, `RIGHT`, `MID`, and `CONCATENATE` help manipulate and analyze text data.\\n\\n### 6. Advanced Tools for Data Analysis\\n- **PivotTables:** These allow for powerful data summarization. You can group, filter, and analyze large datasets dynamically, providing insights at a glance.\\n- **Data Analysis ToolPak:** This add-in provides advanced analysis features, including regression analysis, ANOVA, and histograms. You can activate it through Excel Options > Add-ins.\\n\\n### 7. Sharing Results\\n- **Creating Reports:** Once your analysis is complete, compile your findings into a report. Include charts, graphs, and summaries of key insights.\\n- **Collaborating:** Excel allows you to share your workbooks with others for collaborative analysis. Use OneDrive or SharePoint for real-time collaboration.\",\r\n        \"conclusion\": \"Understanding the fundamentals of data analysis in Excel empowers you to make informed decisions based on data insights. By mastering data organization, cleaning, analysis techniques, and visualization, you can enhance your analytical skills and drive better outcomes in your projects.\"\r\n    }\r\n}', '2024-09-28 08:20:00'),
(102106, 102, 1, 'Excel Pivot Tables', 'https://youtu.be/kSNxzoe9RcM?si=aKkZ-SYniAyzzt9e', '{\r\n    \"title\": \"Excel Pivot Tables\",\r\n    \"content\": {\r\n        \"introduction\": \"Pivot Tables are a powerful feature in Excel that allow users to summarize, analyze, explore, and present data in a dynamic way. They enable users to transform large datasets into meaningful insights without requiring complex formulas.\",\r\n        \"main_content\": \"### 1. What is a Pivot Table?\\nA Pivot Table is a data processing tool that allows you to aggregate and manipulate data from a larger dataset. It helps to easily summarize and analyze large amounts of data by reorganizing it into a format that is easier to read and interpret.\\n\\n### 2. Creating a Pivot Table\\n- **Select Your Data:** Start by selecting the range of data you want to analyze, including headers for each column.\\n- **Insert Pivot Table:** Navigate to the \'Insert\' tab in the Ribbon and click on \'PivotTable\'. Choose whether to place the Pivot Table in a new worksheet or an existing one.\\n- **Setting Up the Pivot Table:** A dialog box will appear. Select your data range and choose the location for the Pivot Table, then click \'OK\'.\\n\\n### 3. Configuring the Pivot Table\\n- **Fields List:** A Pivot Table Field List will appear, showing all the fields from your selected data range. You can drag and drop fields into four areas:\\n - **Rows:** Define how your data will be grouped by rows.\\n - **Columns:** Define how your data will be grouped by columns.\\n - **Values:** Add numerical data that you want to summarize.\\n - **Filters:** Allow for filtering your data based on certain criteria.\\n\\n### 4. Customizing the Pivot Table\\n- **Sorting and Filtering:** You can sort your data alphabetically or numerically. You can also apply filters to display only the information you want.\\n- **Value Field Settings:** Click on any value in the Pivot Table and select \'Value Field Settings\' to change how the data is summarized (e.g., Sum, Average, Count, etc.).\\n- **Formatting:** Use the Design tab to apply different styles and formats to your Pivot Table to make it visually appealing and easier to read.\\n\\n### 5. Updating the Pivot Table\\n- **Refresh Data:** If the source data changes, you can refresh your Pivot Table to reflect the updates. Right-click on the Pivot Table and select \'Refresh\'.\\n- **Changing Data Source:** If you need to change the data source for your Pivot Table, right-click and choose \'Change Data Source\'. This allows you to select a different range of data.\\n\\n### 6. Advanced Features\\n- **Grouping Data:** You can group dates or numerical data into ranges for more manageable analysis. For example, you can group sales data by month or year.\\n- **Calculated Fields:** Create calculated fields within your Pivot Table to add custom calculations that are not present in the original data.\\n- **Slicers and Timelines:** Use Slicers to add visual filters to your Pivot Table, making it easier to filter data interactively. Timelines allow you to filter dates effectively.\\n\\n### 7. Analyzing Results\\n- **Interpretation:** Once your Pivot Table is set up, you can analyze trends, totals, and other key metrics at a glance. Look for patterns in the data to make informed decisions.\\n- **Exporting Data:** You can copy your Pivot Table to other applications or export it to create reports. You can also create charts from your Pivot Table data for visual representation.\",\r\n        \"conclusion\": \"Mastering Pivot Tables in Excel is essential for anyone working with data. They provide a robust way to analyze and summarize large datasets, making it easier to uncover insights and drive informed decisions. By utilizing Pivot Tables effectively, you can enhance your data analysis capabilities and improve your productivity.\"\r\n    }\r\n}', '2024-10-02 20:33:34'),
(102107, 102, 1, 'Excel Capilot', 'https://youtu.be/Fr0nM_-jpjc?si=FV5eZOuYagtn63rA', '{\r\n    \"title\": \"Excel Capilot\",\r\n    \"content\": {\r\n        \"introduction\": \"Excel Capilot is a tool designed to enhance productivity in Excel by providing users with intelligent suggestions and assistance while working with spreadsheets. It leverages AI technology to streamline various tasks and improve overall efficiency.\",\r\n        \"main_content\": \"### 1. What is Excel Capilot?\nExcel Capilot is an advanced feature integrated into Microsoft Excel that offers real-time guidance and automated suggestions for data entry, formula creation, and analysis. It aims to simplify the user experience by reducing the time spent on repetitive tasks and minimizing errors.\n\n### 2. Key Features of Excel Capilot\n- **Formula Assistance:** Capilot suggests relevant formulas based on the user\'s current data and context. It helps users quickly find and apply the right functions without having to search through documentation.\n- **Data Insights:** It analyzes the dataset and provides insights or visualizations that help users understand trends and patterns without manual intervention.\n- **Smart Fill:** This feature allows users to automatically fill in values based on patterns identified in the data, reducing the need for repetitive manual entries.\n- **Error Checking:** Capilot identifies potential errors in formulas and data entries, offering suggestions to correct them before finalizing the spreadsheet.\n\n### 3. Getting Started with Excel Capilot\n- **Activation:** To enable Capilot, ensure your Excel application is updated to the latest version, and navigate to the \'Capilot\' tab on the Ribbon.\n- **Using Capilot:** Start typing in a cell, and Capilot will automatically suggest relevant formulas or actions based on your input. You can click on suggestions to quickly apply them.\n\n### 4. Benefits of Using Excel Capilot\n- **Increased Productivity:** By automating repetitive tasks and suggesting relevant tools, users can save time and focus on more critical analysis and decision-making tasks.\n- **Reduced Learning Curve:** New users can quickly learn to use Excel features effectively with guided assistance, making it easier to get started with complex tasks.\n- **Enhanced Accuracy:** Capilot\'s error-checking and suggestion features help minimize mistakes in data entry and formula application.\n\n### 5. Tips for Maximizing Excel Capilot\n- **Explore Suggestions:** Take the time to explore different suggestions offered by Capilot. You may discover features and functions you weren\'t aware of that can enhance your work.\n- **Feedback:** Provide feedback on Capilot\'s suggestions to help improve its accuracy and relevance over time. This feedback can help tailor its recommendations to your specific usage patterns.\n- **Regular Updates:** Keep Excel updated to ensure you have access to the latest features and improvements in Capilot. This will enhance your overall experience and capabilities.\n\n### 6. Troubleshooting Common Issues\n- **Slow Performance:** If Capilot is slow, check your internet connection and ensure that Excel is running the latest version. Clearing the cache can also help.\n- **Suggestions Not Appearing:** If suggestions do not appear, ensure that Capilot is enabled in your settings. You may also want to restart Excel to refresh the feature.\n- **Limited Functionality:** Some features may vary depending on your Excel version or subscription plan. Ensure you have access to the full capabilities of Capilot by using the latest version of Microsoft Office.\n\",\r\n        \"conclusion\": \"Excel Capilot is a valuable tool that empowers users to work more efficiently with Excel. By leveraging AI to provide intelligent suggestions and automate mundane tasks, it enhances productivity and accuracy in data handling. Embracing Capilot can significantly improve the overall user experience and streamline complex workflows in Excel.\"\r\n    }\r\n}', '2024-09-28 08:30:00'),
(102108, 102, 1, 'Excel Power User', 'https://youtu.be/x98qOYt_NCQ?si=Vsn5e2QJJ5JxAOuJ', '{\r\n    \"title\": \"Excel Power User\",\r\n    \"content\": {\r\n        \"introduction\": \"An Excel Power User is someone who possesses advanced skills and knowledge in Microsoft Excel, enabling them to efficiently analyze data, automate tasks, and utilize complex functionalities to enhance productivity. Power Users often leverage a combination of formulas, macros, pivot tables, and data visualization tools.\",\r\n        \"main_content\": \"### 1. What is an Excel Power User?\nExcel Power Users are individuals who can navigate the software beyond basic functionalities. They understand how to implement advanced features to solve complex problems and streamline workflows. Their skills typically include working with large datasets, creating automated reports, and optimizing data analysis processes.\n\n### 2. Key Skills of an Excel Power User\n- **Advanced Formulas:** Proficiency in complex formulas such as array formulas, nested functions, and conditional statements (e.g., IF, SUMIF, VLOOKUP, INDEX/MATCH).\n- **Data Analysis Tools:** Expertise in using tools like PivotTables and Power Query for data manipulation, summarization, and reporting.\n- **Automation with Macros:** Ability to record and write macros in VBA (Visual Basic for Applications) to automate repetitive tasks and improve efficiency.\n- **Data Visualization:** Skills in creating compelling charts, graphs, and dashboards to present data insights clearly and effectively.\n- **Collaboration and Sharing:** Knowledge of best practices for sharing workbooks, protecting sensitive information, and collaborating with team members in Excel.\n\n### 3. Getting Started as a Power User\n- **Self-Learning:** Utilize online courses, tutorials, and resources to learn advanced Excel techniques. Websites like Microsoft Learn, Coursera, and YouTube offer extensive training materials.\n- **Practice Regularly:** Regularly working on real-world projects or sample datasets helps reinforce skills and improve problem-solving abilities.\n- **Join Communities:** Engage with online forums, user groups, or local meetups to share knowledge, ask questions, and learn from other Excel enthusiasts.\n\n### 4. Tools and Features for Power Users\n- **Power Query:** A powerful tool for importing, transforming, and preparing data from various sources for analysis.\n- **Power Pivot:** Enables users to create data models and perform powerful calculations on large datasets without compromising performance.\n- **Dynamic Arrays:** New Excel functions (like FILTER, SORT, UNIQUE) that allow users to work more efficiently with arrays and ranges of data.\n- **What-If Analysis:** Techniques such as Scenario Manager and Goal Seek that help users make informed decisions based on different data scenarios.\n\n### 5. Tips for Excel Power Users\n- **Keyboard Shortcuts:** Familiarize yourself with Excel keyboard shortcuts to speed up your workflow and increase efficiency.\n- **Custom Templates:** Create custom templates for recurring reports or analyses to save time and ensure consistency across projects.\n- **Documentation:** Keep thorough documentation of your Excel models, formulas, and macros to help you and others understand the logic behind your work.\n\n### 6. Common Challenges for Power Users\n- **Performance Issues:** Handling large datasets can slow down Excel. Power Users should learn how to optimize formulas and manage data efficiently.\n- **Data Integrity:** Maintaining accuracy and consistency in data, especially when multiple users are involved, is crucial. Implement data validation techniques to minimize errors.\n- **Keeping Up with Updates:** Excel continually evolves with new features and functions. Staying updated with the latest releases can help Power Users leverage new capabilities.\n\",\r\n        \"conclusion\": \"Becoming an Excel Power User can significantly enhance your productivity and data analysis capabilities. By mastering advanced features and automating tasks, you can transform how you work with spreadsheets and drive better decision-making based on data insights. Continuous learning and practice are essential to maintain your skills and stay ahead in the ever-evolving landscape of data management.\"\r\n    }\r\n}', '2024-09-28 08:35:00'),
(102109, 102, 1, 'Excel Data Analysis Full', 'https://youtu.be/qrbf9DtR3_c?si=M83DgkCh5X8LWxJG', '{\r\n    \"title\": \"Excel Data Analysis Full\",\r\n    \"content\": {\r\n        \"introduction\": \"Excel is one of the most powerful tools available for data analysis. With its extensive range of functions, features, and tools, Excel allows users to organize, analyze, and visualize data efficiently. Whether you are dealing with small datasets or large amounts of data, Excel provides a robust platform to perform both basic and advanced data analysis tasks.\",\r\n        \"main_content\": \"### 1. Importance of Data Analysis in Excel\\nData analysis is crucial for making informed decisions, identifying trends, and drawing conclusions based on data. Excel allows users to quickly analyze data using formulas, pivot tables, and charts. It also supports a variety of functions that help in statistical analysis, logical operations, and data summarization.\\n\\n### 2. Data Cleaning and Preparation\\n- **Removing Duplicates:** Use the \"Remove Duplicates\" feature to clean up your data.\\n- **Text to Columns:** Split data into separate columns based on delimiters.\\n- **Find and Replace:** Quickly clean or modify data using the find-and-replace functionality.\\n- **Data Validation:** Ensure that your dataset is clean by using Data Validation rules to restrict the type of data that can be entered in a cell.\\n\\n### 3. Basic Analysis Tools\\n- **Formulas and Functions:** Use basic Excel functions like `SUM`, `AVERAGE`, `COUNT`, and `IF` to perform quick analysis on data. Combine these with logical functions such as `AND` and `OR` for more complex conditions.\\n- **Conditional Formatting:** Highlight data based on specific rules, helping you visually spot trends, patterns, and outliers.\\n\\n### 4. Intermediate Analysis Tools\\n- **Sorting and Filtering:** Organize data by sorting and filtering. Excel allows sorting in ascending or descending order and filtering based on criteria, helping you focus on specific data.\\n- **Pivot Tables:** A powerful tool for summarizing large datasets. You can drag and drop fields to create summaries, totals, averages, and other aggregations based on your data.\\n\\n### 5. Advanced Data Analysis Tools\\n- **What-If Analysis:** Excel What-If tools, such as Scenario Manager, Goal Seek, and Data Tables, allow users to evaluate various possibilities and make better decisions.\\n- **Power Query:** Use Power Query to automate data importing, transformation, and manipulation from multiple data sources. It simplifies the process of cleaning and reshaping data for analysis.\\n- **Power Pivot:** Enables users to work with large datasets, create relationships between tables, and build complex data models without performance issues.\\n\\n### 6. Statistical Analysis in Excel\\n- **Descriptive Statistics:** Functions like `MEAN`, `MEDIAN`, `MODE`, and `STDEV` can be used to calculate descriptive statistics.\\n- **Regression Analysis:** The Analysis ToolPak add-on allows for linear regression analysis to predict future trends and outcomes.\\n- **Correlation and Covariance:** Understand relationships between datasets using Excel’s correlation and covariance functions.\\n\\n### 7. Data Visualization Techniques\\n- **Charts and Graphs:** Excel offers a variety of chart types, including line charts, bar charts, and scatter plots, to visually represent data. Use the \"Recommended Charts\" option to quickly generate the best chart for your data.\\n- **Slicers and Timelines:** Slicers allow for interactive data filtering in pivot tables and pivot charts. Timelines help you filter data based on dates.\\n- **Dashboard Creation:** Combine multiple charts, pivot tables, and other data visualization tools to create dynamic dashboards that offer insights at a glance.\\n\\n### 8. Automation in Data Analysis\\n- **Macros:** Automate repetitive tasks by recording macros or writing custom scripts using VBA (Visual Basic for Applications).\\n- **Dynamic Arrays:** Excel’s new dynamic array functions like `FILTER`, `SORT`, and `UNIQUE` allow users to handle and analyze data in real-time.\\n- **Data Consolidation:** Use Excel’s Consolidate feature to combine data from multiple worksheets or workbooks into one.\\n\\n### 9. Integrating Excel with External Data Sources\\n- **Importing Data:** Excel can import data from external sources like databases, the web, and other file formats (e.g., CSV, XML). Power Query allows users to import, clean, and refresh data from multiple sources.\\n- **Using APIs:** Excel can connect to external APIs using Power Query, enabling dynamic data pulls from web services.\\n- **Connecting with Power BI:** Export Excel data into Power BI for advanced data analytics and visualization.\\n\",\r\n        \"conclusion\": \"Excel provides a wide array of tools and functionalities for data analysis, from basic calculations to complex data modeling and visualization. By mastering data cleaning, analysis tools, and advanced techniques like Power Query and Power Pivot, users can leverage Excel to make better data-driven decisions. Understanding how to utilize Excel’s built-in features, along with automation and external data integration, can significantly boost productivity and analytical capability.\"\r\n    }\r\n}', '2024-09-28 08:40:00'),
(102110, 102, 1, 'Excel For Finance And Accounting Beginner', 'https://youtu.be/v4i-2VffVZQ?si=36-dti3bSJchuzU9', ' {\r\n    \"title\": \"Excel For Finance And Accounting Beginner\",\r\n    \"content\": {\r\n        \"introduction\": \"Microsoft Excel is an essential tool for finance and accounting professionals. It helps manage, analyze, and report financial data with accuracy and ease. From budgeting and forecasting to financial modeling, Excel is widely used for a range of financial tasks. In this article, we will cover the basics of Excel for finance and accounting, tailored for beginners.\",\r\n        \"main_content\": \"### 1. Importance of Excel in Finance and Accounting\nExcel provides a flexible and powerful platform for managing financial data. It is often used for:\n- **Budgeting and Forecasting**: Projecting future financial performance based on historical data.\n- **Financial Statements**: Preparing income statements, balance sheets, and cash flow statements.\n- **Data Analysis**: Using Excel functions to analyze financial trends and performance.\n\n### 2. Essential Excel Functions for Finance\n- **SUM Function**: Adds up a range of numbers, useful for totaling expenses or revenue. Example:\n```excel\n=SUM(B2:B10)\n```\n- **AVERAGE Function**: Calculates the average of a series of numbers, useful for calculating average costs or revenues. Example:\n```excel\n=AVERAGE(C2:C12)\n```\n- **IF Function**: Performs conditional calculations, essential for making financial decisions based on criteria. Example:\n```excel\n=IF(A2 > 1000, \"Profit\", \"Loss\")\n```\n- **VLOOKUP**: Searches for a value in a table and returns corresponding data. Useful for looking up prices, rates, or costs in finance.\n```excel\n=VLOOKUP(D2, A2:B10, 2, FALSE)\n```\n\n### 3. Basic Financial Calculations\n- **Net Income**: Calculate net income using simple formulas by subtracting expenses from revenue.\n```excel\n=Revenue - Expenses\n```\n- **Loan Amortization**: Use the PMT function to calculate monthly payments for loans. Example:\n```excel\n=PMT(interest_rate/12, loan_term_in_months, loan_amount)\n```\n- **Break-Even Analysis**: Understand how to calculate break-even points by dividing fixed costs by contribution margin per unit.\n\n### 4. Organizing Financial Data\n- **Using Tables**: Convert data ranges into tables for easier sorting and filtering.\n- **Data Validation**: Use data validation to ensure accurate input of financial figures like dates, currencies, and percentages.\n- **Formatting Numbers**: Format cells to display currency, percentage, or accounting number formats for clarity.\n\n### 5. Charts and Graphs for Financial Data Visualization\nVisualizing financial data helps you make informed decisions. Common financial charts include:\n- **Line Charts**: Ideal for showing trends over time, such as revenue growth or expense reduction.\n- **Bar/Column Charts**: Useful for comparing different categories, like monthly sales or yearly profits.\n- **Pie Charts**: Show the proportion of different financial elements, such as expense categories.\n\n### 6. Creating Basic Financial Models\nFinancial models help forecast future performance and make business decisions. Start with simple models like:\n- **Budget Templates**: Create a budget by listing income and expenses, then track actuals vs. budgeted amounts.\n- **Cash Flow Models**: Track cash inflows and outflows to ensure a business’s liquidity.\n- **Investment Return Calculations**: Use functions like `NPV` (Net Present Value) and `IRR` (Internal Rate of Return) to evaluate investments.\n\n### 7. Common Mistakes to Avoid in Financial Analysis\n- **Incorrect Data Entry**: Double-check inputs to avoid miscalculations.\n- **Misuse of Formulas**: Ensure formulas reference the correct cells, especially in large datasets.\n- **Lack of Documentation**: Label your sheets and provide comments for better understanding of your analysis.\n- **Overcomplicating Models**: Start with simple models and gradually build complexity as needed.\",\r\n        \"conclusion\": \"Excel is a must-have tool for finance and accounting beginners. By mastering the basic functions, financial calculations, and data visualization techniques covered in this guide, you will be well on your way to becoming proficient in financial analysis. Excel’s versatility and ease of use make it a valuable asset for managing your financial tasks with precision.\"\r\n    }\r\n}\r\n ', '2024-09-28 08:45:00'),
(102111, 102, 2, 'Excel For Finance And Accounting Intermediate', 'https://www.youtube.com/watch?v=0G-q4P7t-m8', '{\r\n    \"title\": \"Excel For Finance And Accounting Intermediate\",\r\n    \"content\": {\r\n        \"introduction\": \"Building on the basics, intermediate-level Excel skills are crucial for finance and accounting professionals to perform more advanced financial analysis and reporting. This guide will delve into intermediate Excel functions, financial modeling techniques, and best practices to manage large datasets and automate tasks efficiently.\",\r\n        \"main_content\": \"### 1. Advanced Financial Functions\\nIntermediate finance tasks often require more complex calculations. Below are some essential functions:\\n\\n- **NPV (Net Present Value):** Used to calculate the present value of cash flows based on a discount rate. Example: `=NPV(discount_rate, cash_flows)`\\n- **IRR (Internal Rate of Return):** Determines the return rate at which the net present value of cash flows equals zero, helping evaluate investment profitability. Example: `=IRR(cash_flows)`\\n- **XIRR:** Similar to IRR but accounts for varying time periods between cash flows. Example: `=XIRR(cash_flows, dates)`\\n- **PMT:** Calculates the periodic payment for a loan based on interest rate, loan amount, and loan term. Example: `=PMT(rate, nper, pv)`\\n\\n### 2. Financial Modeling Techniques\\nFinancial modeling helps simulate real-world financial scenarios. Here are key intermediate concepts:\\n\\n- **Scenario Analysis:** Use scenario analysis to model different financial outcomes based on variable changes. Excel’s *What-If Analysis* tool allows you to test scenarios.\\n- **Goal Seek:** Goal Seek is used to find the input value required to achieve a desired output. For example, determining the sales needed to reach a profit target.\\n- **Data Tables:** One-variable or two-variable data tables are useful for analyzing how different values of one or two inputs affect the output in financial models.\\n- **Sensitivity Analysis:** This method evaluates how changes in inputs (like interest rates or costs) affect key outputs (such as profit or cash flow).\\n\\n### 3. Organizing and Managing Large Financial Datasets\\nHandling large volumes of data is common in finance. Efficient data management is key to maintaining accuracy and speed.\\n\\n- **Sorting and Filtering Data:** Use **Sort** and **Filter** to organize datasets by specific criteria, making it easier to focus on relevant data.\\n- **Using Named Ranges:** Define named ranges for cells or cell ranges to simplify formula creation and make spreadsheets more readable.\\n- **Data Validation:** Apply data validation rules to ensure correct input for data fields, such as dates, currencies, and numeric values.\\n- **Conditional Formatting:** Highlight specific cells or ranges based on set conditions. This is useful for quickly identifying outliers or important financial metrics.\\n\\n### 4. Automation with Excel Macros\\nAutomating repetitive tasks can save time and improve efficiency. Macros allow you to record actions and repeat them with a single click.\\n\\n- **Recording a Macro:** Record a series of steps that you can later replay. Useful for tasks like formatting financial reports or updating data regularly.\\n- **VBA (Visual Basic for Applications):** For more advanced automation, you can write custom macros using VBA to automate complex tasks, such as financial reporting or data consolidation.\\n\\n### 5. Pivot Tables for Financial Reporting\\nPivot tables are powerful tools for summarizing large datasets and extracting meaningful financial insights.\\n\\n- **Creating Pivot Tables:** Pivot tables allow you to quickly summarize data, such as breaking down revenue by region or expenses by category.\\n- **Pivot Table Calculations:** Use calculated fields within pivot tables to perform operations, like calculating gross margin or profitability ratios.\\n- **Slicers and Filters:** Slicers and filters help refine pivot table results by selecting specific data points, allowing for more interactive financial analysis.\",\r\n        \"conclusion\": \"Mastering these intermediate Excel functions and techniques will significantly enhance your ability to manage financial data and perform in-depth analysis. As you continue to build your Excel skills, you can automate repetitive tasks, create dynamic financial models, and generate insightful reports that drive business decisions.\"\r\n    }\r\n}', '2024-09-28 08:40:00'),
(102112, 102, 3, 'Excel For Finance And Accounting Advanced', 'https://youtu.be/zRAXnvTFA_w?si=GQpps41UQSdx50Cv', '{\r\n    \"title\": \"Excel For Finance And Accounting Advanced\",\r\n    \"content\": {\r\n        \"introduction\": \"Advanced Excel skills are essential for finance and accounting professionals working with complex financial models, large datasets, and detailed reports. This guide will explore sophisticated Excel functions, automation techniques, and powerful tools that streamline financial analysis and decision-making.\",\r\n        \"main_content\": \"### 1. Advanced Financial Functions and Formulas\\nIn advanced finance and accounting tasks, you will frequently use complex formulas and financial functions.\\n\\n- **OFFSET and INDIRECT:** These functions help in dynamic data referencing and range creation for financial models. Example: `=OFFSET(start_cell, row_offset, col_offset, height, width)`\\n- **ARRAY Formulas:** Use array formulas for multiple operations in a single formula. Example: `=SUM(IF(criteria_range=condition, sum_range))`\\n- **CAGR (Compound Annual Growth Rate):** Use the formula to calculate growth over time. Example: `=((End Value / Start Value)^(1/Number of Periods))-1`\\n- **DSUM and DCOUNT:** Database functions like DSUM and DCOUNT help summarize and analyze data in complex financial datasets.\\n- **Advanced Date Functions:** Functions like EDATE, EOMONTH, and WORKDAY are helpful in calculating financial periods and deadlines accurately.\\n\\n### 2. Advanced Financial Modeling Techniques\\nAt this level, financial modeling is more intricate and often includes dynamic assumptions, multiple variables, and sensitivity analysis.\\n\\n- **Multi-Sheet Financial Models:** Create models that link multiple sheets for detailed forecasting, budgeting, and valuation tasks. This allows compartmentalizing various aspects like revenue, expenses, and capital expenditure.\\n- **Monte Carlo Simulation:** Use data tables and VBA to perform Monte Carlo simulations that assess risk and predict outcomes based on probabilistic variables.\\n- **Dynamic Dashboards:** Create interactive financial dashboards that automatically update with real-time data, integrating charts, graphs, and key financial metrics.\\n- **Break-Even and Contribution Margin Analysis:** Use Excel for detailed break-even calculations and contribution margin analysis, critical for business decision-making.\\n\\n### 3. Advanced Data Management\\nHandling complex datasets in financial analysis is common, and advanced data management skills are critical for efficiency.\\n\\n- **Power Query:** Automate data import and cleaning with Power Query, making it easier to consolidate financial data from multiple sources, such as databases or web services.\\n- **Data Connections:** Establish live connections between Excel and external data sources, such as SQL databases, cloud-based services, or ERP systems, to ensure data is always up-to-date.\\n- **Advanced Filtering:** Use advanced filters for customized data extraction, or implement criteria-based data searches across large financial datasets.\\n- **Consolidating Financial Statements:** Consolidate multiple financial statements from various departments or branches using data aggregation techniques, making reporting seamless.\\n\\n### 4. VBA for Financial Automation\\nVBA (Visual Basic for Applications) can be used to create powerful automation scripts for repetitive financial tasks.\\n\\n- **Automating Report Generation:** Create VBA scripts to automate monthly or quarterly financial reports, saving hours of manual work by populating data and formatting it automatically.\\n- **Custom Financial Functions:** Write custom VBA functions tailored for specific financial tasks like depreciation schedules, bond pricing, or investment appraisal models.\\n- **Building User Forms:** Create user-friendly financial models by using VBA to build input forms that allow non-technical users to enter data without disrupting the model.\\n\\n### 5. Power Pivot and Data Models\\nExcel Power Pivot feature enables you to work with large datasets, create advanced data models, and perform complex calculations.\\n\\n- **Creating Data Models:** Use Power Pivot to build relational data models that combine data from multiple tables and sources, enabling deeper financial analysis.\\n- **DAX Formulas:** Data Analysis Expressions (DAX) formulas are used in Power Pivot to create complex calculations across tables, such as Year-over-Year (YoY) growth, Return on Investment (ROI), and Earnings Before Interest, Taxes, Depreciation, and Amortization (EBITDA) trends.\\n- **Power Pivot Reports:** Generate comprehensive financial reports with Power Pivot by aggregating large datasets and using PivotCharts and PivotTables for summary.\\n\\n### 6. Advanced Pivot Table Techniques\\nPivot Tables are indispensable for advanced financial analysis, offering powerful capabilities to summarize and manipulate large datasets.\\n\\n- **Calculated Fields and Items:** Go beyond basic calculations by creating custom formulas inside Pivot Tables for advanced financial metrics.\\n- **Grouping Data by Dates and Quarters:** Use grouping features to organize financial data by custom time periods, such as quarters or fiscal years, for detailed trend analysis.\\n- **Advanced Filtering with Slicers:** Use slicers and timelines for filtering financial data, allowing for more interactive and granular analysis.\",\r\n        \"conclusion\": \"Advanced Excel skills for finance and accounting professionals enable efficient handling of complex data, creation of dynamic financial models, and automation of repetitive tasks. Mastery of tools like Power Pivot, advanced formulas, and VBA can significantly enhance the accuracy and speed of financial analysis, making you a more effective decision-maker in the finance industry.\"\r\n    }\r\n}', '2024-09-28 08:55:00');
INSERT INTO `excel_course` (`id`, `course_id`, `level`, `topic_name`, `video_url`, `articles`, `created_at`) VALUES
(102113, 102, 3, 'Excel 2021 Advanced', 'https://youtu.be/y4bA2CNScg8?si=Cv4yjUmXGdgE28fw', '{\r\n    \"title\": \"Excel 2021 Advanced\",\r\n    \"content\": {\r\n        \"introduction\": \"Excel 2021 offers a wide range of advanced features that can significantly enhance data management, analysis, and automation. This guide covers key advanced topics such as pivot tables, advanced functions, and data visualization techniques to help you become a power user of Excel.\",\r\n        \"main_content\": \"### 1. Advanced Functions and Formulas\\nExcel has a variety of built-in advanced functions that can streamline complex calculations.\\n- **VLOOKUP & HLOOKUP:** Use `VLOOKUP` and `HLOOKUP` to search for values in large datasets vertically or horizontally.\\nExample: `=VLOOKUP(lookup_value, table_array, col_index_num, [range_lookup])`\\n- **INDEX & MATCH:** Combine these two functions to search for data more flexibly than VLOOKUP.\\nExample: `=INDEX(range, MATCH(lookup_value, lookup_range, 0))`\\n- **IF with AND/OR:** Combine conditional logic to perform more complex logical tests.\\nExample: `=IF(AND(A1>50, B1<100), \'Valid\', \'Invalid\')`\\n\\n### 2. Data Validation\\nData validation is an essential feature for controlling the type of data entered into a cell.\\n- **Creating Drop-down Lists:** Restrict the values a user can input using predefined lists.\\nExample: Select a cell, go to the Data tab, and choose Data Validation to create a list.\\n- **Custom Rules:** You can also create custom rules to enforce certain inputs (e.g., only allowing dates).\\n\\n### 3. Pivot Tables and Pivot Charts\\nPivot tables allow you to summarize and analyze large datasets efficiently.\\n- **Creating Pivot Tables:** Select your data range, go to the Insert tab, and click Pivot Table. You can drag and drop fields into rows, columns, values, and filters to customize the view.\\n- **Pivot Charts:** Create pivot charts directly from pivot tables to visualize summarized data.\\n\\n### 4. Conditional Formatting\\nConditional formatting enables you to highlight cells based on certain criteria.\\n- **Rule-based Formatting:** Apply formatting like color scales, data bars, and icon sets to quickly visualize trends.\\nExample: Highlight cells with values greater than 100 by selecting the cells, going to Conditional Formatting, and choosing the appropriate rule.\\n- **Custom Formatting:** You can create your own conditional formatting rules using formulas.\\n\\n### 5. Advanced Charting\\nExcel 2021 includes advanced charting options to help you visualize complex datasets.\\n- **Combo Charts:** Combine different types of charts (e.g., bar and line) to represent multiple data series.\\n- **Sparklines:** Insert small, lightweight charts inside cells to show trends in your data over time.\\n- **Histogram and Box & Whisker:** Use these specialized charts for statistical analysis and understanding data distribution.\\n\\n### 6. Power Query\\nPower Query is a powerful tool for importing, cleaning, and transforming data.\\n- **Importing Data:** Pull data from various sources like CSV, web, databases, and more.\\n- **Transforming Data:** Use Power Query Editor to clean and reshape data before loading it into Excel.\\n- **Data Refresh:** Set up automatic data refresh schedules for dynamic datasets.\\n\\n### 7. Macros and Automation\\nMacros can help automate repetitive tasks in Excel, saving time and reducing errors.\\n- **Recording a Macro:** You can record a series of actions and save them as a macro to replay later.\\nExample: Go to View > Macros > Record Macro, perform the desired tasks, and stop recording.\\n- **VBA (Visual Basic for Applications):** For more complex automation, you can write custom VBA code to extend Excel’s functionality.\\n\\n### 8. Data Analysis Tools\\nExcel 2021 includes built-in data analysis tools for performing statistical and financial analysis.\\n- **Solver:** Use Solver to find optimal solutions by adjusting different variables to achieve a target result.\\n- **Analysis ToolPak:** Access advanced statistical analysis features like regression, histograms, and correlation calculations.\\n\\n### 9. Collaboration Features\\nExcel 2021 has enhanced collaboration features for working with others in real-time.\\n- **Shared Workbooks:** Multiple users can work on the same workbook simultaneously using OneDrive or SharePoint.\\n- **Comments and Notes:** Use threaded comments for discussions and in-line notes to explain formulas or data points.\\n\\n### 10. Protecting and Securing Data\\nProtecting your data is crucial when sharing Excel files.\\n- **Password Protection:** You can set passwords to open or modify workbooks.\\nExample: Go to File > Info > Protect Workbook > Encrypt with Password.\\n- **Sheet and Cell Protection:** Lock specific cells or entire sheets to prevent unauthorized edits.\",\r\n        \"conclusion\": \"By mastering these advanced features in Excel 2021, you can significantly enhance your data management, analysis, and reporting capabilities. Whether you’re creating pivot tables, automating tasks with macros, or performing complex data analysis, Excel’s advanced tools can help streamline your workflow and improve efficiency.\"\r\n    }\r\n}', '2024-09-28 09:05:00'),
(102114, 102, 3, 'Excel 2021 Expert', 'https://youtu.be/nOS2jBSnIVE?si=mBvGsyIMrEdIPWBc', '{\r\n    \"title\": \"Excel 2021 Expert\",\r\n    \"content\": {\r\n        \"introduction\": \"Excel 2021 offers an extensive range of expert-level features that empower users to perform complex data analysis, automation, and reporting tasks. This guide will cover advanced techniques such as advanced VBA scripting, Power Pivot, data modeling, and advanced data visualization tools for users looking to achieve mastery in Excel.\",\r\n        \"main_content\": \"### 1. Advanced VBA Scripting\\nVBA (Visual Basic for Applications) allows you to automate almost any task in Excel by writing custom scripts.\\n- **Custom Macros with VBA:** Write custom VBA scripts to automate repetitive tasks beyond basic recording.\\nExample: Automate data formatting across multiple sheets.\\n- **User-Defined Functions (UDFs):** Create your own functions in VBA for specialized calculations not available in Excel’s built-in functions.\\nExample: `Function CalculateTax(Income) As Double`\\n- **Error Handling in VBA:** Implement error handling to prevent script crashes and provide debugging information.\\n\\n### 2. Power Pivot and Data Models\\nPower Pivot is an advanced Excel add-on that enables you to build data models and perform data analysis on large datasets.\\n- **Creating Data Models:** Integrate data from multiple tables, create relationships between them, and use complex DAX (Data Analysis Expressions) functions.\\n- **Working with DAX:** DAX is a formula language that helps you create complex calculations in Power Pivot.\\nExample: Use DAX for measures like `Total Sales = SUM(Sales[Amount])`\\n- **Large Dataset Analysis:** Use Power Pivot to handle millions of rows of data without performance issues.\\n\\n### 3. Power Query and Advanced Data Transformation\\nPower Query is an essential tool for importing, cleaning, and transforming large and complex datasets.\\n- **Advanced Querying Techniques:** Use complex transformations such as joins, merges, appending tables, and unpivoting data.\\n- **Query Editor Customization:** Customize your data queries using M language for more complex transformations.\\n- **Data Merge and Append:** Combine multiple data sources and transform them into a unified format using advanced merge and append functionalities.\\n\\n### 4. Advanced Data Visualization\\nExpert-level Excel users can create intricate visualizations that tell compelling stories using data.\\n- **Interactive Dashboards:** Combine charts, slicers, and pivot tables to create interactive dashboards.\\nExample: Create a sales dashboard with dynamic filters for real-time data updates.\\n- **Power Map and 3D Maps:** Visualize geographic data using 3D Maps to create impressive geographical heatmaps.\\n- **Advanced Chart Customization:** Create custom chart types like waterfall charts, box plots, and Gantt charts by manipulating Excel’s charting tools.\\n\\n### 5. Power BI Integration\\nExcel 2021 can integrate with Power BI to extend its data analysis and reporting capabilities.\\n- **Exporting to Power BI:** Use the \'Publish\' feature to export Excel data models directly into Power BI for advanced reporting and visualization.\\n- **Power BI Publisher:** Use Power BI Publisher for Excel to pin Excel tables and charts directly to Power BI dashboards.\\n- **Power BI vs Power Pivot:** Understand when to use Power BI for large-scale, cross-organizational data reporting vs. Power Pivot for Excel-based analysis.\\n\\n### 6. Advanced Solver and Optimization Techniques\\nSolver in Excel can be extended to perform complex optimization and simulation tasks.\\n- **Multi-Objective Optimization:** Use Solver to solve multiple objectives by applying advanced constraints and multiple changing variables.\\nExample: Optimize production schedules while minimizing costs and maximizing output.\\n- **Monte Carlo Simulations:** Use Monte Carlo methods to simulate the probability of different outcomes in Excel.\\n\\n### 7. External Data Connections and Automation\\nLink Excel to external data sources for real-time data analysis and automation.\\n- **SQL Integration:** Connect Excel to SQL databases for seamless data import, querying, and reporting.\\nExample: Use SQL queries within Excel to fetch large datasets dynamically.\\n- **API Connections:** Use APIs to pull data from online sources (e.g., financial markets, Google Analytics).\\n- **Automated Workflows with Power Automate:** Automate tasks across Microsoft apps using Power Automate and integrate with Excel for seamless process flows.\\n\\n### 8. Data Security and Compliance\\nManaging sensitive and critical data in Excel requires an understanding of security and compliance features.\\n- **Advanced Workbook Protection:** Protect your workbooks with password encryption, and apply custom user access levels for different sections of the workbook.\\n- **Auditing and Tracking Changes:** Enable auditing features to track changes, who made them, and when they occurred.\\n- **Data Masking and Anonymization:** Implement data masking techniques to protect sensitive information in shared reports.\\n\\n### 9. Machine Learning and Forecasting\\nExcel 2021’s machine learning and forecasting capabilities help you predict future trends based on historical data.\\n- **Data Forecasting:** Use the Forecast Sheet feature to create predictive models based on historical time series data.\\nExample: Predict sales trends for the upcoming months based on historical data.\\n- **AI-Powered Insights:** Leverage AI-powered insights to detect patterns, trends, and anomalies in large datasets.\\n- **Regression and Statistical Analysis:** Perform linear and nonlinear regression analysis using Excel’s statistical tools.\\n\\n### 10. Collaboration and Cloud Features\\nFor organizations working in teams, Excel 2021 offers enhanced collaboration and cloud capabilities.\\n- **Co-Authoring in Real-Time:** Collaborate with multiple users on the same workbook through OneDrive or SharePoint in real-time.\\n- **Version History and Control:** Track workbook changes and restore previous versions using version history.\\n- **Integration with Microsoft Teams:** Share Excel files directly within Teams, and work collaboratively while communicating on shared data.\\n\",\r\n        \"conclusion\": \"Excel 2021 at the expert level opens the door to a world of advanced data analysis, automation, and collaboration possibilities. By mastering advanced VBA scripting, Power Pivot, data models, and integration with tools like Power BI, you can take full advantage of Excel’s capabilities, streamlining complex workflows and making data-driven decisions more efficiently.\"\r\n    }\r\n}', '2024-09-28 09:10:00'),
(102115, 102, 2, 'Excel 2021 Power User', 'https://youtu.be/8u1PnceNoG4?si=Y6XxT-RCGXsG8kRH', '{\r\n    \"title\": \"Excel 2021 Power User\",\r\n    \"content\": {\r\n        \"introduction\": \"Becoming a power user in Excel 2021 means mastering advanced features that allow for faster data processing, enhanced reporting, and increased productivity. Power users are proficient in automation, advanced functions, and integrating Excel with other tools. This guide will help you explore key features that set power users apart from beginners and intermediate users.\",\r\n        \"main_content\": \"### 1. Advanced Functions and Formulas\\nPower users need a deep understanding of Excel’s built-in functions and how to combine them for complex calculations.\\n- **Array Formulas:** Use array formulas to perform multiple calculations on a set of values at once.\\nExample: `=SUM(A1:A10*B1:B10)` (Ctrl+Shift+Enter to enable).\\n- **Logical Functions:** Combine `IF`, `AND`, `OR`, and `IFS` for advanced decision-making scenarios.\\nExample: `=IF(AND(A1>50, B1<100), \"Pass\", \"Fail\")`\\n- **LOOKUP Functions:** Master `VLOOKUP`, `HLOOKUP`, `INDEX`, and `MATCH` for powerful data lookups across sheets.\\n\\n### 2. Power Query for Data Automation\\nPower Query helps power users automate data import, cleaning, and transformation processes.\\n- **Importing Data:** Power users import data from a wide variety of sources, such as databases, websites, and cloud services.\\n- **Data Cleaning and Transformation:** Use Power Query to clean up raw data, merge datasets, and transform data without manual intervention.\\n- **Custom Queries:** Write custom M-code queries for advanced data manipulations, such as filtering, pivoting, and merging multiple datasets.\\n\\n### 3. Power Pivot for Data Analysis\\nPower Pivot enhances Excel’s ability to handle large datasets and perform complex analysis.\\n- **Data Models and Relationships:** Power users create data models by linking multiple tables through relationships.\\nExample: Create relationships between sales data, customer data, and product data for integrated analysis.\\n- **Measures and Calculated Fields:** Use DAX (Data Analysis Expressions) to create measures and calculated fields that enable complex data analysis.\\nExample: `TotalRevenue = SUM(Sales[Revenue])`\\n- **Handling Large Datasets:** Power Pivot allows you to work with millions of rows of data without the performance issues that regular Excel would encounter.\\n\\n### 4. Advanced Charting and Data Visualization\\nExcel power users know how to create advanced visualizations to convey complex data effectively.\\n- **Custom Charts:** Go beyond basic charts (bar, line, pie) by creating waterfall, funnel, and radar charts.\\n- **Slicers and Timelines:** Use slicers and timelines to make charts interactive, allowing users to filter data visually.\\nExample: Add a timeline slicer to filter data by time period in a dashboard.\\n- **Conditional Formatting for Visualization:** Highlight important data trends using conditional formatting with custom rules.\\n\\n### 5. Pivot Tables and Advanced Analytics\\nPivot tables are essential tools for summarizing large amounts of data quickly.\\n- **Creating Complex Pivot Tables:** Power users can create multi-level pivot tables with nested fields for advanced reporting.\\n- **Calculated Fields and Items:** Use calculated fields within pivot tables to add custom calculations to your reports.\\n- **Pivot Charts:** Pair pivot tables with pivot charts for dynamic and visually appealing reports.\\n\\n### 6. Excel Macros and Automation\\nAutomation is key to saving time as a power user. Excel macros allow you to automate repetitive tasks.\\n- **Recording Macros:** Record macros to automate repetitive actions like formatting, sorting, and report generation.\\n- **Editing VBA Code:** Power users go beyond recording by editing the underlying VBA code to refine the macro’s functionality.\\nExample: Use VBA to loop through worksheets and apply the same formatting to each.\\n- **Button-Based Automation:** Create buttons in the worksheet to run macros at the click of a button for easy automation.\\n\\n### 7. External Data Connections and Collaboration\\nExcel power users work with real-time data by connecting to external sources and collaborating with others.\\n- **Data Connections:** Set up live connections to SQL databases, SharePoint lists, or external APIs for real-time data analysis.\\nExample: Use Power Query to pull data from an SQL server into Excel for analysis.\\n- **Collaboration Tools:** Use co-authoring and version history to collaborate with teammates on the same Excel workbook in real-time via OneDrive or SharePoint.\\n- **Protecting Workbooks:** Protect sensitive data by setting up password protection, user permissions, and tracking changes within the workbook.\\n\\n### 8. Excel Add-Ins and Extensions\\nExcel power users take advantage of add-ins to extend functionality and integrate Excel with other platforms.\\n- **Popular Add-Ins:** Use popular Excel add-ins like Solver for optimization problems, Analysis Toolpak for statistical analysis, and Power View for interactive data visualization.\\n- **Custom Add-Ins:** Develop custom add-ins for specialized tasks using VBA or external tools.\\nExample: Create a custom add-in that integrates Excel with third-party data sources such as financial services.\\n\\n### 9. Troubleshooting and Debugging\\nPower users understand how to troubleshoot complex issues and debug formulas or macros.\\n- **Formula Auditing:** Use the formula auditing toolbar to trace precedents and dependents in complex spreadsheets.\\n- **Error Handling in VBA:** Implement proper error handling in VBA macros to gracefully manage issues without halting execution.\\nExample: Use `On Error Resume Next` to continue running the macro after encountering errors.\\n- **Performance Optimization:** Learn techniques to optimize large workbooks, such as disabling automatic calculations or using efficient formulas.\\n\\n### 10. Power BI Integration\\nExcel power users leverage Power BI for enhanced reporting and dashboard creation.\\n- **Excel and Power BI Data Flows:** Publish Excel data to Power BI, and create visually rich, interactive dashboards.\\n- **Pinning Excel Reports in Power BI:** Pin Excel tables, ranges, and charts to Power BI dashboards for seamless integration and analysis.\\n- **Using Power BI to Augment Excel:** Combine the power of Excel’s data analysis with Power BI’s visualization capabilities for comprehensive reporting.\",\r\n        \"conclusion\": \"Excel 2021 Power Users possess deep knowledge of Excel’s advanced features, from automation and data visualization to integrating with external tools like Power BI. Mastering these skills helps you streamline workflows, automate repetitive tasks, and handle large datasets efficiently. By harnessing the power of Excel\'s advanced features, you can improve productivity and make more data-driven decisions in your business processes.\"\r\n    }\r\n}', '2024-09-28 09:15:00'),
(102116, 102, 2, 'Excel 2021 Pivot Tables', 'https://youtu.be/jbno1SwmIFE?si=2OdI-GnzFhWdHptw', '{\r\n    \"title\": \"Excel Pivot Table 2021\",\r\n    \"content\": {\r\n        \"introduction\": \"Pivot Tables in Excel 2021 are a powerful feature that allows users to quickly summarize, analyze, explore, and present large sets of data. Pivot Tables help to extract meaningful insights by allowing users to reorganize and summarize data in real-time, making them an essential tool for data analysis.\",\r\n        \"main_content\": \"### 1. What is a Pivot Table?\\nA Pivot Table is a dynamic tool that allows you to quickly summarize large datasets by organizing data into rows and columns, then aggregating the data (such as sums, averages, or counts). Pivot Tables are highly customizable and allow for quick exploration of different trends or summaries within your dataset.\\n\\n### 2. Creating a Pivot Table\\n- **Step 1:** Select your dataset by clicking anywhere within the data and navigating to the \'Insert\' tab. Click on the \'Pivot Table\' option.\\n- **Step 2:** Choose whether to create the Pivot Table in a new worksheet or in the current worksheet.\\n- **Step 3:** Once the Pivot Table is inserted, drag and drop fields into the \'Rows\', \'Columns\', \'Values\', and \'Filters\' areas to structure the Pivot Table.\\n\\n### 3. Customizing Pivot Tables\\n- **Sorting Data:** You can sort data within a Pivot Table by clicking on any value and selecting \'Sort Ascending\' or \'Sort Descending\'. This helps to view the data in an organized manner.\\n- **Filtering Data:** Add fields to the \'Filters\' area to filter data in the Pivot Table. You can filter by any category, such as dates or specific values, to narrow down your analysis.\\n- **Grouping Data:** Group data based on specific criteria, such as date ranges or numeric values. For example, you can group data by months, quarters, or years.\\n\\n### 4. Using Calculated Fields and Items\\nPivot Tables allow for advanced calculations by creating custom formulas.\\n- **Calculated Fields:** These are fields that use a formula to perform calculations based on other fields in your Pivot Table. For example, you can create a calculated field that multiplies sales quantities by unit price to calculate total revenue.\\n- **Calculated Items:** You can create calculated items in a Pivot Table that combine existing items in a field for advanced calculations. For example, you can create a calculated item that adds two sales categories together to create a new category.\\n\\n### 5. Pivot Charts\\nPivot Tables can be paired with Pivot Charts to provide dynamic, visual representations of your summarized data.\\n- **Creating a Pivot Chart:** Once your Pivot Table is ready, go to the \'Pivot Table Analyze\' tab, and click on \'Pivot Chart\'. You can choose from various chart types (e.g., bar, column, line) to visualize your data.\\n- **Interactivity:** Pivot Charts are interactive, allowing users to filter and drill down into data through the chart itself. Changing the data in the Pivot Table will automatically update the corresponding Pivot Chart.\\n\\n### 6. Slicers and Timelines\\nSlicers and Timelines allow for enhanced filtering and interaction with Pivot Tables.\\n- **Slicers:** Slicers are visual filters that allow users to filter Pivot Table data easily. You can insert slicers from the \'Pivot Table Analyze\' tab and use them to filter data based on specific criteria (such as product categories or regions).\\n- **Timelines:** Timelines are similar to slicers but are specifically used for filtering data based on dates. They provide an interactive way to explore data over time, such as filtering by years, quarters, months, or even days.\\n\\n### 7. Refreshing Pivot Tables\\nAs your source data changes, you need to refresh your Pivot Table to reflect those changes.\\n- **Manual Refresh:** Right-click anywhere in the Pivot Table and select \'Refresh\' to update the data. You can also go to the \'Pivot Table Analyze\' tab and click \'Refresh\'.\\n- **Automatic Refreshing:** Set up automatic refreshing of your Pivot Table by linking it to external data sources, such as databases or other spreadsheets, that update regularly.\\n\\n### 8. Pivot Table Data Source Management\\n- **Changing Data Source:** You can change the data source for your Pivot Table at any time by going to the \'Pivot Table Analyze\' tab and selecting \'Change Data Source\'. This is useful when you need to expand your dataset or switch to a different data range.\\n- **Dynamic Ranges:** Instead of using a fixed data range, you can create dynamic ranges using tables or named ranges, ensuring that your Pivot Table automatically includes new data as it\'s added.\\n\\n### 9. Advanced Pivot Table Features\\n- **Multiple Consolidation Ranges:** You can create Pivot Tables from multiple data ranges, which is useful when summarizing data from different sheets or sources.\\n- **Using Power Pivot with Pivot Tables:** Power Pivot allows you to work with large datasets and complex relationships between tables. With Power Pivot, you can create more sophisticated Pivot Tables by importing data from multiple tables and performing calculations using Data Analysis Expressions (DAX).\\n- **Field Settings:** Adjust field settings to customize how data is summarized in the Pivot Table, such as changing from sum to average, count, or displaying data as a percentage of a total.\\n\\n### 10. Troubleshooting Pivot Tables\\n- **Empty Cells or Errors:** If your Pivot Table shows empty cells or errors, you can use the \'Pivot Table Options\' dialog to change how empty cells or errors are displayed. For example, you can display zeros or custom text in place of empty cells.\\n- **Performance Issues:** If your Pivot Table is slow, especially with large datasets, try optimizing it by turning off automatic calculations, using fewer calculated fields, or reducing the number of rows and columns included in the Pivot Table.\",\r\n        \"conclusion\": \"Pivot Tables in Excel 2021 are invaluable tools for data analysis and reporting. By mastering Pivot Tables, you can efficiently summarize large datasets, create dynamic reports, and make data-driven decisions with ease. With advanced features such as calculated fields, slicers, and Power Pivot integration, Excel Pivot Tables are indispensable for any data professional.\"\r\n    }\r\n}', '2024-09-28 09:20:00'),
(102117, 102, 2, 'Excel 2021 Intro to Data Analysis', 'https://youtu.be/UeJWCqJysKI?si=4FvenvR6WNza62m2', '{\r\n    \"title\": \"Excel 2021 Intro to Data Analysis\",\r\n    \"content\": {\r\n        \"introduction\": \"Excel 2021 is a powerful tool for data analysis, allowing users to organize, visualize, and interpret data effectively. With various features such as functions, formulas, PivotTables, and data visualization tools, Excel empowers users to derive insights from their datasets efficiently.\",\r\n        \"main_content\": \"### 1. Understanding Data Analysis in Excel\\nData analysis involves inspecting, cleaning, transforming, and modeling data to discover useful information, inform conclusions, and support decision-making. Excel provides a range of functionalities that make data analysis straightforward, even for beginners.\\n\\n### 2. Getting Started with Data in Excel\\n- **Importing Data:** You can import data from various sources into Excel, such as CSV files, databases, and online data sources. Use the \'Data\' tab to access the \'Get Data\' feature for importing.\\n- **Data Types:** Familiarize yourself with different data types in Excel, such as text, numbers, dates, and currencies, to ensure proper analysis and calculations.\\n\\n### 3. Cleaning and Preparing Data\\n- **Removing Duplicates:** Use the \'Remove Duplicates\' feature under the \'Data\' tab to clean up your dataset and ensure each entry is unique.\\n- **Data Validation:** Set up data validation rules to control the type of data entered into cells, preventing errors in your analysis.\\n- **Text to Columns:** Split data from one column into multiple columns using the \'Text to Columns\' feature, which is useful for separating first and last names or addresses.\\n\\n### 4. Using Excel Functions for Analysis\\n- **Basic Functions:** Learn essential functions like SUM, AVERAGE, COUNT, and IF to perform basic calculations on your dataset. For example, `=SUM(A1:A10)` calculates the total of values from A1 to A10.\\n- **Logical Functions:** Use logical functions such as IF, AND, OR to perform conditional analysis. For example, `=IF(A1>10, \\\"Yes\\\", \\\"No\\\")` will return \\\"Yes\\\" if the condition is true, otherwise \\\"No\\\".\\n- **Lookup Functions:** Functions like VLOOKUP and HLOOKUP allow you to search for specific data within a table and return related values.\\n\\n### 5. Data Visualization Techniques\\n- **Charts and Graphs:** Visualize data using various chart types such as bar charts, line graphs, and pie charts. Go to the \'Insert\' tab to explore different chart options and select the best fit for your data.\\n- **Conditional Formatting:** Highlight important data points using conditional formatting, which changes cell formatting based on specified criteria, making trends and patterns easier to spot.\\n- **Sparklines:** Insert sparklines, which are small charts that fit within a single cell, to provide a visual representation of data trends at a glance.\\n\\n### 6. Using PivotTables for Data Analysis\\n- **Creating a PivotTable:** Transform raw data into summarized reports using PivotTables. Select your data range, navigate to the \'Insert\' tab, and click on \'PivotTable\' to create one.\\n- **Analyzing Data:** Drag and drop fields into Rows, Columns, Values, and Filters to analyze your data from different perspectives and gain insights quickly.\\n- **Refreshing Data:** Update your PivotTable as your source data changes by clicking the \'Refresh\' button to ensure your analysis reflects the latest data.\\n\\n### 7. Advanced Data Analysis Features\\n- **Power Query:** Use Power Query to perform advanced data transformation and cleansing operations before analysis. Power Query simplifies the process of connecting to data sources and reshaping data for analysis.\\n- **What-If Analysis:** Excel provides tools for scenario analysis, such as Goal Seek and Data Tables, allowing you to evaluate different scenarios and make informed decisions based on potential outcomes.\\n- **Solver Add-In:** The Solver add-in helps in optimizing a particular outcome by changing multiple variables to find the best solution based on specific constraints.\\n\\n### 8. Sharing and Collaborating on Data Analysis\\n- **Comments and Annotations:** Use comments to provide context or notes on specific data points, facilitating collaboration with others.\\n- **Sharing Workbooks:** Share your analysis with colleagues by saving the workbook to OneDrive or SharePoint, enabling real-time collaboration and editing.\\n- **Exporting Results:** Export your analysis results to different formats, such as PDF or CSV, for sharing and reporting purposes.\\n\\n### 9. Tips for Effective Data Analysis in Excel\\n- **Organize Data Properly:** Structure your data in a tabular format, with clear headers for each column, to facilitate easier analysis and reporting.\\n- **Use Named Ranges:** Named ranges make it easier to manage and reference specific cells or ranges in your formulas and functions, improving clarity in your analysis.\\n- **Document Your Work:** Maintain a record of your analysis steps and decisions, which is essential for replicating results or explaining your analysis to others.\\n\\n### 10. Continuous Learning\\n- **Online Resources:** Utilize online tutorials, courses, and forums to enhance your Excel skills and stay updated on new features.\\n- **Practice Regularly:** Regularly practice your data analysis skills by working on sample datasets or real-world data to build your confidence and proficiency.\",\r\n        \"conclusion\": \"Excel 2021 provides a robust platform for performing data analysis, making it accessible for users of all skill levels. By leveraging its powerful features, you can transform raw data into valuable insights that drive informed decision-making. Continuous practice and exploration of advanced techniques will further enhance your data analysis capabilities in Excel.\"\r\n    }\r\n}', '2024-09-28 09:25:00'),
(102118, 102, 2, 'Excel 2021 XLOOKUP', 'https://youtu.be/WvYP4--CCc8?si=gFfmkmT1kQQ6Njal', '{\r\n        \"title\": \"Excel 2021 XLOOKUP\",\r\n        \"content\": {\r\n            \"introduction\": \"XLOOKUP is a powerful and flexible lookup function introduced in Excel 2021. It replaces older functions like VLOOKUP, HLOOKUP, and LOOKUP, offering enhanced features and simplicity. XLOOKUP allows users to search for specific values in a dataset and return corresponding results, making data retrieval more intuitive and efficient.\",\r\n            \"main_content\": \"### 1. What is XLOOKUP?\\nXLOOKUP is a function that searches a range or an array, finds the right value, and returns the associated value from another range or array. It addresses many limitations of previous lookup functions, making it easier to perform lookups in Excel.\\n\\n### 2. Syntax of XLOOKUP\\nThe syntax for the XLOOKUP function is as follows:\\n```\\nXLOOKUP(lookup_value, lookup_array, return_array, [if_not_found], [match_mode], [search_mode])\\n```\\n- **lookup_value:** The value you want to look up.\\n- **lookup_array:** The array or range to search.\\n- **return_array:** The array or range from which to return the corresponding value.\\n- **if_not_found:** (optional) The value to return if no match is found.\\n- **match_mode:** (optional) The type of match:\\n  - 0 for exact match (default).\\n  - -1 for exact match or next smaller.\\n  - 1 for exact match or next larger.\\n- **search_mode:** (optional) The search mode:\\n  - 1 for searching from first to last (default).\\n  - -1 for searching from last to first.\\n\\n### 3. How to Use XLOOKUP\\n#### Example 1: Basic Usage\\nTo find a price for a specific product:\\n```excel\\n=XLOOKUP(\\\"Apples\\\", A2:A10, B2:B10)\\n```\\nThis searches for \\\"Apples\\\" in the range A2:A10 and returns the corresponding price from B2:B10.\\n\\n#### Example 2: Handling Missing Values\\nYou can specify what to return if the lookup value is not found:\\n```excel\\n=XLOOKUP(\\\"Oranges\\\", A2:A10, B2:B10, \\\"Not Found\\\")\\n```\\nIn this case, if \\\"Oranges\\\" is not found, it returns \\\"Not Found\\\".\\n\\n#### Example 3: Using Match Mode\\nTo find the closest lower price to a given value:\\n```excel\\n=XLOOKUP(5, B2:B10, A2:A10, , -1)\\n```\\nThis searches for the largest value in B2:B10 that is less than or equal to 5, returning the corresponding product name from A2:A10.\\n\\n### 4. Advantages of XLOOKUP\\n- **Dynamic Arrays:** XLOOKUP can return multiple results (dynamic arrays) without needing to create a separate array for each lookup.\\n- **Easier to Read:** The syntax is simpler and more intuitive than VLOOKUP and HLOOKUP, making formulas easier to understand.\\n- **No Need for Sorted Data:** Unlike VLOOKUP, XLOOKUP does not require the lookup array to be sorted, which simplifies the process.\\n- **Search in Both Directions:** XLOOKUP can search both vertically and horizontally, allowing for greater flexibility in data retrieval.\\n\\n### 5. Common Use Cases for XLOOKUP\\n- **Product Lookup:** Quickly find product details like prices and descriptions based on product names.\\n- **Employee Records:** Search for employee information such as contact details or positions based on employee IDs.\\n- **Sales Reports:** Retrieve sales data for specific products or regions to analyze performance.\\n\\n### 6. Troubleshooting XLOOKUP\\n- **#N/A Error:** This indicates that the lookup value was not found. Ensure the lookup array contains the value you are searching for or adjust the `if_not_found` parameter.\\n- **Data Types:** Make sure that the data types of the lookup value and the lookup array match to avoid errors.\\n- **Spelling Mistakes:** Check for spelling mistakes in the lookup value; XLOOKUP will not find values that do not match exactly.\\n\\n### 7. Conclusion\\nXLOOKUP in Excel 2021 is a game-changer for users looking to streamline their data retrieval processes. Its flexibility, ease of use, and ability to handle complex lookups make it an essential tool for anyone working with data in Excel. By mastering XLOOKUP, you can enhance your productivity and efficiency in data analysis tasks.\"\r\n        }\r\n    }', '2024-09-28 09:30:00'),
(102119, 102, 3, 'Excel Productivity Tips and Tricks', 'https://youtu.be/4qq2wPifUms?si=iRgersLJb4GcViKn', '{\r\n        \"title\": \"Excel Productivity Tips and Tricks\",\r\n        \"content\": {\r\n            \"introduction\": \"Microsoft Excel is a powerful tool for data analysis and management, but many users do not fully utilize its features. This article presents various productivity tips and tricks to help you work more efficiently in Excel, streamline your workflow, and enhance your data analysis capabilities.\",\r\n            \"main_content\": \"### 1. Keyboard Shortcuts\\nUtilizing keyboard shortcuts can significantly speed up your workflow in Excel. Here are some essential shortcuts:\\n- **Ctrl + C:** Copy selected cells\\n- **Ctrl + V:** Paste copied cells\\n- **Ctrl + Z:** Undo the last action\\n- **Ctrl + Y:** Redo the last action\\n- **Ctrl + Arrow Keys:** Navigate quickly through data\\n- **Alt + E + S + V:** Paste special values\\n\\n### 2. Use of Named Ranges\\nNaming your ranges can make formulas easier to read and manage. To create a named range, select the cells, type a name in the Name Box (next to the formula bar), and press Enter. You can then use this name in formulas, making them more intuitive.\\n\\n### 3. Data Validation\\nData validation helps ensure data integrity by restricting the type of data entered into a cell. To set up data validation:\\n1. Select the cell or range.\\n2. Go to the **Data** tab, click **Data Validation**, and choose the criteria (e.g., whole numbers, lists).\\nThis feature can prevent errors and maintain consistency in your datasets.\\n\\n### 4. Conditional Formatting\\nConditional formatting allows you to highlight cells based on specific conditions, making it easier to visualize important data. To apply conditional formatting:\\n1. Select the range of cells.\\n2. Go to the **Home** tab and click **Conditional Formatting**.\\n3. Choose a rule type and set the criteria (e.g., highlight cells greater than a certain value).\\n\\n### 5. Using Pivot Tables\\nPivot tables are a powerful feature for summarizing and analyzing large datasets. To create a pivot table:\\n1. Select your data range.\\n2. Go to the **Insert** tab and click on **PivotTable**.\\n3. Choose where to place the pivot table and click **OK**.\\nFrom there, you can drag and drop fields to summarize data quickly and create insightful reports.\\n\\n### 6. Flash Fill\\nFlash Fill is a time-saving feature that automatically fills in values based on patterns it detects. To use Flash Fill, start typing the desired output next to your data, and Excel will suggest the rest. You can activate it by pressing **Ctrl + E** after typing a few examples.\\n\\n### 7. Using Templates\\nIf you frequently create similar spreadsheets, consider using or creating templates. You can save a workbook as a template by selecting **File** > **Save As**, and choosing the **Excel Template** format. This will allow you to quickly create new workbooks based on your predefined layout and formulas.\\n\\n### 8. Organizing with Groups and Outlines\\nOrganizing your data can be made easier by grouping rows or columns. Select the rows or columns you want to group, right-click, and select **Group**. This feature is beneficial for managing large datasets and improving readability.\\n\\n### 9. Comments and Notes\\nAdding comments to cells can help provide context or notes for yourself or others reviewing your spreadsheet. Right-click on a cell and select **New Comment** to add additional information without cluttering your data.\\n\\n### 10. Automation with Macros\\nIf you find yourself repeating the same actions, consider recording a macro to automate the task. Go to the **View** tab, click **Macros**, and choose **Record Macro**. Perform the actions you want to automate, then stop recording. You can run the macro anytime to replicate the steps.\\n\\n### Conclusion\\nBy implementing these productivity tips and tricks in Excel, you can enhance your efficiency and streamline your workflow. Whether you\'re a beginner or an advanced user, mastering these techniques can help you unlock Excel\'s full potential, making your data analysis tasks more manageable and effective.\"\r\n        }\r\n    }', '2024-09-28 09:35:00'),
(102120, 102, 3, 'Google Sheets for Excel Users', 'https://youtu.be/tCVNiIvHqZM?si=ArH5_xPzVg6mN_DS', '{\r\n        \"title\": \"Google Sheets for Excel Users\",\r\n        \"content\": {\r\n            \"introduction\": \"Google Sheets is a powerful, cloud-based spreadsheet application that offers many similar functionalities to Microsoft Excel. This article aims to help Excel users transition to Google Sheets by highlighting key features, differences, and productivity tips to enhance your spreadsheet skills.\",\r\n            \"main_content\": \"### 1. Interface Overview\\nGoogle Sheets has a user-friendly interface that resembles Excel. The menu bar includes options for file management, editing, and formatting, while the toolbar provides quick access to frequently used features. Familiarize yourself with the layout to ease the transition.\\n\\n### 2. File Management\\nIn Google Sheets, your work is automatically saved in Google Drive, eliminating the need for manual saving. You can easily access your files from any device with internet connectivity. To create a new sheet, click on the **+ New** button in Google Drive and select **Google Sheets**.\\n\\n### 3. Data Entry and Formulas\\nData entry in Google Sheets is similar to Excel. Click on a cell to enter data, and use formulas by typing `=` followed by the function name. Common functions such as `SUM`, `AVERAGE`, and `VLOOKUP` work similarly in both applications. However, Google Sheets supports some unique functions like `GOOGLEFINANCE` for real-time stock data.\\n\\n### 4. Collaboration Features\\nOne of the key advantages of Google Sheets is its collaboration features. You can share your sheets with others by clicking the **Share** button in the top right corner. Collaborators can edit, comment, or view your sheet in real-time, making it ideal for team projects.\\n\\n### 5. Add-ons and Extensions\\nGoogle Sheets offers a wide variety of add-ons to enhance functionality. You can access these by clicking on **Extensions** in the menu and selecting **Add-ons**. Popular add-ons include tools for advanced analytics, data visualization, and project management.\\n\\n### 6. Data Validation and Conditional Formatting\\nSimilar to Excel, Google Sheets allows you to set data validation rules and apply conditional formatting. To access these features, navigate to the **Data** menu and select **Data validation** or **Conditional formatting**. These tools help maintain data integrity and improve visual analysis.\\n\\n### 7. Keyboard Shortcuts\\nFamiliarize yourself with Google Sheets keyboard shortcuts to enhance productivity. Some useful shortcuts include:\\n- **Ctrl + / (forward slash):** Opens the shortcut menu.\\n- **Ctrl + Shift + V:** Paste values only.\\n- **Ctrl + Alt + Shift + H:** Show/hide the formula bar.\\n- **Ctrl + K:** Insert a link.\\n\\n### 8. Importing and Exporting Files\\nYou can easily import Excel files into Google Sheets by selecting **File** > **Import** and uploading your Excel document. Conversely, to export your Google Sheet as an Excel file, go to **File** > **Download** > **Microsoft Excel (.xlsx)**.\\n\\n### 9. Charts and Graphs\\nCreating charts in Google Sheets is straightforward. Select your data, click on **Insert** > **Chart**, and choose the chart type that suits your data analysis. Google Sheets also offers various customization options for your charts.\\n\\n### 10. Google Apps Integration\\nGoogle Sheets integrates seamlessly with other Google apps like Google Docs, Google Forms, and Google Slides. You can easily link data between these applications for comprehensive project management and reporting.\\n\\n### Conclusion\\nTransitioning from Excel to Google Sheets can be smooth with an understanding of the similarities and differences. By leveraging Google Sheets collaborative features, unique functions, and cloud-based convenience, you can enhance your productivity and streamline your data management tasks.\"\r\n        }\r\n    }', '2024-09-28 09:40:00'),
(102121, 102, 1, 'Excel 2019 Beginner', 'https://youtu.be/6JnEYGxxd8w?si=gpjhs6IRHXFpqFKg', '{\r\n        \"title\": \"Excel 2019 Beginner\",\r\n        \"content\": {\r\n            \"introduction\": \"Excel 2019 is a powerful spreadsheet application that is part of the Microsoft Office Suite. It provides a range of features and tools that allow users to organize, analyze, and visualize data effectively. This article will guide beginners through the fundamental aspects of Excel 2019.\",\r\n            \"main_content\": \"### 1. Getting Started with Excel 2019\\nExcel 2019 features an intuitive interface with a ribbon at the top, which organizes tools and functions into tabs. To start using Excel, open the application, and you will see a blank workbook where you can begin entering data.\\n\\n### 2. Understanding Workbooks and Worksheets\\n- **Workbooks**: An Excel file is referred to as a workbook. Each workbook can contain multiple worksheets.\\n- **Worksheets**: These are individual sheets within a workbook, organized into rows and columns.\\n\\n### 3. Entering Data\\nTo enter data, click on a cell (the intersection of a row and column) and begin typing. You can input text, numbers, dates, or formulas. To edit a cell, double-click on it or press **F2**.\\n\\n### 4. Basic Formatting\\nExcel 2019 allows you to format your data to improve readability and presentation:\\n- **Font Styles**: Change font type, size, and color from the Home tab.\\n- **Cell Styles**: Apply cell styles to format entire cells, including borders and background colors.\\n- **Alignment**: Adjust text alignment within cells for better organization.\\n\\n### 5. Formulas and Functions\\nExcel 2019 enables you to perform calculations using formulas and functions. A formula starts with an equal sign `=`. For example, to add values in cells A1 and A2, type `=A1+A2`. Common functions include:\\n- **SUM**: Adds a range of cells.\\n- **AVERAGE**: Calculates the average of a range.\\n- **COUNT**: Counts the number of cells containing numbers.\\n\\n### 6. Creating Charts\\nCharts are a great way to visualize data. To create a chart:\\n1. Select the data you want to visualize.\\n2. Go to the Insert tab.\\n3. Choose the chart type you want, such as a column, line, or pie chart.\\n4. Customize the chart using the Chart Tools that appear in the ribbon.\\n\\n### 7. Saving Your Work\\nTo save your workbook, go to **File** > **Save As**. Choose a location on your computer or OneDrive and give your file a name. Excel files are saved with a `.xlsx` extension by default.\\n\\n### 8. Printing and Sharing\\nYou can print your worksheet by going to **File** > **Print**. Adjust settings such as orientation and scaling before printing. To share your workbook, use the **Share** button to send it via email or to share it with others via OneDrive.\\n\\n### 9. Basic Data Analysis Tools\\nExcel 2019 includes basic data analysis tools such as:\\n- **Sorting**: Organize data in ascending or descending order.\\n- **Filtering**: Display only the rows that meet specific criteria.\\n- **Conditional Formatting**: Apply formatting to cells that meet certain conditions, helping to highlight important data.\\n\\n### 10. Learning Resources\\nTo improve your Excel skills, utilize the built-in help feature, explore online tutorials, or consider taking a formal course. Microsoft also offers a variety of resources to help users learn Excel 2019 at their own pace.\\n\\n### Conclusion\\nExcel 2019 provides a user-friendly environment for beginners to learn data management and analysis. By mastering the basics, you can enhance your productivity and leverage Excel\'s powerful features for various personal and professional tasks.\"\r\n        }\r\n    }', '2024-09-28 09:45:00');
INSERT INTO `excel_course` (`id`, `course_id`, `level`, `topic_name`, `video_url`, `articles`, `created_at`) VALUES
(102122, 102, 3, 'Excel 2019 Advanced', 'https://youtu.be/bezV5U0dlbo?si=ivo1aHNp3hBUx-uG', '{\r\n        \"title\": \"Excel 2019 Advanced\",\r\n        \"content\": {\r\n            \"introduction\": \"Excel 2019 offers a wide array of advanced features that enhance data analysis, visualization, and automation capabilities. This article is designed for users who are familiar with the basics of Excel and are ready to dive deeper into its powerful tools and functions.\",\r\n            \"main_content\": \"### 1. Advanced Formulas and Functions\\nExcel 2019 provides several advanced functions that can help you manipulate and analyze data more effectively:\\n- **IF Statements**: Utilize conditional logic to perform different actions based on criteria. For example:\\n  ```excel\\n  =IF(A1 > 10, \\\"Above 10\\\", \\\"10 or below\\\")\\n  ```\\n- **VLOOKUP and HLOOKUP**: These functions are essential for searching data within tables. VLOOKUP searches vertically, while HLOOKUP searches horizontally.\\n- **INDEX and MATCH**: A powerful combination that offers more flexibility than VLOOKUP. Example:\\n  ```excel\\n  =INDEX(B1:B10, MATCH(\\\"Value\\\", A1:A10, 0))\\n  ```\\n\\n### 2. Data Validation\\nEnsure data integrity with data validation techniques:\\n- **Drop-down Lists**: Create drop-down lists for cells to restrict entries to predefined values.\\n- **Custom Validation Rules**: Set specific criteria that data must meet to be entered into a cell, enhancing data accuracy.\\n\\n### 3. Advanced Charting Techniques\\nVisualizing data can be enhanced with advanced charting techniques:\\n- **Combo Charts**: Combine different chart types (e.g., line and bar) to represent different data sets.\\n- **Dynamic Charts**: Use named ranges and the OFFSET function to create charts that update automatically as data changes.\\n\\n### 4. PivotTables and PivotCharts\\nPivotTables are an essential tool for data analysis:\\n- **Creating PivotTables**: Quickly summarize large datasets by dragging and dropping fields into rows and columns.\\n- **Using Slicers**: Enhance interactivity with slicers, which allow users to filter PivotTable data visually.\\n- **PivotCharts**: Create charts based on PivotTables for dynamic visual representations of summarized data.\\n\\n### 5. Advanced Conditional Formatting\\nConditional formatting helps highlight important trends and data points:\\n- **Data Bars**: Use data bars to provide a visual representation of values in cells.\\n- **Color Scales**: Apply color gradients to represent values in a range, making it easy to identify high and low values at a glance.\\n- **Icon Sets**: Use icons to indicate performance against benchmarks.\\n\\n### 6. Introduction to Macros and VBA\\nAutomate repetitive tasks with Macros:\\n- **Recording Macros**: Use the Macro Recorder to capture a series of actions and replay them.\\n- **Editing Macros with VBA**: Learn basic Visual Basic for Applications (VBA) to customize your macros and create more complex automation.\\n\\n### 7. Using Power Query\\nPower Query is a powerful tool for data transformation:\\n- **Importing Data**: Bring in data from various sources, including databases and web services.\\n- **Transforming Data**: Clean and reshape your data with functions like merging, splitting, and aggregating.\\n\\n### 8. Power Pivot for Data Modeling\\nPower Pivot allows you to build complex data models:\\n- **Creating Relationships**: Establish relationships between different tables in your data model for comprehensive analysis.\\n- **DAX Formulas**: Use Data Analysis Expressions (DAX) to create calculated columns and measures, enabling advanced calculations on your data.\\n\\n### 9. Advanced Data Analysis Tools\\nUtilize tools for complex data analysis:\\n- **What-If Analysis**: Use Goal Seek and Data Tables to explore different scenarios in your data.\\n- **Solver**: A powerful tool for optimization problems that can help you find the best solution for your data.\\n\\n### 10. Collaborating and Sharing Workbooks\\nExcel 2019 offers features for collaboration:\\n- **Co-authoring**: Work on the same workbook simultaneously with others using OneDrive or SharePoint.\\n- **Comments and Notes**: Add comments to cells to provide context or ask questions, making collaboration more efficient.\\n\\n### Conclusion\\nExcel 2019 advanced features allow users to perform complex data analysis, automate tasks, and collaborate effectively. By mastering these tools, you can significantly enhance your productivity and the value of your data insights.\"\r\n        }\r\n    }', '2024-09-28 09:50:00'),
(102123, 102, 3, 'Excel 2019 Expert', 'https://youtu.be/sm9rSD8IXgM?si=ej-aEwzf9kfRq7Dx', '{\r\n        \"title\": \"Excel 2019 Expert\",\r\n        \"content\": {\r\n            \"introduction\": \"Excel 2019 offers advanced features and capabilities that enable expert users to perform complex data analysis, automate tasks, and visualize data effectively. This article will cover expert-level techniques and tools that will enhance your Excel proficiency and productivity.\",\r\n            \"main_content\": \"### 1. Mastering Advanced Formulas\\nExpert users should be familiar with complex formulas and functions:\\n- **Array Formulas**: Use array formulas to perform multiple calculations on one or more items in an array. Example:\\n  ```excel\\n  {=SUM(IF(A1:A10>10, B1:B10, 0))}\\n  ```\\n- **Advanced Text Functions**: Functions like TEXTJOIN, CONCAT, and TEXTSPLIT for manipulating text strings.\\n\\n### 2. Power Query for Advanced Data Manipulation\\nUtilize Power Query to clean and transform data effectively:\\n- **Advanced Transformations**: Learn to perform grouping, pivoting, and unpivoting of data to prepare it for analysis.\\n- **M Language**: Understand the M language for more advanced data transformations and custom functions.\\n\\n### 3. Complex Data Models with Power Pivot\\nLeverage Power Pivot to create sophisticated data models:\\n- **Managing Relationships**: Create and manage complex relationships between multiple tables in your data model.\\n- **DAX Advanced Functions**: Utilize advanced DAX functions like CALCULATE, FILTER, and ALL for creating insightful measures and calculated columns.\\n\\n### 4. Advanced PivotTables and PivotCharts\\nExpert users can take full advantage of PivotTables:\\n- **Calculated Fields and Items**: Add calculated fields and items within PivotTables for dynamic calculations.\\n- **Slicers and Timelines**: Use slicers and timelines for better data filtering and visualization in PivotCharts.\\n\\n### 5. Automating Tasks with Macros and VBA\\nExcel experts often automate repetitive tasks:\\n- **Advanced VBA Programming**: Write complex VBA scripts to automate workflows, customize forms, and interact with other applications.\\n- **User-Defined Functions (UDFs)**: Create custom functions using VBA that can be used like native Excel functions.\\n\\n### 6. Advanced Data Analysis Techniques\\nEmploy sophisticated techniques for data analysis:\\n- **Scenario Manager**: Use the Scenario Manager to create and analyze different financial models or scenarios.\\n- **Data Tables for Sensitivity Analysis**: Create one-variable and two-variable data tables for in-depth analysis of how changes affect outcomes.\\n\\n### 7. Dashboards and Reporting\\nExpert users often create interactive dashboards:\\n- **Dynamic Charts and Reports**: Use dynamic charts linked to slicers and dropdowns for interactive reporting.\\n- **Using Sparklines**: Add sparklines to show trends within a single cell in reports.\\n\\n### 8. Collaborating and Sharing\\nCollaboration is crucial in expert-level Excel usage:\\n- **Using Comments and Notes Effectively**: Use comments for collaboration and documentation in shared workbooks.\\n- **Protecting Worksheets and Workbooks**: Learn to apply protection to specific ranges, worksheets, or entire workbooks to secure sensitive information.\\n\\n### 9. Advanced Visualizations\\nCreate compelling visual representations of data:\\n- **Custom Chart Types**: Explore custom chart types and techniques, such as waterfall charts and Gantt charts.\\n- **Using Map Charts**: Visualize geographic data using Map charts for location-based insights.\\n\\n### 10. Leveraging External Data Sources\\nConnect Excel to external data sources for enhanced analytics:\\n- **SQL Database Integration**: Import data directly from SQL databases using Microsoft Query.\\n- **Using Web Queries**: Extract data from websites using web queries to keep data up-to-date automatically.\\n\\n### Conclusion\\nExcel 2019 provides a wealth of features for expert users looking to maximize their productivity and analytical capabilities. Mastering these advanced techniques will not only enhance your Excel skills but also empower you to derive deeper insights from your data.\"\r\n        }\r\n    }', '2024-09-28 09:55:00'),
(102124, 102, 3, 'Excel 2019 Pivot Tables', 'https://youtu.be/Q1UzraY0yXg?si=DWqHjFUDz-JOzFLo', '{\r\n        \"title\": \"Excel 2019 Pivot Tables\",\r\n        \"content\": {\r\n            \"introduction\": \"Pivot Tables in Excel 2019 are powerful tools that allow users to summarize, analyze, explore, and present their data in a concise and tabular format. They enable quick data manipulation and provide insights into complex datasets without needing to write formulas.\",\r\n            \"main_content\": \"### 1. What is a Pivot Table?\\nA Pivot Table is a data processing tool that helps you summarize large amounts of data quickly. It allows you to rearrange and filter data to gain insights, making it an essential feature for data analysis.\\n\\n### 2. Creating a Pivot Table\\nTo create a Pivot Table in Excel 2019:\\n- **Select Your Data**: Click on any cell with your data set.\\n- **Choose Where to Place the Pivot Table**: You can place it in a new worksheet or in an existing worksheet.\\n- **Build Your Pivot Table**: Drag and drop fields into the Rows and Columns areas to organize your data.\"\r\n        }\r\n    }', '2024-10-02 21:45:54'),
(102125, 102, 2, 'Excel 2019 Power User', 'https://youtu.be/wUO6PhnzcBQ?si=OcEFPfbBZd00vtbv', '{\r\n        \"title\": \"Excel 2019 Power User\",\r\n        \"content\": {\r\n            \"introduction\": \"Excel 2019 offers powerful features that enable users to maximize their productivity and efficiency in data analysis and management. As a Power User, you will leverage advanced functionalities, automate tasks, and implement sophisticated data modeling techniques to gain insights and make informed decisions.\",\r\n            \"main_content\": \"### 1. Advanced Functions and Formulas\\nAs a Power User, you should be proficient in using advanced functions like:\\n- **INDEX & MATCH**: A more flexible alternative to VLOOKUP for looking up values.\\n- **IFERROR**: To manage errors in formulas and return a custom message or alternative result.\\n- **SUMIFS**: For summing data based on multiple criteria.\\n- **ARRAY FORMULAS**: Use curly braces `{}` to perform multiple calculations at once.\\n\\n### 2. Data Validation\\nImplementing data validation helps ensure data integrity:\\n- **Set Validation Rules**: Go to the Data tab, click on \'Data Validation\' to set rules for data entry.\\n- **Create Drop-Down Lists**: Restrict user input to specific values, enhancing data consistency.\\n\\n### 3. Advanced Charting Techniques\\nVisual representation of data is crucial for analysis:\\n- **Combination Charts**: Combine different chart types to convey complex data relationships.\\n- **Dynamic Charts**: Create charts that update automatically based on data changes.\\n- **Custom Chart Templates**: Save time by creating and reusing custom chart formats.\\n\\n### 4. Power Query\\nPower Query is an essential tool for data transformation and preparation:\\n- **Importing Data**: Pull data from various sources, including databases, web pages, and other Excel files.\\n- **Transforming Data**: Clean and reshape data using Power Query’s user-friendly interface.\\n- **Merging Queries**: Combine data from different sources seamlessly.\\n\\n### 5. Pivot Tables and Power Pivot\\nEnhance your data analysis with Pivot Tables and Power Pivot:\\n- **Creating Pivot Tables**: Quickly summarize large datasets to extract insights.\\n- **Using Power Pivot**: Manage and analyze data from multiple sources, and create relationships between tables for comprehensive analysis.\\n- **DAX (Data Analysis Expressions)**: Use DAX formulas for creating calculated columns and measures in Power Pivot.\\n\\n### 6. Macros and VBA\\nAutomate repetitive tasks and enhance functionality using Macros and VBA:\\n- **Recording Macros**: Record a series of actions to automate repetitive tasks easily.\\n- **Editing Macros in VBA**: Access the Visual Basic for Applications editor to customize your macros and create more complex automation.\\n- **Creating User-Defined Functions**: Write custom functions to perform specific calculations not available in Excel by default.\\n\\n### 7. Collaborating and Sharing\\nExcel 2019 offers tools for collaboration:\\n- **Sharing Workbooks**: Collaborate with colleagues in real-time using OneDrive or SharePoint.\\n- **Comments and Notes**: Use comments to provide feedback and facilitate discussions directly in the spreadsheet.\\n- **Track Changes**: Monitor modifications made by different users to ensure data integrity.\\n\\n### 8. Tips for Power Users\\n- **Keyboard Shortcuts**: Learn keyboard shortcuts to navigate and execute commands quickly.\\n- **Conditional Formatting**: Use conditional formatting to highlight trends and anomalies in your data visually.\\n- **Explore New Excel Features**: Stay updated with new features introduced in Excel 2019 for continual improvement.\\n\\n### Conclusion\\nBecoming an Excel 2019 Power User involves mastering advanced functionalities and employing them effectively to analyze and manage data. With these skills, you can significantly enhance your productivity, provide valuable insights, and make data-driven decisions that can positively impact your organization.\"\r\n        }\r\n    }', '2024-09-28 10:05:00'),
(102126, 102, 3, 'Excel 2019 Intro to Data Analysis', 'https://youtu.be/M6miEypg6Mo?si=TDxgHV5RTgCbUCV0', '{\r\n        \"title\": \"Excel 2019 Intro to Data Analysis\",\r\n        \"content\": {\r\n            \"introduction\": \"Data analysis is a crucial skill in today\'s data-driven world, and Excel 2019 provides powerful tools to help users analyze and interpret data effectively. This introductory guide covers the essential features and techniques for conducting data analysis using Excel.\",\r\n            \"main_content\": \"### 1. Understanding Data Analysis\\nData analysis involves inspecting, cleaning, and modeling data to discover useful information and support decision-making. Excel serves as a versatile tool for performing various types of analysis, including descriptive statistics, trend analysis, and forecasting.\\n\\n### 2. Preparing Your Data\\nBefore analysis, it is essential to prepare your data:\\n- **Data Cleaning**: Remove duplicates, correct errors, and handle missing values to ensure data accuracy.\\n- **Data Organization**: Structure your data in tables with clear headers and consistent formatting.\\n\\n### 3. Descriptive Statistics\\nDescriptive statistics summarize your data:\\n- **Using Functions**: Utilize Excel functions like AVERAGE, MEDIAN, MIN, MAX, and COUNT to obtain basic statistical metrics.\\n- **Data Analysis ToolPak**: Enable the Data Analysis ToolPak add-in to access more advanced statistical tools, including descriptive statistics and histograms.\\n\\n### 4. Visualizing Data\\nData visualization is key to understanding trends and patterns:\\n- **Charts and Graphs**: Create various charts (e.g., bar, line, pie) to visually represent your data and make comparisons easier.\\n- **Conditional Formatting**: Use conditional formatting to highlight significant data points and trends directly within your spreadsheet.\\n\\n### 5. Trend Analysis\\nAnalyze trends over time to make predictions:\\n- **Using Sparklines**: Insert sparklines to show trends in a compact form within cells.\\n- **Creating Line Charts**: Use line charts to display data points over time, making it easier to spot trends and fluctuations.\\n\\n### 6. What-If Analysis\\nWhat-if analysis helps you explore different scenarios:\\n- **Scenario Manager**: Use Scenario Manager to create and compare multiple scenarios based on different inputs.\\n- **Data Tables**: Create one-variable or two-variable data tables to analyze how changes in input variables affect output results.\\n- **Goal Seek**: Use Goal Seek to find the necessary input value to achieve a desired result in a formula.\\n\\n### 7. Forecasting\\nExcel provides tools for forecasting future trends:\\n- **Using the Forecast Sheet**: Generate a forecast for your data by creating a forecast sheet that includes historical data and future predictions.\\n- **Exponential Smoothing**: Apply exponential smoothing methods for a more advanced forecasting approach, useful for time series data.\\n\\n### 8. Pivot Tables for Data Analysis\\nPivot Tables are a powerful feature for summarizing and analyzing data:\\n- **Creating Pivot Tables**: Learn to create Pivot Tables to quickly analyze large datasets by summarizing and grouping data.\\n- **Filtering and Sorting**: Use filters and sorting options within Pivot Tables to focus on specific data subsets and insights.\\n\\n### Conclusion\\nExcel 2019 offers a robust suite of tools for data analysis, enabling users to make informed decisions based on their data. By mastering these introductory techniques, you can enhance your analytical skills and apply them to various professional scenarios, from finance to marketing and beyond.\"\r\n        }\r\n    }', '2024-09-28 10:10:00'),
(102127, 102, 2, 'Excel 2019 VBA Intermediate', 'https://youtu.be/WZnRDPFz75U?si=zQ9J1CHHlh_faVDR', '{\r\n        \"title\": \"Excel 2019 VBA Intermediate\",\r\n        \"content\": {\r\n            \"introduction\": \"Visual Basic for Applications (VBA) is a powerful programming language integrated into Excel that allows users to automate repetitive tasks, create custom functions, and develop sophisticated data processing solutions. This intermediate guide explores more advanced VBA concepts and techniques to enhance your Excel automation skills.\",\r\n            \"main_content\": \"### 1. Understanding VBA Basics\\nVBA is an event-driven programming language that allows you to create macros to automate tasks in Excel. Understanding the fundamental building blocks of VBA is crucial for intermediate programming.\\n\\n### 2. Working with Variables and Data Types\\n- **Declaring Variables**: Use `Dim` statements to declare variables and specify their data types (e.g., `Dim total As Double`).\\n- **Scope of Variables**: Learn about different variable scopes, such as local, module-level, and global variables, to manage data effectively.\\n\\n### 3. Control Structures\\nControl structures allow you to direct the flow of your program:\\n- **Conditional Statements**: Implement `If...Then...Else` and `Select Case` statements to execute code based on certain conditions.\\n- **Loops**: Use `For...Next`, `Do...Loop`, and `While...Wend` loops to repeat actions until a specific condition is met.\\n\\n### 4. Working with Arrays\\nArrays are essential for handling multiple values:\\n- **Declaring Arrays**: Create static and dynamic arrays to store collections of data (e.g., `Dim scores(1 To 10) As Integer`).\\n- **Looping Through Arrays**: Use loops to iterate through array elements and perform calculations or operations.\\n\\n### 5. User Forms and Controls\\nCreating user forms enhances user interaction:\\n- **Designing User Forms**: Learn to create user forms for data entry, utilizing controls like text boxes, combo boxes, and command buttons.\\n- **Handling Events**: Understand how to write event procedures for controls to capture user actions and respond accordingly.\\n\\n### 6. Working with Excel Objects\\nUnderstanding Excel’s object model is crucial for effective automation:\\n- **Workbook and Worksheet Objects**: Learn how to reference and manipulate workbooks and worksheets using VBA (e.g., `Worksheets(\"Sheet1\").Range(\"A1\").Value = \"Hello\").\\n- **Range Objects**: Master the use of Range objects to read, write, and format data in cells.\\n\\n### 7. Error Handling\\nEffective error handling ensures robust code:\\n- **Using `On Error` Statements**: Implement error handling using `On Error Resume Next` and `On Error GoTo` to manage runtime errors gracefully.\\n- **Error Trapping**: Learn to capture errors and provide meaningful feedback to users.\\n\\n### 8. Advanced Procedures and Functions\\nEnhance your automation capabilities with custom procedures:\\n- **Creating Functions**: Develop user-defined functions (UDFs) to perform calculations or operations that are not available in Excel’s built-in functions.\\n- **Calling Procedures**: Learn how to call procedures from other procedures, creating modular and reusable code.\\n\\n### Conclusion\\nMastering intermediate VBA techniques will significantly enhance your ability to automate tasks in Excel 2019. By understanding the core concepts and tools available, you can create powerful macros and applications that save time and increase productivity. With further practice and exploration, you can develop advanced skills that will allow you to tackle more complex automation projects.\"\r\n        }\r\n    }', '2024-09-28 10:15:00'),
(102128, 102, 3, 'Excel 2019 VBA Advanced', 'https://youtu.be/No3oudCEdls?si=zg_RBd98kgklyNF_', '{\r\n        \"title\": \"Excel 2019 VBA Advanced\",\r\n        \"content\": {\r\n            \"introduction\": \"Visual Basic for Applications (VBA) in Excel 2019 allows users to automate complex tasks and develop advanced solutions tailored to their needs. This advanced guide dives deep into sophisticated programming techniques, performance optimization, and integration with other applications.\",\r\n            \"main_content\": \"### 1. Advanced Data Structures\\n- **Collections**: Learn to utilize collection objects for managing groups of related items dynamically.\\n- **Dictionaries**: Use dictionaries for key-value pair storage, allowing for efficient data retrieval and manipulation.\\n\\n### 2. Class Modules\\n- **Creating Class Modules**: Understand how to create custom classes to encapsulate related properties and methods, enhancing code organization and reusability.\\n- **Object-Oriented Programming**: Dive into object-oriented programming concepts, including encapsulation, inheritance, and polymorphism in VBA.\\n\\n### 3. Error Handling Techniques\\n- **Advanced Error Handling**: Implement error handling techniques such as `Err` object properties to manage different error types effectively.\\n- **Logging Errors**: Create an error logging mechanism to record and troubleshoot errors in your VBA projects.\\n\\n### 4. Advanced Procedures and Functions\\n- **Recursive Functions**: Learn to write recursive functions that call themselves to solve problems more efficiently.\\n- **Parameter Passing**: Explore different ways to pass parameters to procedures and functions, including ByRef and ByVal.\\n\\n### 5. Working with External Data\\n- **Connecting to Databases**: Use ADO (ActiveX Data Objects) to connect to external databases, execute SQL queries, and retrieve data.\\n- **Importing and Exporting Data**: Automate the import and export of data from various sources like CSV files, text files, and other Excel workbooks.\\n\\n### 6. Automation with Other Applications\\n- **Integrating with Outlook**: Learn to automate email tasks in Outlook, including sending emails with attachments from Excel.\\n- **Controlling PowerPoint**: Discover how to manipulate PowerPoint presentations directly from Excel using VBA.\\n\\n### 7. Performance Optimization\\n- **Code Optimization**: Learn techniques to optimize your VBA code for faster execution, including avoiding unnecessary calculations and using efficient data structures.\\n- **Memory Management**: Understand how to manage memory usage in VBA to prevent memory leaks and enhance performance.\\n\\n### 8. User-Defined Events\\n- **Creating Custom Events**: Explore how to create and handle custom events in VBA to enhance interactivity in your applications.\\n- **Event-Driven Programming**: Understand the principles of event-driven programming and how to apply them effectively in Excel VBA.\\n\\n### Conclusion\\nMastering advanced VBA techniques will empower you to create highly efficient, scalable, and user-friendly applications in Excel 2019. By leveraging advanced programming concepts, you can significantly enhance productivity and streamline processes, ultimately leading to more robust data management solutions.\"\r\n        }\r\n    }', '2024-09-28 10:20:00'),
(102129, 102, 3, 'Excel 2019 VBA Expert', 'https://youtu.be/ezHWpbeq-gc?si=02fUApRu-3nLh_3q', '{\r\n        \"title\": \"Excel 2019 VBA Expert\",\r\n        \"content\": {\r\n            \"introduction\": \"Excel 2019 VBA Expert level provides advanced users with the skills needed to develop sophisticated applications, customize Excel functionalities, and integrate with other Microsoft Office applications. This guide covers expert techniques for building robust VBA solutions.\",\r\n            \"main_content\": \"### 1. Advanced UserForms\\n- **Creating Complex UserForms**: Design and implement advanced UserForms with controls like combo boxes, list boxes, and multi-page forms to enhance user interaction.\\n- **Dynamic Control Creation**: Learn how to create controls dynamically at runtime based on user input or data conditions.\\n\\n### 2. Advanced API Calls\\n- **Calling Windows APIs**: Use Windows API functions to extend Excel capabilities, such as accessing system functions and enhancing performance.\\n- **Error Handling in API Calls**: Implement robust error handling strategies when interacting with external APIs to ensure application stability.\\n\\n### 3. Comprehensive Automation\\n- **Automating Multiple Applications**: Master techniques for automating tasks across Excel, Word, Outlook, and Access to create seamless workflows.\\n- **Building an Integrated Application**: Create an integrated solution that leverages multiple Office applications to solve complex business problems.\\n\\n### 4. Advanced Data Analysis\\n- **Custom Functions for Data Analysis**: Develop user-defined functions (UDFs) for specialized calculations that go beyond Excel built-in functions.\\n- **Integration with Power Query**: Learn how to use Power Query to automate data extraction, transformation, and loading processes, enhancing data analysis capabilities.\\n\\n### 5. Advanced Error Management\\n- **Creating Custom Error Messages**: Design custom error handling strategies and user-friendly error messages to guide users through common issues.\\n- **Debugging Techniques**: Utilize advanced debugging techniques, including breakpoints, watches, and immediate window commands, to troubleshoot complex VBA code.\\n\\n### 6. Performance Enhancement\\n- **Optimizing Workbook Performance**: Learn methods to optimize Excel workbooks for speed and efficiency, including minimizing the use of volatile functions and reducing screen updating.\\n- **Using Arrays for Data Processing**: Implement array processing to handle large datasets more efficiently compared to traditional loops.\\n\\n### 7. Security and Protection\\n- **Securing VBA Code**: Understand how to protect your VBA code from unauthorized access by using password protection and obfuscation techniques.\\n- **Data Validation and Protection**: Implement data validation techniques to maintain data integrity and protect sensitive information within your Excel applications.\\n\\n### 8. Deployment and Distribution\\n- **Creating Add-ins**: Learn how to package your VBA applications as Excel add-ins for easy distribution and use by other users.\\n- **Documentation and Support**: Develop comprehensive documentation and user manuals to support your applications, ensuring users can effectively leverage your solutions.\\n\\n### Conclusion\\nAchieving expert-level proficiency in Excel 2019 VBA empowers you to create highly customized, efficient, and powerful applications. By mastering the advanced techniques discussed in this guide, you can significantly enhance your productivity and solve complex business challenges effectively.\"\r\n        }\r\n    }', '2024-09-28 10:25:00');

-- --------------------------------------------------------

--
-- Table structure for table `excel_qna`
--

CREATE TABLE `excel_qna` (
  `id` int(11) NOT NULL,
  `questions` varchar(255) NOT NULL,
  `option_1` varchar(255) NOT NULL,
  `option_2` varchar(255) NOT NULL,
  `option_3` varchar(255) NOT NULL,
  `option_4` varchar(255) NOT NULL,
  `correct_option` varchar(255) NOT NULL,
  `level` int(11) NOT NULL,
  `title` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `excel_qna`
--

INSERT INTO `excel_qna` (`id`, `questions`, `option_1`, `option_2`, `option_3`, `option_4`, `correct_option`, `level`, `title`) VALUES
(1, 'Which function is used to add values in Excel?', 'SUM()', 'ADD()', 'COMBINE()', 'COUNT()', 'SUM()', 1, 'Excel Introduction'),
(2, 'How do you refer to cell A1 in another worksheet in the same workbook?', 'Worksheet!A1', 'Sheet1!A1', 'AnotherSheetA1', 'Workbook!A1', 'Sheet1!A1', 1, 'Excel Introduction'),
(3, 'What is the shortcut for creating a new worksheet?', 'Ctrl + N', 'Ctrl + M', 'Ctrl + Shift + N', 'Ctrl + Shift + M', 'Ctrl + Shift + N', 1, 'Excel Introduction'),
(4, 'How do you create an absolute cell reference?', '$A$1', 'A$1', 'A1', '$A1', '$A$1', 1, 'Excel Introduction'),
(5, 'What does the CONCAT function do?', 'Combines text from multiple cells', 'Counts values in cells', 'Multiplies two numbers', 'Finds the average of numbers', 'Combines text from multiple cells', 1, 'Excel Introduction'),
(6, 'Which Excel tool is most useful for summarizing large datasets?', 'Pivot Tables', 'Charts', 'Formulas', 'Data Bars', 'Pivot Tables', 1, 'Excel Intro to Data Analysis'),
(7, 'What is the purpose of Excel’s VLOOKUP function?', 'To search for a value in a table and return a result', 'To count the number of unique values', 'To summarize data', 'To visualize trends', 'To search for a value in a table and return a result', 1, 'Excel Intro to Data Analysis'),
(8, 'Which function is used to find the largest value in a range?', 'MAX()', 'MIN()', 'AVERAGE()', 'SUM()', 'MAX()', 1, 'Excel Intro to Data Analysis'),
(9, 'How does Excel’s conditional formatting feature help in data analysis?', 'By changing cell appearance based on criteria', 'By sorting data', 'By performing calculations', 'By inserting charts', 'By changing cell appearance based on criteria', 1, 'Excel Intro to Data Analysis'),
(10, 'Which function in Excel helps in counting non-empty cells?', 'COUNTA()', 'COUNT()', 'COUNTIF()', 'COUNTBLANK()', 'COUNTA()', 1, 'Excel Intro to Data Analysis'),
(11, 'What is the purpose of a Pivot Table?', 'To summarize data', 'To create charts', 'To write formulas', 'To filter data', 'To summarize data', 1, 'Excel Pivot Tables'),
(12, 'How can you refresh a Pivot Table?', 'Right-click and select Refresh', 'Click Insert > Refresh', 'Click View > Refresh', 'Click Home > Refresh', 'Right-click and select Refresh', 1, 'Excel Pivot Tables'),
(13, 'What happens if you change the source data of a Pivot Table?', 'The Pivot Table can be refreshed to update', 'It will remain unchanged', 'It gets deleted', 'It will generate an error', 'The Pivot Table can be refreshed to update', 1, 'Excel Pivot Tables'),
(14, 'Can you create a Pivot Table from multiple sheets?', 'Yes, using Consolidate feature', 'No, only from one sheet', 'Yes, using Merge Cells', 'Yes, using Concatenate', 'Yes, using Consolidate feature', 1, 'Excel Pivot Tables'),
(15, 'What is the difference between a Pivot Chart and a normal chart?', 'A Pivot Chart is linked to a Pivot Table', 'Pivot Chart has more design features', 'Normal charts summarize data better', 'Pivot Chart is less dynamic', 'A Pivot Chart is linked to a Pivot Table', 1, 'Excel Pivot Tables'),
(16, 'What is Excel Capilot?', 'A new AI feature in Excel', 'A function for summarizing data', 'An Excel add-in for financial modeling', 'A template for report generation', 'A new AI feature in Excel', 1, 'Excel Capilot'),
(17, 'Which of the following tasks can Excel Capilot help with?', 'Data summarization', 'Generating random numbers', 'Calculating averages', 'Creating email templates', 'Data summarization', 1, 'Excel Capilot'),
(18, 'How does Excel Capilot use natural language processing?', 'To interpret user instructions', 'To automate financial calculations', 'To create pie charts', 'To analyze large datasets', 'To interpret user instructions', 1, 'Excel Capilot'),
(19, 'How do you access Excel Capilot?', 'Through the Insert menu', 'By typing commands in cells', 'By clicking on the \"Capilot\" button in the toolbar', 'By using the Data tab', 'By clicking on the \"Capilot\" button in the toolbar', 1, 'Excel Capilot'),
(20, 'Can Excel Capilot be used for financial forecasting?', 'Yes', 'No', 'Only for data analysis', 'Only for creating charts', 'Yes', 1, 'Excel Capilot'),
(21, 'What is the purpose of the IFERROR function?', 'To handle errors in formulas', 'To find errors in worksheets', 'To create charts', 'To summarize data', 'To handle errors in formulas', 1, 'Excel Power User'),
(22, 'How do you create a named range in Excel?', 'Select cells and use the name box', 'Right-click cells and select Name', 'Click Formulas > Create Named Range', 'Click Data > Create Named Range', 'Select cells and use the name box', 1, 'Excel Power User'),
(23, 'What does the INDEX function do?', 'Returns the value of a cell in a table based on row and column numbers', 'Indexes a list of cells', 'Creates an alphabetical index', 'Summarizes data', 'Returns the value of a cell in a table based on row and column numbers', 1, 'Excel Power User'),
(24, 'What is a macro in Excel?', 'A set of instructions that automate tasks', 'A large dataset', 'A pivot table summary', 'An Excel chart type', 'A set of instructions that automate tasks', 1, 'Excel Power User'),
(25, 'What is the purpose of the NPV function in Excel?', 'To calculate net present value of an investment', 'To calculate interest', 'To sum a range', 'To calculate the return on investment', 'To calculate net present value of an investment', 1, 'Excel Power User'),
(26, 'Which tool can be used for regression analysis in Excel?', 'Data Analysis Toolpak', 'VLOOKUP', 'Macros', 'Solver', 'Data Analysis Toolpak', 1, 'Excel Data Analysis Full'),
(27, 'Which function helps in finding the correlation between two datasets?', 'CORREL()', 'SUM()', 'AVERAGE()', 'COUNTIF()', 'CORREL()', 1, 'Excel Data Analysis Full'),
(28, 'What is the purpose of the Solver tool in Excel?', 'To find the optimal solution to a problem', 'To count the number of unique values', 'To sort data', 'To calculate interest', 'To find the optimal solution to a problem', 1, 'Excel Data Analysis Full'),
(29, 'Which feature helps in summarizing data with multiple variables?', 'Pivot Tables', 'Charts', 'Conditional Formatting', 'Macros', 'Pivot Tables', 1, 'Excel Data Analysis Full'),
(30, 'Which type of chart is best for showing trends over time?', 'Line Chart', 'Pie Chart', 'Bar Chart', 'Scatter Plot', 'Line Chart', 1, 'Excel Data Analysis Full'),
(31, 'Which function is commonly used for calculating interest in Excel?', 'PMT()', 'VLOOKUP()', 'SUM()', 'COUNT()', 'PMT()', 1, 'Excel For Finance And Accounting Beginner'),
(32, 'How do you calculate depreciation using Excel?', 'Using the SLN() function', 'Using the PMT() function', 'Using the VLOOKUP() function', 'Using the COUNT() function', 'Using the SLN() function', 1, 'Excel For Finance And Accounting Beginner'),
(33, 'Which formula is used to calculate the future value of an investment?', 'FV()', 'PV()', 'IRR()', 'COUNT()', 'FV()', 1, 'Excel For Finance And Accounting Beginner'),
(34, 'What is the purpose of the NPV function in finance?', 'To calculate net present value', 'To calculate depreciation', 'To calculate simple interest', 'To calculate compound interest', 'To calculate net present value', 1, 'Excel For Finance And Accounting Beginner'),
(35, 'How is the IRR function used in financial analysis?', 'To calculate internal rate of return', 'To calculate future value', 'To calculate depreciation', 'To find maximum value', 'To calculate internal rate of return', 1, 'Excel For Finance And Accounting Beginner'),
(36, 'How do you freeze the first row in Excel 2019?', 'View > Freeze Panes > Freeze Top Row', 'Data > Freeze > Freeze Top Row', 'Insert > Freeze > Freeze Top Row', 'Format > Freeze Panes', 'View > Freeze Panes > Freeze Top Row', 1, 'Excel 2019 Beginner'),
(37, 'Which of the following is a valid cell reference?', 'A1', '1A', 'A@1', 'AA-1', 'A1', 1, 'Excel 2019 Beginner'),
(38, 'Which of the following allows you to quickly copy the contents of a cell down a column?', 'Drag the fill handle', 'Double-click the cell', 'Use the insert tab', 'Use the format painter', 'Drag the fill handle', 1, 'Excel 2019 Beginner'),
(39, 'What is the shortcut for saving a workbook in Excel 2019?', 'Ctrl + S', 'Ctrl + P', 'Ctrl + C', 'Ctrl + A', 'Ctrl + S', 1, 'Excel 2019 Beginner'),
(40, 'How do you apply a number format in Excel 2019?', 'Home > Number group', 'Data > Number format', 'Insert > Format', 'View > Number group', 'Home > Number group', 1, 'Excel 2019 Beginner'),
(41, 'What does the SUM function do in Excel?', 'Adds numbers together', 'Subtracts numbers', 'Multiplies numbers', 'Divides numbers', 'Adds numbers together', 2, 'Excel Functions Overview'),
(42, 'Which function would you use to find the average of a range of cells?', 'TOTAL()', 'AVERAGE()', 'MEAN()', 'SUM()', 'AVERAGE()', 2, 'Excel Functions Overview'),
(43, 'What is the purpose of the COUNT function?', 'Counts the number of cells in a range', 'Counts non-empty cells in a range', 'Counts the total number of worksheets', 'Counts unique values in a range', 'Counts the number of cells in a range', 2, 'Excel Functions Overview'),
(44, 'Which function is used to find the maximum value in a range?', 'MAXIMUM()', 'HIGHEST()', 'MAX()', 'TOP()', 'MAX()', 2, 'Excel Functions Overview'),
(45, 'What does the IF function do?', 'Returns a value based on a logical test', 'Finds the maximum value', 'Summarizes data', 'Creates a chart', 'Returns a value based on a logical test', 2, 'Excel Functions Overview'),
(46, 'What is the shortcut for adding borders to selected cells?', 'Ctrl + B', 'Ctrl + 1', 'Alt + H + B', 'Ctrl + Shift + B', 'Alt + H + B', 2, 'Excel Intermediate'),
(47, 'Which feature allows you to quickly fill a series of cells with data?', 'AutoFill', 'Flash Fill', 'Data Validation', 'Conditional Formatting', 'AutoFill', 2, 'Excel Intermediate'),
(48, 'How can you create a drop-down list in Excel?', 'Data > Sort', 'Data > Validation', 'Insert > Dropdown', 'Home > Format', 'Data > Validation', 2, 'Excel Intermediate'),
(49, 'What does the CONCATENATE function do?', 'Joins two or more strings together', 'Splits a string into an array', 'Finds the length of a string', 'Reverses a string', 'Joins two or more strings together', 2, 'Excel Intermediate'),
(50, 'What is the purpose of conditional formatting?', 'To change cell values', 'To highlight cells based on criteria', 'To create charts', 'To protect worksheets', 'To highlight cells based on criteria', 2, 'Excel Intermediate'),
(51, 'What function would you use to calculate the present value of an investment?', 'FV()', 'PV()', 'NPV()', 'IRR()', 'PV()', 2, 'Excel For Finance And Accounting Intermediate'),
(52, 'How is the PMT function used in Excel?', 'To calculate loan payments', 'To calculate interest rates', 'To calculate future value', 'To calculate cash flow', 'To calculate loan payments', 2, 'Excel For Finance And Accounting Intermediate'),
(53, 'Which function is used to calculate internal rate of return?', 'IRR()', 'ROI()', 'XIRR()', 'PMT()', 'IRR()', 2, 'Excel For Finance And Accounting Intermediate'),
(54, 'What does the NPV function calculate?', 'Net profit', 'Net present value', 'Net revenue', 'Net growth', 'Net present value', 2, 'Excel For Finance And Accounting Intermediate'),
(55, 'What is the purpose of the SLN function?', 'To calculate straight-line depreciation', 'To calculate future value', 'To calculate cash flows', 'To calculate interest', 'To calculate straight-line depreciation', 2, 'Excel For Finance And Accounting Intermediate'),
(56, 'What feature allows you to create a custom data visualization in Excel 2021?', 'SmartArt', 'Data Map', 'Dynamic Array', 'Pivot Table', 'Dynamic Array', 2, 'Excel 2021 Power User'),
(57, 'Which function is used to return the row number of a reference?', 'ROW()', 'COLUMN()', 'INDEX()', 'MATCH()', 'ROW()', 2, 'Excel 2021 Power User'),
(58, 'What does the UNIQUE function do in Excel 2021?', 'Returns unique values from a range', 'Counts the number of unique values', 'Sorts values in ascending order', 'Merges cells', 'Returns unique values from a range', 2, 'Excel 2021 Power User'),
(59, 'Which feature allows you to automatically fill in a series of values?', 'Flash Fill', 'AutoFill', 'Series Fill', 'Data Fill', 'AutoFill', 2, 'Excel 2021 Power User'),
(60, 'What is the purpose of the FILTER function?', 'To extract specific data from a range based on criteria', 'To sort data', 'To merge data', 'To remove duplicates', 'To extract specific data from a range based on criteria', 2, 'Excel 2021 Power User'),
(61, 'What is the primary purpose of a Pivot Table?', 'To create charts', 'To summarize and analyze data', 'To sort data', 'To format cells', 'To summarize and analyze data', 2, 'Excel 2021 Pivot Tables'),
(62, 'How can you refresh a Pivot Table?', 'Right-click and select Refresh', 'Click on Data > Refresh', 'Click on Insert > Refresh', 'It refreshes automatically', 'Right-click and select Refresh', 2, 'Excel 2021 Pivot Tables'),
(63, 'What does a slicer do in a Pivot Table?', 'Filters data', 'Sorts data', 'Creates charts', 'Formats cells', 'Filters data', 2, 'Excel 2021 Pivot Tables'),
(64, 'Can a Pivot Table be created from multiple sources of data?', 'Yes, using Power Query', 'No, only from one source', 'Yes, but only from Excel files', 'Yes, using VBA', 'Yes, using Power Query', 2, 'Excel 2021 Pivot Tables'),
(65, 'Which of the following is a benefit of using Pivot Tables?', 'They can only summarize one field', 'They allow for quick data analysis', 'They cannot be customized', 'They require programming knowledge', 'They allow for quick data analysis', 2, 'Excel 2021 Pivot Tables'),
(66, 'What is the primary use of Excel\'s Data Analysis ToolPak?', 'To create charts', 'To perform complex statistical analysis', 'To format cells', 'To sort data', 'To perform complex statistical analysis', 2, 'Excel 2021 Intro to Data Analysis'),
(67, 'Which function would you use to perform a linear regression analysis?', 'LINEST()', 'TREND()', 'AVERAGE()', 'SLOPE()', 'LINEST()', 2, 'Excel 2021 Intro to Data Analysis'),
(68, 'What does the AVERAGEIF function do?', 'Calculates the average of a range based on a condition', 'Counts the number of cells that meet a condition', 'Sums the values in a range', 'Returns the maximum value', 'Calculates the average of a range based on a condition', 2, 'Excel 2021 Intro to Data Analysis'),
(69, 'Which tool would you use to visualize the distribution of data?', 'Histogram', 'Pie Chart', 'Line Graph', 'Bar Graph', 'Histogram', 2, 'Excel 2021 Intro to Data Analysis'),
(70, 'What is the purpose of the Goal Seek feature in Excel?', 'To find a specific value in a dataset', 'To calculate the best-fit line for a dataset', 'To determine the input value needed to achieve a specific goal', 'To summarize data', 'To determine the input value needed to achieve a specific goal', 2, 'Excel 2021 Intro to Data Analysis'),
(71, 'What is the primary function of XLOOKUP?', 'To lookup values in rows and columns', 'To create charts', 'To calculate averages', 'To sort data', 'To lookup values in rows and columns', 2, 'Excel 2021 XLOOKUP'),
(72, 'Which of the following arguments is NOT required in XLOOKUP?', 'lookup_value', 'lookup_array', 'return_array', 'if_not_found', 'if_not_found', 2, 'Excel 2021 XLOOKUP'),
(73, 'What is the default match mode in XLOOKUP?', 'Exact match', 'Wildcard match', 'Approximate match', 'No match', 'Exact match', 2, 'Excel 2021 XLOOKUP'),
(74, 'Can XLOOKUP return multiple values?', 'Yes', 'No', 'Only in certain conditions', 'Only with VBA', 'Yes', 2, 'Excel 2021 XLOOKUP'),
(75, 'What is one advantage of XLOOKUP over VLOOKUP?', 'It allows searching from any direction', 'It can only search columns', 'It requires fewer arguments', 'It is faster than VLOOKUP', 'It allows searching from any direction', 2, 'Excel 2021 XLOOKUP'),
(76, 'Which function is used to remove spaces from a text string in Excel?', 'REMOVE()', 'TRIM()', 'CLEAN()', 'TEXT()', 'TRIM()', 2, 'Excel 2019 Power User'),
(77, 'What does the MATCH function do?', 'Finds the position of a value in a range', 'Returns a range of cells', 'Counts the number of cells', 'Reverses a string', 'Finds the position of a value in a range', 2, 'Excel 2019 Power User'),
(78, 'How do you create a named range in Excel 2019?', 'Insert > Name', 'Formulas > Define Name', 'Data > Data Validation', 'Home > Name Manager', 'Formulas > Define Name', 2, 'Excel 2019 Power User'),
(79, 'Which function would you use to check if a value exists in a range?', 'IFERROR()', 'ISNUMBER()', 'IF()', 'MATCH()', 'MATCH()', 2, 'Excel 2019 Power User'),
(80, 'What is the purpose of the INDEX function?', 'To return the value of a cell in a table', 'To format cells', 'To calculate the sum of a range', 'To remove duplicates', 'To return the value of a cell in a table', 2, 'Excel 2019 Power User'),
(81, 'What is the purpose of a macro in Excel VBA?', 'To automate repetitive tasks', 'To create charts', 'To sort data', 'To format cells', 'To automate repetitive tasks', 2, 'Excel 2019 VBA Intermediate'),
(82, 'How do you declare a variable in VBA?', 'Dim', 'Var', 'Declare', 'Set', 'Dim', 2, 'Excel 2019 VBA Intermediate'),
(83, 'What does the VBA Range object represent?', 'A single cell or range of cells', 'A worksheet', 'A workbook', 'A column', 'A single cell or range of cells', 2, 'Excel 2019 VBA Intermediate'),
(84, 'Which of the following is a valid VBA data type?', 'Text', 'Integer', 'String', 'Character', 'String', 2, 'Excel 2019 VBA Intermediate'),
(85, 'What is the purpose of the VBA MsgBox function?', 'To display a message to the user', 'To create an input box', 'To generate a macro', 'To calculate data', 'To display a message to the user', 2, 'Excel 2019 VBA Intermediate'),
(86, 'Which function allows you to calculate the average of a range of cells while ignoring any text entries?', 'AVERAGEIF', 'AVERAGEA', 'AVERAGEEXCLUDE', 'AVERAGEX', 'AVERAGEIF', 3, 'Excel Advance'),
(87, 'What is the maximum number of rows in an Excel worksheet?', '65,536', '1,048,576', '1,000,000', '2,097,152', '1,048,576', 3, 'Excel Advance'),
(88, 'In Excel, what does the VLOOKUP function do?', 'Looks for a value vertically in a column.', 'Looks for a value horizontally in a row.', 'Calculates the total of a range.', 'Compares two lists.', 'Looks for a value vertically in a column.', 3, 'Excel Advance'),
(89, 'What feature allows you to analyze data in a spreadsheet dynamically?', 'Conditional Formatting', 'Data Validation', 'PivotTables', 'Charts', 'PivotTables', 3, 'Excel Advance'),
(90, 'Which Excel tool is used to create a series of numbers or dates in a sequence?', 'Flash Fill', 'AutoFill', 'Data Table', 'Series Generator', 'AutoFill', 3, 'Excel Advance'),
(91, 'What is the purpose of the NPV function in Excel?', 'To calculate the net present value of an investment.', 'To calculate the future value of an investment.', 'To determine the break-even point.', 'To calculate interest on loans.', 'To calculate the net present value of an investment.', 3, 'Excel For Finance And Accounting Advanced'),
(92, 'Which Excel function can be used to perform financial forecasting?', 'FORECAST', 'PREDICT', 'FINANCIAL', 'TREND', 'FORECAST', 3, 'Excel For Finance And Accounting Advanced'),
(93, 'How do you calculate depreciation using the straight-line method in Excel?', '=SLN(cost, salvage, life)', '=DDB(cost, salvage, life)', '=SYD(cost, salvage, life)', '=DB(cost, salvage, life)', '=SLN(cost, salvage, life)', 3, 'Excel For Finance And Accounting Advanced'),
(94, 'Which of the following is a financial analysis tool in Excel?', 'Goal Seek', 'Data Table', 'Solver', 'All of the above', 'All of the above', 3, 'Excel For Finance And Accounting Advanced'),
(95, 'What is the shortcut for creating a new chart in Excel?', 'Alt + F1', 'Ctrl + N', 'Alt + C', 'Ctrl + C', 'Alt + F1', 3, 'Excel For Finance And Accounting Advanced'),
(96, 'What new feature in Excel 2021 allows users to collaborate in real time?', 'Co-authoring', 'Share Workbook', 'Workbook Linking', 'Cloud Sync', 'Co-authoring', 3, 'Excel 2021 Advanced'),
(97, 'What is the purpose of the XLOOKUP function introduced in Excel 2021?', 'To find values in a range or array.', 'To calculate the average of a range.', 'To count cells based on criteria.', 'To create a table of contents.', 'To find values in a range or array.', 3, 'Excel 2021 Advanced'),
(98, 'Which function can replace VLOOKUP and HLOOKUP in Excel 2021?', 'XLOOKUP', 'LOOKUP', 'MATCH', 'INDEX', 'XLOOKUP', 3, 'Excel 2021 Advanced'),
(99, 'What is the maximum number of characters in a cell in Excel 2021?', '32,767', '65,536', '1,048,576', '255', '32,767', 3, 'Excel 2021 Advanced'),
(100, 'What feature in Excel 2021 helps with data visualization using suggested charts?', 'Chart Ideas', 'Smart Charts', 'Auto Charts', 'Graph Suggestions', 'Chart Ideas', 3, 'Excel 2021 Advanced'),
(101, 'What is the new dynamic array feature in Excel 2021?', 'Allows formulas to return multiple results.', 'A feature that speeds up calculations.', 'Reduces file size.', 'Improves charting capabilities.', 'Allows formulas to return multiple results.', 3, 'Excel 2021 Expert'),
(102, 'What function allows you to reference a range of data without duplicates?', 'UNIQUE', 'DISTINCT', 'REMOVE_DUPLICATES', 'FILTER', 'UNIQUE', 3, 'Excel 2021 Expert'),
(103, 'Which function can be used to dynamically filter data in Excel 2021?', 'FILTER', 'SORT', 'SEARCH', 'MATCH', 'FILTER', 3, 'Excel 2021 Expert'),
(104, 'What tool is used to visualize complex data in Excel 2021?', 'Slicers', 'Data Bars', 'PivotCharts', 'All of the above', 'All of the above', 3, 'Excel 2021 Expert'),
(105, 'What is the use of the LET function in Excel 2021?', 'To define named variables in a formula.', 'To create a table.', 'To generate random numbers.', 'To format cells.', 'To define named variables in a formula.', 3, 'Excel 2021 Expert'),
(106, 'Which shortcut is used to auto-sum a range in Excel?', 'Ctrl + Alt + S', 'Alt + =', 'Ctrl + Shift + S', 'Alt + F1', 'Alt + =', 3, 'Excel Productivity Tips and Tricks'),
(107, 'What feature helps to keep your columns and rows visible while scrolling?', 'Freeze Panes', 'Split View', 'Hide Rows', 'Hide Columns', 'Freeze Panes', 3, 'Excel Productivity Tips and Tricks'),
(108, 'Which feature allows you to quickly fill in a series of data?', 'Flash Fill', 'Auto Fill', 'Quick Fill', 'Smart Fill', 'Auto Fill', 3, 'Excel Productivity Tips and Tricks'),
(109, 'What is the purpose of conditional formatting in Excel?', 'To apply formatting based on cell values.', 'To hide data.', 'To create charts.', 'To merge cells.', 'To apply formatting based on cell values.', 3, 'Excel Productivity Tips and Tricks'),
(110, 'Which Excel feature can you use to consolidate data from multiple sheets?', 'Data Consolidation', 'Data Validation', 'Data Merge', 'Pivot Table', 'Data Consolidation', 3, 'Excel Productivity Tips and Tricks'),
(111, 'Which function is used to count cells in Google Sheets?', 'COUNT', 'COUNTA', 'COUNTIF', 'All of the above', 'All of the above', 3, 'Google Sheets for Excel Users'),
(112, 'What is the equivalent of Excel’s VLOOKUP in Google Sheets?', 'VLOOKUP', 'LOOKUP', 'XLOOKUP', 'SEARCH', 'VLOOKUP', 3, 'Google Sheets for Excel Users'),
(113, 'Which feature is unique to Google Sheets?', 'Collaboration', 'Conditional Formatting', 'Data Validation', 'Pivot Tables', 'Collaboration', 3, 'Google Sheets for Excel Users'),
(114, 'What is the maximum number of cells in Google Sheets?', '10 million', '1 million', '5 million', 'Unlimited', '10 million', 3, 'Google Sheets for Excel Users'),
(115, 'How do you protect a range in Google Sheets?', 'Protect Range Option', 'Hide Cells', 'Data Validation', 'Conditional Formatting', 'Protect Range Option', 3, 'Google Sheets for Excel Users'),
(116, 'What is the new feature for data visualization in Excel 2019?', '3D Maps', 'Smart Lookup', 'Data Insights', 'New Chart Types', '3D Maps', 3, 'Excel 2019 Advanced'),
(117, 'Which function allows for better data modeling in Excel 2019?', 'DAX', 'VBA', 'XLOOKUP', 'INDEX', 'DAX', 3, 'Excel 2019 Advanced'),
(118, 'What is the function used to calculate the internal rate of return?', 'IRR', 'NPV', 'XIRR', 'PMT', 'IRR', 3, 'Excel 2019 Advanced'),
(119, 'Which tool is used for error checking in formulas?', 'Error Checking Tool', 'Formula Auditing', 'Evaluate Formula', 'All of the above', 'All of the above', 3, 'Excel 2019 Advanced'),
(120, 'What feature helps to reduce file size in Excel 2019?', 'File Compression', 'Linking Files', 'Data Model', 'Reduce Duplicates', 'Data Model', 3, 'Excel 2019 Advanced'),
(121, 'What does the GETPIVOTDATA function do?', 'Extracts data from a Pivot Table', 'Calculates totals', 'Summarizes data', 'Links data', 'Extracts data from a Pivot Table', 3, 'Excel 2019 Expert'),
(122, 'Which feature helps to analyze large data sets quickly?', 'Power Query', 'Power Pivot', 'Data Analysis Toolpak', 'All of the above', 'All of the above', 3, 'Excel 2019 Expert'),
(123, 'What is the primary purpose of macros in Excel 2019?', 'To automate repetitive tasks', 'To format cells', 'To create charts', 'To manage data', 'To automate repetitive tasks', 3, 'Excel 2019 Expert'),
(124, 'Which function allows you to generate random numbers in Excel?', 'RAND()', 'RANDBETWEEN()', 'RANDARRAY()', 'RANDOM()', 'RAND()', 3, 'Excel 2019 Expert'),
(125, 'What feature in Excel allows users to analyze data without writing formulas?', 'Quick Analysis', 'Data Validation', 'Data Consolidation', 'Formula AutoComplete', 'Quick Analysis', 3, 'Excel 2019 Expert'),
(126, 'What is the primary function of a Pivot Table?', 'Summarize large amounts of data', 'Create charts', 'Format cells', 'Automate tasks', 'Summarize large amounts of data', 3, 'Excel 2019 Pivot Tables'),
(127, 'How can you quickly update a Pivot Table?', 'Refresh', 'Update', 'Recalculate', 'Modify', 'Refresh', 3, 'Excel 2019 Pivot Tables'),
(128, 'What type of data can be summarized in a Pivot Table?', 'Numeric and text', 'Only numeric', 'Only text', 'Only dates', 'Numeric and text', 3, 'Excel 2019 Pivot Tables'),
(129, 'Which field in a Pivot Table contains categories for data?', 'Row Labels', 'Value', 'Column Labels', 'Filter', 'Row Labels', 3, 'Excel 2019 Pivot Tables'),
(130, 'What does the term \"slicer\" refer to in a Pivot Table?', 'A tool for filtering data', 'A type of chart', 'A formula', 'A data type', 'A tool for filtering data', 3, 'Excel 2019 Pivot Tables'),
(131, 'What is the purpose of using data validation in Excel?', 'To restrict data entry', 'To format data', 'To create charts', 'To summarize data', 'To restrict data entry', 3, 'Excel 2019 Intro to Data Analysis'),
(132, 'Which function is useful for data analysis in Excel?', 'SUMIFS', 'AVERAGE', 'COUNT', 'MAX', 'SUMIFS', 3, 'Excel 2019 Intro to Data Analysis'),
(133, 'What does the term \"data cleaning\" mean?', 'Removing duplicates', 'Formatting data', 'Analyzing data', 'Sorting data', 'Removing duplicates', 3, 'Excel 2019 Intro to Data Analysis'),
(134, 'Which feature is used to sort data in Excel?', 'Sort & Filter', 'Conditional Formatting', 'Data Table', 'Pivot Table', 'Sort & Filter', 3, 'Excel 2019 Intro to Data Analysis'),
(135, 'What is the main advantage of using tables in Excel?', 'Automatic formatting and structured references', 'Faster calculations', 'Easier printing', 'Better graphics', 'Automatic formatting and structured references', 3, 'Excel 2019 Intro to Data Analysis'),
(136, 'What does VBA stand for?', 'Visual Basic for Applications', 'Variable Basic for Applications', 'Visual Binary for Applications', 'Variable Binary for Applications', 'Visual Basic for Applications', 3, 'Excel 2019 VBA Advanced'),
(137, 'Which of the following is NOT a VBA data type?', 'Integer', 'String', 'Array', 'Set', 'Set', 3, 'Excel 2019 VBA Advanced'),
(138, 'What is the purpose of a Sub procedure in VBA?', 'To execute a block of code', 'To declare variables', 'To create a loop', 'To end a program', 'To execute a block of code', 3, 'Excel 2019 VBA Advanced'),
(139, 'Which statement is used to create a message box in VBA?', 'MsgBox', 'Alert', 'Message', 'Show', 'MsgBox', 3, 'Excel 2019 VBA Advanced'),
(140, 'How do you create a loop in VBA?', 'For...Next', 'While...Wend', 'Do...Loop', 'All of the above', 'All of the above', 3, 'Excel 2019 VBA Advanced'),
(141, 'What is the purpose of the \"Option Explicit\" statement in VBA?', 'To force variable declaration', 'To create a function', 'To start a module', 'To declare a constant', 'To force variable declaration', 3, 'Excel 2019 VBA Expert'),
(142, 'Which method is used to save a workbook in VBA?', 'Workbook.Save', 'SaveWorkbook', 'Workbook.SaveAs', 'File.Save', 'Workbook.Save', 3, 'Excel 2019 VBA Expert'),
(143, 'What does the \"ThisWorkbook\" object refer to in VBA?', 'The workbook containing the code', 'Any workbook', 'The active workbook', 'The first workbook', 'The workbook containing the code', 3, 'Excel 2019 VBA Expert'),
(144, 'How do you comment a line in VBA?', 'Using \' or //', 'Using #', 'Using /* */', 'Using --', 'Using \' or //', 3, 'Excel 2019 VBA Expert'),
(145, 'What does the \"Range\" object represent in VBA?', 'A cell or group of cells', 'An entire workbook', 'A single workbook', 'A single sheet', 'A cell or group of cells', 3, 'Excel 2019 VBA Expert');

-- --------------------------------------------------------

--
-- Table structure for table `level`
--

CREATE TABLE `level` (
  `C_ID` int(11) NOT NULL,
  `levels` int(11) NOT NULL,
  `beginner` varchar(400) NOT NULL,
  `intermediate` varchar(400) NOT NULL,
  `advance` varchar(400) NOT NULL,
  `points_to_C` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `level`
--

INSERT INTO `level` (`C_ID`, `levels`, `beginner`, `intermediate`, `advance`, `points_to_C`) VALUES
(101, 3, 'Introduction to Python,First Python Program,Variables,Variable Naming Rules,User Input,String Concatenation', 'Data Types,Operators,File I/O,If-else Statements,Loops,Basic data structures (lists)', 'OOP in Python,File Handling,Modules in Python,Abstraction,Overloadings,Turtles Graphics', 240),
(102, 3, 'Excel Introduction,\r\nPivot Tables,\r\nExcel Capilot,\r\nExcel Power User,\r\nExcel For Finance And Accounting Beginner,\r\nExcel 2019 Beginner', 'Excel Functions,\r\nExcel For Finance And Accounting Intermediate,\r\nXLOOKUP,\r\nVBA Intermediate', 'Excel Advance,\r\nExcel For Finance And Accounting Advanced,\r\nExcel Productivity Tips and Tricks,\r\nGoogle Sheets for Excel Users,\r\nExcel 2019 Expert', 360),
(103, 3, 'Introduction to Data Analytics,\r\nExcel Basic,\r\nSQL Basic,\r\nPython Basic,\r\nExploratory Data Analysis (EDA),\r\nData Visualization', 'Advanced Excel Part 1,\r\nPower BI Part 2,\r\nSQL DDL,\r\nSQL DML & Order By,\r\nPython Intermediate', 'Advanced Excel Part 2,\r\nSQL Group By,\r\nSQL Joins,\r\nPower BI Part 3', 1044);

-- --------------------------------------------------------

--
-- Table structure for table `profiles`
--

CREATE TABLE `profiles` (
  `id` int(11) NOT NULL,
  `email_id` varchar(280) NOT NULL,
  `course_ID` int(11) NOT NULL,
  `level` varchar(240) NOT NULL,
  `points` int(11) NOT NULL,
  `last_update_date` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- Table structure for table `progress`
--

CREATE TABLE `progress` (
  `id` int(11) NOT NULL,
  `email_id` varchar(280) NOT NULL,
  `watched_video_id` int(11) NOT NULL,
  `last_updated` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- Table structure for table `python_course`
--

CREATE TABLE `python_course` (
  `id` int(11) NOT NULL,
  `course_id` int(11) NOT NULL,
  `level` int(11) NOT NULL,
  `topic_name` varchar(400) NOT NULL,
  `video_url` varchar(280) NOT NULL,
  `articles` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `created_at` varchar(240) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `python_course`
--

INSERT INTO `python_course` (`id`, `course_id`, `level`, `topic_name`, `video_url`, `articles`, `created_at`) VALUES
(101101, 101, 1, 'Introduction to Python', 'https://youtu.be/6i3EGqOBRiU?si=bvlnA9fIQFEC1QsS', '{\r\n    \"title\": \"Introduction to Python\",\r\n    \"content\": {\r\n        \"introduction\": \"Python is a high-level, interpreted programming language known for its simplicity and readability. It is widely used in various fields, including web development, data science, artificial intelligence, automation, and more. Python’s versatility and community support make it an ideal choice for beginners and professionals alike.\",\r\n        \"main_content\": \"### 1. What is Python?\nPython is an open-source programming language developed by Guido van Rossum and released in 1991. It emphasizes code readability and allows developers to write fewer lines of code compared to other languages such as Java or C++.\n\n### 2. Key Features of Python\n- **Simplicity**: Python’s easy-to-understand syntax allows developers t[...]\"\r\n}', ''),
(101102, 101, 1, 'Downloading and Installing Python', 'https://youtu.be/La1BdF_sunw?si=tcp5MPmS0cCaYbO8', '{\r\n        \"title\": \"Downloading and Installing Python\",\r\n        \"content\": {\r\n            \"introduction\": \"Python is a popular programming language known for its simplicity and versatility. To start using Python on your system, you first need to download and install it. This guide will walk you through the process of downloading and installing Python on Windows, macOS, and Linux.\",\r\n            \"main_content\": \"### 1. Downloading Python\nTo download Python, follow these steps:\n- Go to the official Python website: [python.org/downloads](https://www.python.org/downloads/).\n- On the downloads page, Python will automatically detect your operating system and show the recommended version for your platform.\n- Click the **Download** button to get the latest stable version of Python (e.g., Python 3.x)...\"\r\n        }\r\n    }', ''),
(101103, 101, 1, 'History Of Python', 'https://youtu.be/1UzSDMJRh8c?si=M6Y7DpXNbmTKBhcJ', '{\r\n        \"title\": \"History of Python\",\r\n        \"content\": {\r\n            \"introduction\": \"Python is a widely-used, high-level programming language known for its readability and simplicity. Its development began in the late 1980s, and it has since become one of the most popular programming languages in the world. This article explores the history and evolution of Python, from its creation to its current status.\",\r\n            \"main_content\": \"### 1. The Creation of Python\\nPython was created by **Guido van Rossum** in the late 1980s as a successor to the ABC programming language. Van Rossum began working on Python during his Christmas break in December 1989 while working at the Centrum Wiskunde & Informatica (CWI) in the Netherlands.\\n\\nVan Rossum wanted Python to address some of the limitations he observed in ABC while incorporating features that would make it easy to read, write, and maintain. The name \\\"Python\\\" was inspired by the British comedy series **\\\"Monty Python Flying Circus\\\"**, and not after the snake as commonly believed.\\n\\n### 2. Python 1.0 (1994)\\nPython 1.0 was officially released on **February 20, 1991**. This version introduced several of Python\'s core features, including:\\n- **Exception handling**: Making it easier to handle errors in code.\\n- **Functions and modules**: Enabling modular code organization.\\n- **Dynamic typing**: Allowing variables to change types without explicit declarations.\\n\\nPython was designed to be highly extensible, which allowed developers to add new modules and features as needed.\\n\\n### 3. Python 2.x Series (2000)\\nPython 2.0 was released on **October 16, 2000**. This version marked a significant step in the evolution of the language. It introduced several major features that shaped Python\'s growth, including:\\n- **List comprehensions**: A concise way to create lists.\\n- **Garbage collection**: Automatic memory management through reference counting.\\n- **Unicode support**: Allowing Python to handle more diverse character sets.\\n\\nThe Python 2.x series was very successful, but over time, various inconsistencies and limitations in the language became apparent. This eventually led to discussions about developing Python 3.x.\\n\\n### 4. Python 3.x Series (2008)\\nPython 3.0 was released on **December 3, 2008**, and represented a major overhaul of the language. The primary goal of Python 3 was to fix design flaws in Python 2 and to make the language more consistent and future-proof. Key changes in Python 3 included:\\n- **Print function**: `print` became a function, not a statement, requiring parentheses.\\n- **Better Unicode support**: All strings are Unicode by default, improving internationalization.\\n- **Integer division**: Division of integers now produces a float (e.g., `5 / 2` results in `2.5` rather than `2`).\\n\\nPython 3.x was intentionally not backward compatible with Python 2.x, which initially caused resistance within the community. However, Python 2 was eventually deprecated on **January 1, 2020**, and Python 3.x became the standard.\\n\\n### 5. Python Growing Popularity\\nBy the late 2000s and early 2010s, Python\'s simplicity, versatility, and ease of learning made it a favorite in various fields, including:\\n- **Web development**: With frameworks like Django and Flask.\\n- **Data science and machine learning**: Due to libraries like NumPy, pandas, TensorFlow, and PyTorch.\\n- **Automation and scripting**: Python is a go-to language for system automation and scripting tasks.\\n- **Education**: Its readability and low learning curve made it a popular choice for teaching programming.\\n\\nPython\'s popularity surged during this period, becoming one of the most widely used languages globally.\\n\\n### 6. Python 3.x Today\\nPython 3 continues to evolve with regular updates and releases. The latest stable version as of September 2023 is **Python 3.11**. Key features in recent versions include:\\n- **Pattern matching**: Introduced in Python 3.10, providing an expressive way to perform matching operations.\\n- **Performance improvements**: Ongoing work to improve Python\'s speed and efficiency, especially in computational tasks.\\n\\nThe Python community is vibrant, with many contributors developing new libraries and frameworks, making Python suitable for even more applications. Its adoption in artificial intelligence, web development, and automation continues to grow.\",\r\n            \"conclusion\": \"Python\'s journey from its early days as a simple scripting language to becoming one of the most influential programming languages is remarkable. Its emphasis on simplicity, readability, and versatility has made it a favorite for developers worldwide. Python’s future looks promising as it continues to be widely adopted for modern applications in data science, machine learning, automation, and more.\"\r\n        }\r\n    }', ''),
(101104, 101, 1, 'First Python Program', 'https://youtu.be/lygaoUnJKF4?si=Nuo7W6Im0mdkEYNh', '{\r\n        \"title\": \"First Python Program\",\r\n        \"content\": {\r\n            \"introduction\": \"Writing your first Python program is a simple and exciting step towards learning programming. Python syntax is known for its simplicity, making it an ideal language for beginners. In this article, we will guide you through writing and running your first Python program: the famous \\\"Hello, World!\\\" program.\",\r\n            \"main_content\": \"### 1. Setting Up Python \\nBefore you can write your first program, you need to have Python installed on your computer. You can download it from the official [Python website](https://www.python.org/downloads/). Once installed, open a terminal (on macOS or Linux) or a command prompt (on Windows) to verify your installation by typing: \\n\\`\\`\\`bash\\npython --version \\n\\`\\`\\` \\nYou should see the version number of Python that you installed. \\n\\n### 2. Writing Your First Program \\nThe first program most programmers write is the **\\\"Hello, World!\\\"** program. This simple program displays the text \\\"Hello, World!\\\" on the screen. To write this program, open a text editor or an IDE like Visual Studio Code or PyCharm, and type the following Python code: \\n\\`\\`\\`python \\nprint(\\\"Hello, World!\\\") \\n\\`\\`\\` \\nThis line of code uses the `print()` function to output the message \\\"Hello, World!\\\\\". \\n\\n### 3. Running the Program \\nOnce you have written your code, you can save the file with a `.py` extension, for example, `hello_world.py`. To run the program, navigate to the directory where you saved the file in your terminal or command prompt, and type the following command: \\n\\`\\`\\`bash\\npython hello_world.py \\n\\`\\`\\` \\nIf everything is set up correctly, you should see the following output: \\n\\`\\nHello, World! \\n\\` \\nCongratulations! You have successfully written and executed your first Python program. \\n\\n### 4. Understanding the Code \\n- `print()`: This is a built-in Python function that outputs text to the console. In this case, it outputs the string \\\"Hello, World!\\\", which will be printed exactly as it is. \\n- **Strings**: In Python, text enclosed in double quotes (\\\"\\\") or single quotes (\') is called a string, which is a data type used to represent text. \\n- **Syntax Simplicity**: Unlike many other programming languages, Python doesn\'t require you to define the function or include special headers to run simple code. This makes it very accessible for beginners. \\n\\n### 5. Experimenting Further \\nNow that you have successfully run your first program, feel free to experiment. Try modifying the text inside the \\\"print()\\\" function. For example: \\n\\`\\`\\`python \\nprint(\\\"Welcome to Python Programming!\\\") \\n\\`\\`\\` \\nYou can also try other tasks, like printing numbers: \\n\\`\\`\\`python \\nprint(42) \\n\\`\\`\\`\",\r\n            \"conclusion\": \"Writing your first Python program is a simple and rewarding process. With just one line of code, you can output text to the screen, making Python an excellent language for beginners. As you continue learning, you\'ll encounter more complex programs, but mastering the basics like \'Hello, World!\' is a great first step.\"\r\n        }\r\n    }', ''),
(101105, 101, 1, 'Exercise 1', 'https://youtu.be/FP6qQgJI5f4?si=h-0KqOGk_S2ROO4g', '{\r\n        \"title\": \"Exercise 1: Writing Your First Python Program\",\r\n        \"content\": {\r\n            \"introduction\": \"In this exercise, you\'ll practice writing and running your very first Python program. By the end of the exercise, you’ll be familiar with creating, saving, and executing a simple Python script. This will solidify your understanding of basic Python syntax and the use of the `print()` function.\",\r\n            \"main_content\": \"### Task: Create a Python Script to Output a Message \\nYour task is to write a Python program that outputs the message `Hello, Python Learner!`. Follow the steps below to complete the exercise: \\n\\n### Step 1: Write the Code \\nOpen your text editor or IDE and write the following Python code: \\n```python \\nprint(\"Hello, Python Learner!\") \\n``` \\n\\n### Step 2: Save the Script \\nSave the file with the name `exercise1.py`. Make sure to include the `.py` extension, which tells your system that this is a Python script. \\n\\n### Step 3: Run the Script \\n- Open your terminal (on macOS/Linux) or command prompt (on Windows). \\n- Navigate to the directory where you saved `exercise1.py`. \\n- Run the script by typing the following command: \\n```bash \\npython exercise1.py \\n``` \\n\\n### Step 4: Check the Output \\nOnce you run the script, you should see the following output on your screen: \\n``` \\nHello, Python Learner! \\n``` \\nIf you see this message, congratulations! You\'ve successfully completed your first Python exercise.\",\r\n            \"conclusion\": \"By completing this exercise, you’ve gained hands-on experience with writing and running a simple Python script. These basic steps will be the foundation for all the more advanced programming tasks you\'ll encounter in the future. Keep practicing to reinforce your learning.\"\r\n        }\r\n    }', ''),
(101106, 101, 1, 'String Concatenation', 'https://youtu.be/6Nu9cvINQLk?si=8KA6uCvrvu6cjFOj', '{\r\n        \"title\": \"String Concatenation in Python\",\r\n        \"content\": {\r\n            \"introduction\": \"String concatenation is the process of combining two or more strings into a single string. In Python, this is done using the `+` operator or using methods like `join()`. String concatenation is widely used in various programming tasks like formatting output, creating messages, or building dynamic strings.\",\r\n            \"main_content\": \"### Methods of String Concatenation: \\n\\n#### 1. Using the `+` Operator \\nYou can use the `+` operator to concatenate two or more strings. Here’s an example: \\n```python \\nfirst_name = \"John \" \\nlast_name = \"Doe \" \\nfull_name = first_name + \"  \" + last_name \\nprint(full_name) \\n``` \\n**Output**: \\n``` \\nJohn Doe \\n``` \\n\\n#### 2. Using `join()` Method \\nThe `join()` method is useful for concatenating multiple strings stored in a list or tuple. Example: \\n```python \\nwords = [\"Hello \", \"world \", \"from \", \"Python \"] \\nsentence = \"  \".join(words) \\nprint(sentence) \\n``` \\n**Output**: \\n``` \\nHello world from Python \\n``` \\n\\n#### 3. Using `f-strings` (Formatted String Literals) \\nPython 3.6 introduced f-strings, which provide a more readable and efficient way to concatenate strings. Example: \\n```python \\nfirst_name = \"Jane \" \\nlast_name = \"Smith \" \\nfull_name = f\"{first_name}{last_name}\" \\nprint(full_name) \\n``` \\n**Output**: \\n``` \\nJane Smith \\n``` \\n\\n### Performance Considerations \\nFor simple string concatenation, using the `+` operator or f-strings is fine. However, if you are concatenating a large number of strings (especially inside loops), using `join()` is more efficient, as it avoids creating multiple intermediate strings.\",\r\n            \"conclusion\": \"String concatenation is a fundamental concept in Python, and it can be done using multiple methods, including the `+` operator, `join()` method, and f-strings. Depending on the use case, you can choose the most suitable method. For better performance in complex situations, the `join()` method is preferred.\"\r\n        }\r\n    }', ''),
(101107, 101, 1, 'User Input', 'https://youtu.be/sa97IyIOHxU?si=NbB8E2qhvyw69eua', '{\r\n        \"title\": \"User Input in Python\",\r\n        \"content\": {\r\n            \"introduction\": \"In Python, the `input()` function is used to take input from the user. It allows users to provide information while a program is running, which can then be used for further processing or decision-making. User input is always returned as a string, regardless of what the user enters.\",\r\n            \"main_content\": \"### Using the `input()` Function \\nThe `input()` function prompts the user to enter some data. The data entered by the user is then stored as a string. Here’s an example: \\n```python \\nname = input(\"Enter your name: \") \\nprint(f\"Hello, {name}!\") \\n``` \\nIn this example, the user is prompted to enter their name, and the input is stored in the variable `name`. The program then prints a greeting using the provided name. \\n\\n### Converting User Input \\nSince the input is always returned as a string, you may need to convert it into another data type like an integer or float for mathematical operations. This can be done using functions like `int()` or `float()`. Example: \\n```python \\nage = input(\"Enter your age: \") \\nage = int(age)  # Convert the input to an integer \\nprint(f\"You will be {age + 1} next year.\") \\n``` \\nIn this case, the user’s input is converted from a string to an integer to allow for arithmetic operations. \\n\\n### Error Handling with User Input \\nWhen converting input, it\'s important to ensure that the user enters the correct type of data. If the user enters a non-numeric value when an integer is expected, an error will occur. You can handle such errors using a `try` and `except` block: \\n```python \\ntry: \\n    age = int(input(\"Enter your age: \")) \\n    print(f\"You will be {age + 1} next year.\") \\nexcept ValueError: \\n    print(\"Please enter a valid number.\") \\n``` \\nThis way, the program catches the error and provides a friendly message to the user without crashing.\",\r\n            \"conclusion\": \"The `input()` function is an essential tool for interactive programs in Python. It allows users to provide information that can be used within the program. By understanding how to convert user input to the appropriate data type and handle potential errors, you can write more robust and user-friendly applications.\"\r\n        }\r\n    }', ''),
(101108, 101, 1, 'Variables', 'https://youtu.be/a43BIxiZ5EM?si=LTwFWXwUOc_1Al6N', '{\r\n        \"title\": \"Variables in Python\",\r\n        \"content\": {\r\n            \"introduction\": \"Variables are used to store data that can be used and manipulated throughout a Python program. In Python, variables do not require explicit declaration of their type, as Python is dynamically typed. You simply assign a value to a variable, and Python infers the data type automatically.\",\r\n            \"main_content\": \"### Assigning Variables \\nIn Python, assigning a variable is simple. You use the equals sign (`=`) to assign a value to a variable: \\n```python \\nx = 10  # x is an integer \\nname = \\\"Alice\\\"  # name is a string \\nprice = 99.99  # price is a float \\n``` \\nIn this example, `x` holds an integer, `name` holds a string, and `price` holds a floating-point number. \\n\\n### Variable Naming Rules \\n- Variable names must start with a letter or underscore (`_`). \\n- Variable names can contain letters, numbers, and underscores, but cannot start with a number. \\n- Python is case-sensitive, so `myVar` and `myvar` are considered different variables. \\n```python \\nmyVar = 5  # Valid \\n_my_var = \\\"Hello\\\"  # Valid \\n2name = \\\"Bob\\\"  # Invalid, cannot start with a number \\n``` \\n\\n### Updating Variables \\nYou can update the value of a variable at any point in the program. Python allows for reassignment of variable types as well: \\n```python \\nx = 10  # Initially, x is an integer \\nx = \\\"Now I\'m a string\\\"  # x is now a string \\n``` \\nIn Python, variables are dynamically typed, so the type can change based on the assigned value. \\n\\n### Multiple Assignments \\nYou can assign multiple variables in a single line by separating them with commas: \\n```python \\na, b, c = 1, 2, 3 \\n``` \\nAll three variables are assigned their respective values in one line. \\n\\n### Constants \\nBy convention, constant values (variables that should not change) are written in all uppercase letters, although Python does not enforce this behavior: \\n```python \\nPI = 3.14159  # A constant value (by convention) \\n``` \\nAlthough you can technically change `PI`, it\'s a convention to keep it unchanged throughout the program.\",\r\n            \"conclusion\": \"Understanding how to define and use variables is fundamental to working with Python. Variables can store different types of data, and you can easily update, reassign, and manipulate them throughout your program. Following naming conventions and knowing how to handle constants will help keep your code clean and readable.\"\r\n        }\r\n    }', ''),
(101109, 101, 1, 'Exercise 2', 'https://youtu.be/A8aYYz6YGCA?si=MYyLxC1yeA6cM258', '{\r\n        \"title\": \"Exercise 2\",\r\n        \"content\": {\r\n            \"introduction\": \"In this exercise, you\'ll practice using variables, basic operators, and input/output functions in Python. By completing this exercise, you will reinforce your understanding of how to manipulate data in a Python program.\",\r\n            \"main_content\": \"### Problem Statement \\nCreate a simple program that does the following: \\n1. Asks the user for their name. \\n2. Asks the user for two numbers. \\n3. Adds, subtracts, multiplies, and divides the two numbers. \\n4. Displays the results along with a greeting message to the user. \\n\\n### Instructions \\n1. Prompt the user for their name using the `input()` function and store it in a variable. \\n2. Use the `input()` function to get two numbers from the user. Remember that `input()` returns a string, so convert these inputs to integers using the `int()` function. \\n3. Perform the four basic arithmetic operations (addition, subtraction, multiplication, and division) on the numbers. \\n4. Use the `print()` function to display the results of the operations, along with a greeting message that includes the user’s name. \\n\\n### Example Output \\nHere is an example of how the program should behave: \\n```plaintext \\nEnter your name: Alice \\nEnter the first number: 10 \\nEnter the second number: 5 \\n\\nHello, Alice! Here are the results: \\n10 + 5 = 15 \\n10 - 5 = 5 \\n10 * 5 = 50 \\n10 / 5 = 2.0 \\n``` \\n\\n### Hints \\n- Remember to convert the input values to integers using `int()` before performing arithmetic operations. \\n- Use string formatting or f-strings to create well-formatted output that includes the user\'s name and the results of the calculations.\",\r\n            \"conclusion\": \"This exercise is designed to give you hands-on practice with variables, user input, and basic arithmetic operations. Make sure to test your program with different input values to ensure everything works correctly. Once you\'ve completed this exercise, you\'ll be better prepared to handle user input and manipulate data in future Python programs.\"\r\n        }\r\n    }', ''),
(101110, 101, 1, 'Variable Naming Rules', 'https://youtu.be/Vn4RuZ4Y2M0?si=k8ZfFQHDPvZ3S9CL', '{\r\n        \"title\": \"Variables Naming Rules\",\r\n        \"content\": {\r\n            \"introduction\": \"In Python, variable naming rules are essential to understand as they help you create readable and maintainable code. Naming your variables appropriately also avoids potential errors during execution.\",\r\n            \"main_content\": \"### Rules for Naming Variables \\n1. **Characters Allowed:** Variables can include letters (both uppercase and lowercase), digits (0-9), and underscores (_). However, they cannot start with a digit. \\n   - Valid: `my_variable`, `var1`, `a_b_c` \\n   - Invalid: `1variable`, `@var`, `var#` \\n\\n2. **Case Sensitivity:** Variable names are case-sensitive, which means `myVar`, `MyVar`, and `MYVAR` are considered different variables. \\n\\n3. **Reserved Keywords:** You cannot use Python reserved keywords (like `if`, `for`, `while`, `class`, etc.) as variable names. These keywords have special meaning in Python. \\n   - Example of reserved keywords: `False`, `None`, `True`, `and`, `as`, `assert`, `async`, `await`, `break`, `class`, `continue`, `def`, `del`, `elif`, `else`, `except`, `finally`, `for`, `from`, `global`, `if`, `import`, `in`, `is`, `lambda`, `nonlocal`, `not`, `or`, `pass`, `raise`, `return`, `try`, `while`, `with`, `yield` \\n\\n4. **Descriptive Names:** Use meaningful variable names that describe the purpose of the variable. Avoid single-character names except for counters or iterators. \\n   - Good: `total_price`, `student_name`, `user_age` \\n   - Poor: `x`, `y`, `var1` \\n\\n5. **Length:** Variable names can be of any length, but they should be concise yet descriptive enough to convey the purpose of the variable. \\n\\n6. **Underscores for Readability:** You can use underscores to separate words in a variable name, making it more readable (this style is known as snake_case). \\n   - Example: `first_name`, `total_count` \\n\\n### Examples \\nHere are some examples of valid and invalid variable names: \\n- Valid: `age`, `total_cost`, `is_available`, `myList` \\n- Invalid: `1stPlace`, `class`, `my variable` (space is not allowed) \\n\\n### Conclusion \\nBy following these variable naming rules, you can write clearer and more maintainable code. Good naming conventions enhance the readability of your programs and reduce confusion when you or others revisit your code later.\"\r\n        }\r\n    }', ''),
(101111, 101, 2, 'Data Types', 'https://youtu.be/TTepNRy0wj8?si=1ihQFKMB1UQjf14V', '{\r\n        \"title\": \"Data Types\",\r\n        \"content\": {\r\n            \"introduction\": \"In Python, data types are an essential concept as they define the type of data that can be stored and manipulated within the program. Understanding different data types helps in choosing the appropriate type for variables and ensures the correct execution of operations.\",\r\n            \"main_content\": \"### 1. Basic Data Types \\nPython has several built-in data types, which can be classified into the following categories: \\n\\n- **Numeric Types:** \\n  - **int:** Represents integer values. For example, `x = 10`. \\n  - **float:** Represents floating-point numbers (decimal values). For example, `y = 3.14`. \\n  - **complex:** Represents complex numbers, which are expressed as `a + bj`, where `a` is the real part and `b` is the imaginary part. For example, `z = 2 + 3j`. \\n\\n- **Sequence Types:** \\n  - **str:** Represents a sequence of characters (strings). Strings can be defined using single or double quotes, such as `name = \'Alice\'` or `greeting =  \"Hello \"`. \\n  - **list:** A mutable ordered collection of items, which can be of different types. For example, `fruits = [\'apple\', \'banana\', \'cherry\']`. \\n  - **tuple:** An immutable ordered collection of items. For example, `coordinates = (10.0, 20.0)`. \\n\\n- **Mapping Type:** \\n  - **dict:** Represents a collection of key-value pairs. For example, `student = {\'name\': \'John\', \'age\': 20}`. \\n\\n- **Set Types:** \\n  - **set:** An unordered collection of unique items. For example, `unique_numbers = {1, 2, 3, 3}` (the set will only contain `{1, 2, 3}`). \\n  - **frozenset:** An immutable version of a set. For example, `frozen_set = frozenset([1, 2, 3])`. \\n\\n- **Boolean Type:** \\n  - **bool:** Represents `True` or `False` values. For example, `is_valid = True`. \\n\\n### 2. Type Checking and Casting \\nYou can check the type of a variable using the `type()` function. For example: \\n```python \\nx = 5 \\nprint(type(x))  # Outputs: <class \'int\'> \\n``` \\n\\nYou can also convert between data types using type casting. For example: \\n```python \\nfloat_value = float(x)  # Converts int to float \\nstring_value = str(x)    # Converts int to string \\n``` \\n\\n### 3. Conclusion \\nUnderstanding data types in Python is crucial for effective programming. It allows you to choose the right type for your variables and ensures that operations are performed correctly. As you become more familiar with these data types, you can leverage them to write more efficient and clear code.\"\r\n        }\r\n    }', ''),
(101112, 101, 2, 'Type Checking & Type Conversion', 'https://youtu.be/_WY-p2ZKv9Q?si=2Rp4Alx5wj05wmb0', '{\r\n        \"title\": \"Type Checking and Type Conversion\",\r\n        \"content\": {\r\n            \"introduction\": \"Type checking and type conversion are essential concepts in Python that allow you to manage the types of data used in your programs effectively. Understanding how to check and convert types helps prevent errors and ensures that your code functions as intended.\",\r\n            \"main_content\": \"### 1. Type Checking \\nIn Python, you can determine the type of a variable using the built-in `type()` function. This function returns the data type of the specified variable. For example: \\n```python \\nnumber = 10 \\nprint(type(number))  # Outputs: <class \'int\'> \\n``` \\nYou can also use the `isinstance()` function to check if a variable is of a specific type. This is especially useful for validating input data: \\n```python \\nif isinstance(number, int): \\n    print( \"The variable is an integer.\") \\n``` \\n\\n### 2. Type Conversion \\nType conversion (or type casting) is the process of converting one data type into another. Python provides several built-in functions to facilitate this: \\n- **int()**: Converts a value to an integer. For example: \\n```python \\nx =  \"5\" \\nint_x = int(x)  # Converts string to integer \\n``` \\n- **float()**: Converts a value to a floating-point number. For example: \\n```python \\ny =  \"3.14\" \\nfloat_y = float(y)  # Converts string to float \\n``` \\n- **str()**: Converts a value to a string. For example: \\n```python \\nz = 10 \\nstr_z = str(z)  # Converts integer to string \\n``` \\n- **list()**: Converts an iterable (like a string or tuple) to a list. For example: \\n```python \\nmy_tuple = (1, 2, 3) \\nmy_list = list(my_tuple)  # Converts tuple to list \\n``` \\n- **set()**: Converts an iterable to a set, removing duplicate elements. For example: \\n```python \\nmy_list = [1, 2, 2, 3] \\nmy_set = set(my_list)  # Converts list to set \\n``` \\n\\n### 3. Conclusion \\nUnderstanding type checking and type conversion is fundamental in Python programming. It allows you to write more robust and error-free code by ensuring that your data is in the correct format before performing operations. Mastering these concepts will help you handle user inputs effectively and manipulate data confidently.\"\r\n        }\r\n    }', ''),
(101113, 101, 2, 'Exercise 3', 'https://youtu.be/b7QWOgVjj1M?si=-8Ip9Z-R-P854IoJ', '{\r\n        \"title\": \"Exercise 3\",\r\n        \"content\": {\r\n            \"introduction\": \"Exercise 3 focuses on applying the concepts of variables, data types, and type conversion in Python. This exercise aims to help you practice your skills by solving real-world problems using these foundational programming concepts.\",\r\n            \"main_content\": \"### Exercise Objective \\nCreate a small program that asks the user for their name, age, and height, then displays a message that includes this information. Additionally, convert the user\'s age from a string to an integer and their height from a string to a float. \\n\\n### Steps to Complete the Exercise: \\n1. **Ask for User Input**: \\n   - Use the `input()` function to get the user\'s name, age, and height. \\n   - Ensure that you prompt the user with clear instructions. \\n    \\n   Example: \\n   ```python \\n   name = input( \"Enter your name:  \") \\n   age = input( \"Enter your age:  \") \\n   height = input( \"Enter your height in meters:  \") \\n   ``` \\n\\n2. **Type Conversion**: \\n   - Convert the `age` from a string to an integer using `int()`. \\n   - Convert the `height` from a string to a float using `float()`. \\n    \\n   Example: \\n   ```python \\n   age = int(age) \\n   height = float(height) \\n   ``` \\n\\n3. **Display Output**: \\n   - Print a message that includes the user\'s name, age, and height using formatted strings. \\n    \\n   Example: \\n   ```python \\n   print(f\"Hello {name}, you are {age} years old and {height} meters tall.\") \\n   ``` \\n\\n### Example Output \\nAfter completing the exercise, your program should output something like: \\n``` \\nHello Alice, you are 30 years old and 1.75 meters tall. \\n``` \\n\\n### Conclusion \\nThis exercise helps reinforce your understanding of user input, variables, data types, and type conversion in Python. Practicing these concepts is essential for building a strong foundation in programming.\"\r\n        }\r\n    }', ''),
(101114, 101, 2, 'Arithmetic Operators', 'https://youtu.be/kvVPeBBZdtM?si=J2NuU4qCarufeaWo', '{\r\n        \"title\": \"Arithmetic Operators in Python\",\r\n        \"content\": {\r\n            \"introduction\": \"Arithmetic operators in Python are used to perform basic mathematical operations such as addition, subtraction, multiplication, and division. They are applied to numeric values (either literals or variables) to calculate and return new values.\",\r\n            \"main_content\": \"### 1. Types of Arithmetic Operators \\nPython provides several built-in arithmetic operators: \\n\\n- **Addition (+):** Adds two operands. \\n  ```python \\n  a = 10 \\n  b = 5 \\n  result = a + b  # Output: 15 \\n  ``` \\n\\n- **Subtraction (-):** Subtracts the second operand from the first. \\n  ```python \\n  result = a - b  # Output: 5 \\n  ``` \\n\\n- **Multiplication (*):** Multiplies two operands. \\n  ```python \\n  result = a * b  # Output: 50 \\n  ``` \\n\\n- **Division (/):** Divides the first operand by the second and returns a floating-point number. \\n  ```python \\n  result = a / b  # Output: 2.0 \\n  ``` \\n\\n- **Floor Division (//):** Divides and returns the largest possible integer (rounded down). \\n  ```python \\n  result = a // b  # Output: 2 \\n  ``` \\n\\n- **Modulus (%):** Returns the remainder when the first operand is divided by the second. \\n  ```python \\n  result = a % b  # Output: 0 \\n  ``` \\n\\n- **Exponentiation (**):** Raises the first operand to the power of the second. \\n  ```python \\n  result = a ** b  # Output: 100000 \\n  ``` \\n\\n### 2. Order of Operations \\nWhen multiple operators are used in a single expression, Python follows the standard mathematical order of operations, also known as **PEMDAS** (Parentheses, Exponents, Multiplication and Division, Addition and Subtraction). \\n\\nFor example: \\n```python \\nresult = 10 + 2 * 3  # Output: 16 \\n# Multiplication is performed first, then addition \\n``` \\nTo change the order of operations, you can use parentheses: \\n```python \\nresult = (10 + 2) * 3  # Output: 36 \\n``` \\n\\n### 3. Using Arithmetic Operators with Variables \\nYou can also apply these operators to variables, allowing for dynamic calculations based on input or changing values: \\n```python \\na = 20 \\nb = 6 \\nresult = a % b  # Output: 2 \\n``` \\n\\n### 4. Working with Floats and Integers \\nArithmetic operators work with both integers and floating-point numbers. However, the result of division `/` will always be a float, while `//` performs integer division. \\n```python \\nx = 7.5 \\ny = 2 \\nresult = x // y  # Output: 3.0 (Float) \\n``` \\n\\n### 5. Conclusion \\nUnderstanding arithmetic operators is essential for performing calculations in Python. These operators allow for flexible and efficient mathematical operations, from basic arithmetic to more advanced calculations involving variables and complex expressions.\",\r\n            \"conclusion\": \"Arithmetic operators form the foundation of performing mathematical operations in Python. With knowledge of how each operator functions and their precedence, you can manipulate numeric data efficiently and solve a variety of computational problems.\"\r\n        }\r\n    }', ''),
(101115, 101, 2, 'Assignment & Comparison Operators', 'https://youtu.be/ELNIUknegOE?si=Sj-Ke2wSddY3vTPh', '{\r\n        \"title\": \"Assignment & Comparison Operators\",\r\n        \"content\": {\r\n            \"introduction\": \"Assignment and comparison operators in Python are essential tools for variable manipulation and data comparison. Assignment operators allow you to set values to variables, while comparison operators help you compare values, returning either True or False.\",\r\n            \"main_content\": \"### 1. Assignment Operators \\nAssignment operators are used to assign values to variables. The basic assignment operator is the equal sign `=`, but Python also provides shorthand operators for combining assignment with arithmetic operations. \\n\\n- `=` : Assigns the value on the right to the variable on the left. Example: `x = 10` assigns the value 10 to variable `x`. \\n- `+=` : Adds the right operand to the left operand and assigns the result to the left operand. Example: `x += 5` is equivalent to `x = x + 5`. \\n- `-=` : Subtracts the right operand from the left operand. Example: `x -= 2` is equivalent to `x = x - 2`. \\n- `*=` : Multiplies the left operand by the right operand. Example: `x *= 3` is equivalent to `x = x * 3`. \\n- `/=` : Divides the left operand by the right operand. Example: `x /= 4` is equivalent to `x = x / 4`. \\n- `%=` : Takes the modulus of the left operand with the right operand. Example: `x %= 2`. \\n- `**=` : Raises the left operand to the power of the right operand. Example: `x **= 3`. \\n\\n### 2. Comparison Operators \\nComparison operators are used to compare two values or variables. The result of a comparison is either True or False. \\n\\n- `==` : Checks if the values of two operands are equal. Example: `x == y` returns True if `x` is equal to `y`. \\n- `!=` : Checks if the values of two operands are not equal. Example: `x != y` returns True if `x` is not equal to `y`. \\n- `>` : Checks if the left operand is greater than the right operand. Example: `x > y`. \\n- `<` : Checks if the left operand is less than the right operand. Example: `x < y`. \\n- `>=` : Checks if the left operand is greater than or equal to the right operand. Example: `x >= y`. \\n- `<=` : Checks if the left operand is less than or equal to the right operand. Example: `x <= y`.\",\r\n            \"conclusion\": \"Both assignment and comparison operators are key elements in Python that allow you to assign values to variables and perform data comparison. Mastering these operators helps you handle data more effectively in your Python programs.\"\r\n        }\r\n    }', ''),
(101116, 101, 2, 'Logical Operators', 'https://youtu.be/-Mx5popgTtE?si=XalJ9DvWPE7sVa-g', '{\r\n        \"title\": \"Logical Operators\",\r\n        \"content\": {\r\n            \"introduction\": \"Logical operators in Python are used to perform logical operations on variables and expressions. These operators evaluate to either True or False and are often used in conjunction with comparison operators to build complex conditional statements.\",\r\n            \"main_content\": \"### 1. Types of Logical Operators \\nPython provides three logical operators: `and`, `or`, and `not`. These operators allow you to combine or invert the results of comparisons. \\n\\n- **`and`** : Returns True if both operands are True. Otherwise, it returns False. Example: \\n```python \\nx = 5 \\ny = 10 \\nprint(x > 0 and y > 0)  # Returns: True \\nprint(x > 0 and y < 0)  # Returns: False \\``` \\n\\n- **`or`** : Returns True if at least one of the operands is True. It only returns False if both operands are False. Example: \\n```python \\nprint(x > 0 or y < 0)  # Returns: True \\nprint(x < 0 or y < 0)  # Returns: False \\``` \\n\\n- **`not`** : Inverts the Boolean value. If the operand is True, `not` makes it False, and vice versa. Example: \\n```python \\nprint(not(x > 0))  # Returns: False \\nprint(not(x < 0))  # Returns: True \\```\",\r\n            \"conclusion\": \"Logical operators allow you to build more complex conditional expressions by combining multiple conditions. They are a fundamental part of control flow in Python, allowing your programs to make decisions based on multiple factors.\"\r\n        }\r\n    }', ''),
(101117, 101, 2, 'Bitwise Operators', 'https://youtu.be/XbjQ-heGd58?si=CewkLyvKLVrrYiK7', '{\r\n        \"title\": \"Bitwise Operators\",\r\n        \"content\": {\r\n            \"introduction\": \"Bitwise operators in Python are used to perform operations on binary representations of integers. These operators treat operands as sequences of binary digits (bits) and perform operations bit by bit, making them essential in low-level programming and efficient computations.\",\r\n            \"main_content\": \"### 1. Types of Bitwise Operators \\nPython supports several bitwise operators: `AND`, `OR`, `XOR`, `NOT`, `Left Shift`, and `Right Shift`. \\n\\n- **`&` (Bitwise AND):** Compares each bit of two numbers and returns 1 if both bits are 1, otherwise returns 0. \\n```python \\nx = 5  # Binary: 0101 \\ny = 3  # Binary: 0011 \\nprint(x & y)  # Outputs: 1 (Binary: 0001) \\``` \\n\\n- **`|` (Bitwise OR):** Compares each bit of two numbers and returns 1 if at least one bit is 1. \\n```python \\nprint(x | y)  # Outputs: 7 (Binary: 0111) \\``` \\n\\n- **`^` (Bitwise XOR):** Compares each bit of two numbers and returns 1 if the bits are different. \\n```python \\nprint(x ^ y)  # Outputs: 6 (Binary: 0110) \\``` \\n\\n- **`~` (Bitwise NOT):** Inverts all the bits of the number (1 becomes 0, and 0 becomes 1). \\n```python \\nprint(~x)  # Outputs: -6 (Binary: Inverted bits of 0101) \\``` \\n\\n- **`<<` (Left Shift):** Shifts the bits of the number to the left by the specified number of positions. Zero bits are added on the right. \\n```python \\nprint(x << 2)  # Outputs: 20 (Binary: 10100) \\``` \\n\\n- **`>>` (Right Shift):** Shifts the bits of the number to the right by the specified number of positions. The leftmost bits depend on the sign of the number. \\n```python \\nprint(x >> 2)  # Outputs: 1 (Binary: 0001) \\```\",\r\n            \"conclusion\": \"Bitwise operators provide a way to directly manipulate bits in numbers, allowing for fast computations in scenarios like cryptography, image processing, and hardware interface. Understanding these operators can help you optimize performance in certain applications.\"\r\n        }\r\n    }', ''),
(101118, 101, 2, 'Identity Operators', 'https://youtu.be/BG3lg589HRE?si=Am1Z7UodQ0pIzkrF', '{\r\n        \"title\": \"Identity Operators\",\r\n        \"content\": {\r\n            \"introduction\": \"Identity operators in Python are used to compare the memory locations of two objects. These operators help determine if two objects are the same or if they reference the same location in memory. There are two identity operators: `is` and `is not`.\",\r\n            \"main_content\": \"### 1. `is` Operator \\nThe `is` operator checks whether two variables refer to the same object in memory. It returns `True` if they do, and `False` otherwise. \\n\\n```python \\nx = [1, 2, 3] \\ny = x \\nz = [1, 2, 3] \\n\\nprint(x is y)  # Outputs: True (Both refer to the same object in memory) \\nprint(x is z)  # Outputs: False (Although values are the same, they refer to different objects) \\``` \\n\\n### 2. `is not` Operator \\nThe `is not` operator checks if two variables refer to different objects in memory. It returns `True` if they refer to different objects, and `False` if they refer to the same object. \\n\\n```python \\nprint(x is not z)  # Outputs: True (They are different objects) \\nprint(x is not y)  # Outputs: False (They refer to the same object) \\``` \\n\\n### 3. Differences from `==` Operator \\nThe `is` operator differs from the `==` operator, which checks whether the values of two objects are the same, regardless of their memory locations. \\n\\n```python \\nprint(x == z)  # Outputs: True (Values are the same) \\nprint(x is z)  # Outputs: False (Different objects in memory) \\```\",\r\n            \"conclusion\": \"Identity operators are essential for comparing the memory addresses of objects, which can be useful in debugging and optimization. They help ensure that two variables are referencing the same object, not just objects with the same values.\"\r\n        }\r\n    }', ''),
(101119, 101, 2, 'Exercise 4', 'https://youtu.be/0kLylf5uNNc?si=GKAco6hgYsVA1ieM', '{\r\n        \"title\": \"Exercise 4\",\r\n        \"content\": {\r\n            \"introduction\": \"In this exercise, we will practice using identity operators in Python (`is` and `is not`). These operators check if two variables refer to the same object in memory, which is different from checking if they have the same value.\",\r\n            \"main_content\": \"### Task 1: Comparing Lists with `is` and `==` \\nWrite a Python program to create two lists with the same elements and compare them using both the `is` operator and the `==` operator. This will help you understand the difference between checking object identity and checking equality of values. \\n\\nExample: \\n```python \\nlist1 = [10, 20, 30] \\nlist2 = [10, 20, 30] \\n\\n# Compare using == \\nprint(list1 == list2)  # Expected Output: True \\n\\n# Compare using is \\nprint(list1 is list2)  # Expected Output: False \\n``` \\n\\n### Task 2: Identity of Variables Pointing to the Same Object \\nCreate two variables that point to the same object and check if they are identical using the `is` operator. Then modify one variable and check if the identity remains the same. \\n\\nExample: \\n```python \\nx = [1, 2, 3] \\ny = x \\n\\nprint(x is y)  # Expected Output: True \\n\\n# Modify x \\nx.append(4) \\n\\n# Check identity again \\nprint(x is y)  # Expected Output: True \\n``` \\n\\n### Task 3: Using `is not` with Strings \\nCreate two separate string variables with the same value and use the `is not` operator to check if they are different objects in memory. \\n\\nExample: \\n```python \\na =  \"hello \" \\nb =  \"hello \" \\n\\n# Compare using is not \\nprint(a is not b)  # Expected Output: False \\n```\",\r\n            \"conclusion\": \"These tasks help you practice identity operators, which are used to check whether two variables point to the same object in memory. This is particularly useful when working with mutable objects like lists, dictionaries, or when optimizing memory usage.\"\r\n        }\r\n    }', ''),
(101120, 101, 2, 'Membership Operators', 'https://youtu.be/MHl0Jj15crA?si=89HRvG30hdEtWwPl', '{\r\n        \"title\": \"Membership Operators\",\r\n        \"content\": {\r\n            \"introduction\": \"Membership operators in Python are used to test whether a value is found within a sequence, such as strings, lists, tuples, or dictionaries. The two membership operators are `in` and `not in`.\",\r\n            \"main_content\": \"### 1. `in` Operator \\nThe `in` operator returns `True` if the specified value is found within the sequence, otherwise it returns `False`. \\n\\nExample: \\n```python \\n# Example with a list \\nfruits = [\'apple\', \'banana\', \'cherry\'] \\nprint(\'apple\' in fruits)  # Expected Output: True \\n\\n# Example with a string \\nname = \'John Doe\' \\nprint(\'John\' in name)  # Expected Output: True \\n``` \\n\\n### 2. `not in` Operator \\nThe `not in` operator returns `True` if the specified value is not found in the sequence, otherwise it returns `False`. \\n\\nExample: \\n```python \\nnumbers = [1, 2, 3, 4, 5] \\nprint(10 not in numbers)  # Expected Output: True \\n\\n# Example with a string \\ntext = \'Hello World\' \\nprint(\'bye\' not in text)  # Expected Output: True \\n``` \\n\\n### 3. Using Membership Operators with Dictionaries \\nIn dictionaries, the `in` and `not in` operators check if the key is present, not the value. \\n\\nExample: \\n```python \\ndictionary = {\'name\': \'Alice\', \'age\': 25, \'city\': \'New York\'} \\nprint(\'name\' in dictionary)  # Expected Output: True \\nprint(\'Alice\' in dictionary)  # Expected Output: False \\n``` \\n\",\r\n            \"conclusion\": \"Membership operators are useful for checking the presence of elements within sequences. They help you efficiently test whether a value exists in a list, string, tuple, or dictionary, streamlining conditional logic in your code.\"\r\n        }\r\n    }', ''),
(101121, 101, 2, 'Round() Function', 'https://youtu.be/CLjw2nCMpSY?si=7i9RQlpr8iJLIUcF', '{\r\n        \"title\": \"Round() Function\",\r\n        \"content\": {\r\n            \"introduction\": \"The `round()` function in Python is used to round a floating-point number to a specified number of decimal places. It can be particularly useful for formatting numbers in financial applications or when displaying results to users.\",\r\n            \"main_content\": \"### Syntax \\nThe syntax for the `round()` function is as follows: \\n```python \\nround(number, ndigits) \\n``` \\n- **number**: The number you want to round. \\n- **ndigits** (optional): The number of decimal places to round to. If omitted, it rounds to the nearest integer. \\n \\n### Examples \\n#### 1. Rounding to the Nearest Integer \\n```python \\nresult = round(5.7) \\nprint(result)  # Expected Output: 6 \\n``` \\n#### 2. Rounding to a Specified Number of Decimal Places \\n```python \\nresult = round(5.6789, 2) \\nprint(result)  # Expected Output: 5.68 \\n``` \\n#### 3. Rounding Negative Numbers \\n```python \\nresult = round(-2.5) \\nprint(result)  # Expected Output: -2 \\n``` \\n#### 4. Rounding to Zero Decimal Places \\n```python \\nresult = round(5.6789, 0) \\nprint(result)  # Expected Output: 6.0 \\n``` \\n#### 5. Rounding with Ties \\nThe `round()` function uses \'round half to even\' strategy. For example: \\n```python \\nresult1 = round(2.5) \\nresult2 = round(3.5) \\nprint(result1)  # Expected Output: 2 \\nprint(result2)  # Expected Output: 4 \\n``` \\n\",\r\n            \"conclusion\": \"The `round()` function is a simple yet powerful tool for controlling the precision of floating-point numbers in Python. By understanding how to use it effectively, you can ensure that your numerical outputs are formatted to meet the needs of your applications or users.\"\r\n        }\r\n    }', '');
INSERT INTO `python_course` (`id`, `course_id`, `level`, `topic_name`, `video_url`, `articles`, `created_at`) VALUES
(101122, 101, 2, 'F-Strings in Python', 'https://youtu.be/xGkF9Y38Gsc?si=MwA2J3uscLzTLWh2', '{\r\n        \"title\": \"F-Strings in Python\",\r\n        \"content\": {\r\n            \"introduction\": \"F-strings (formatted string literals) were introduced in Python 3.6 as a convenient way to embed expressions inside string literals. They are a more readable and concise way to format strings compared to older methods like `format()` or `%` formatting.\",\r\n            \"main_content\": \"### Syntax \\nAn f-string is created by prefixing a string with the letter `f` or `F`, and expressions are placed inside curly braces `{}` within the string. \\n\\nExample: \\n```python \\nname = \'Alice\' \\nage = 30 \\nprint(f\'My name is {name} and I am {age} years old.\') \\n``` \\nExpected Output: \\n``` \\nMy name is Alice and I am 30 years old. \\n``` \\n\\n### 1. Embedding Expressions \\nF-strings allow you to embed any valid Python expression inside the curly braces. \\n\\nExample: \\n```python \\nx = 5 \\nprint(f\'2 times {x} is {2 * x}\') \\n``` \\nExpected Output: \\n``` \\n2 times 5 is 10 \\n``` \\n\\n### 2. Using Functions Inside F-Strings \\nYou can even call functions inside an f-string. \\n\\nExample: \\n```python \\ndef greet(name): \\n    return f\'Hello, {name}!\' \\n\\nprint(f\'{greet( \'Alice \')}, welcome to the party!\') \\n``` \\nExpected Output: \\n``` \\nHello, Alice!, welcome to the party! \\n``` \\n\\n### 3. Formatting Numbers \\nF-strings make it easy to format numbers by specifying the format directly inside the curly braces. \\n\\nExample: \\n```python \\nvalue = 1234.56789 \\nprint(f\'The value is {value:.2f}\')  # Format with 2 decimal places \\n``` \\nExpected Output: \\n``` \\nThe value is 1234.57 \\n``` \\n\\n### 4. F-Strings with Dictionaries \\nYou can also access dictionary keys inside an f-string. \\n\\nExample: \\n```python \\nperson = {\'name\': \'Bob\', \'age\': 40} \\nprint(f\'{person[ \'name \']} is {person[ \'age \']} years old.\') \\n``` \\nExpected Output: \\n``` \\nBob is 40 years old. \\n``` \\n\\n### 5. Multi-Line F-Strings \\nF-strings can be used with triple quotes for multi-line strings. \\n\\nExample: \\n```python \\nname = \'Charlie\' \\nage = 25 \\nprint(f\'\'\' \\nName: {name} \\nAge: {age} \\n\'\'\') \\n``` \\nExpected Output: \\n``` \\nName: Charlie \\nAge: 25 \\n```\",\r\n            \"conclusion\": \"F-strings are a powerful and user-friendly way to format strings in Python. They improve the readability of code by embedding expressions directly into strings, making them a preferred choice for string formatting in modern Python code.\"\r\n        }\r\n    }', ''),
(101123, 101, 2, 'Exercise 5', 'https://youtu.be/O2V97JC8zOY?si=AvNIIXKxw8Bc6fm3', '{\r\n        \"title\": \"Exercise 5: Working with Strings in Python\",\r\n        \"content\": {\r\n            \"introduction\": \"In this exercise, you will practice various string operations in Python. This includes string manipulation techniques such as concatenation, slicing, and formatting. These skills are essential for any Python programmer.\",\r\n            \"main_content\": \"### Exercise Tasks \\n1. **String Concatenation**: Create two strings, `first_name` and `last_name`, and concatenate them to form a full name. \\n   ```python \\n   first_name = \'John\' \\n   last_name = \'Doe\' \\n   full_name = first_name + \' \' + last_name \\n   print(full_name) \\n   ``` \\n\\n2. **String Slicing**: Given the string `text = \'Hello, World!\'`, slice the string to extract the word \'World\'. \\n   ```python \\n   text = \'Hello, World!\' \\n   word = text[7:12] \\n   print(word) \\n   ``` \\n\\n3. **String Formatting**: Use f-strings to create a formatted string that includes a variable `age`. For example, if `age = 30`, the output should be \'I am 30 years old.\' \\n   ```python \\n   age = 30 \\n   formatted_string = f\'I am {age} years old.\' \\n   print(formatted_string) \\n   ``` \\n\\n4. **Count Occurrences**: Given the string `sentence = \'The quick brown fox jumps over the lazy dog\'`, count how many times the letter \'o\' appears in the string. \\n   ```python \\n   sentence = \'The quick brown fox jumps over the lazy dog\' \\n   count_o = sentence.count(\'o\') \\n   print(count_o) \\n   ``` \\n\\n5. **Replace Substring**: Replace the word \'dog\' with \'cat\' in the string `sentence` from the previous task and print the new sentence. \\n   ```python \\n   new_sentence = sentence.replace(\'dog\', \'cat\') \\n   print(new_sentence) \\n   ``` \\n\",\r\n            \"conclusion\": \"Completing these tasks will enhance your understanding of string manipulation in Python. Strings are fundamental data types that you will work with frequently, so mastering these operations is crucial for your programming skills.\"\r\n        }\r\n    }', ''),
(101124, 101, 2, 'if-else Statements', 'https://youtu.be/MMzXz7EDTZM?si=8fI4R8GZLV1jOexU', '{\r\n        \"title\": \"If-Else Statements in Python\",\r\n        \"content\": {\r\n            \"introduction\": \"If-else statements are a fundamental aspect of programming in Python, allowing for conditional execution of code based on boolean expressions. They help control the flow of a program by executing different code paths depending on whether a condition is true or false.\",\r\n            \"main_content\": \"### 1. Basic Syntax \\nThe basic syntax of an if-else statement in Python is as follows: \\n```python \\nif condition: \\n    # code to execute if condition is true \\nelse: \\n    # code to execute if condition is false \\n``` \\n \\n### 2. Example of If-Else \\nHere’s a simple example to determine if a number is positive or negative: \\n```python \\nnumber = -5 \\nif number >= 0: \\n    print(\'The number is positive.\') \\nelse: \\n    print(\'The number is negative.\') \\n``` \\n \\n### 3. If-Elif-Else Statement \\nYou can also chain multiple conditions using `elif`: \\n```python \\nnumber = 0 \\nif number > 0: \\n    print(\'The number is positive.\') \\nelif number < 0: \\n    print(\'The number is negative.\') \\nelse: \\n    print(\'The number is zero.\') \\n``` \\n \\n### 4. Nested If Statements \\nIf-else statements can be nested inside other if-else statements: \\n```python \\nage = 18 \\nif age >= 18: \\n    print(\'You are an adult.\') \\n    if age >= 65: \\n        print(\'You are a senior citizen.\') \\nelse: \\n    print(\'You are a minor.\') \\n``` \\n \\n### 5. Using Logical Operators \\nYou can use logical operators (`and`, `or`, `not`) to combine multiple conditions: \\n```python \\nage = 20 \\nif age >= 18 and age < 65: \\n    print(\'You are an adult and not a senior citizen.\') \\nelse: \\n    print(\'You are either a minor or a senior citizen.\') \\n``` \\n\",\r\n            \"conclusion\": \"Understanding if-else statements is essential for controlling the flow of your Python programs. They allow you to make decisions in your code, enabling more complex and responsive applications. Practice using if-else statements to enhance your problem-solving skills in programming.\"\r\n        }\r\n    }', ''),
(101125, 101, 2, 'Exercise 6', 'https://youtu.be/WOvtTLePD3M?si=nYhU99qQom5YzSju', '{\r\n        \"title\": \"Exercise 6: If-Else Statements\",\r\n        \"content\": {\r\n            \"introduction\": \"In this exercise, you will practice using if-else statements in Python to solve a problem. The goal is to apply conditional logic to make decisions based on user input.\",\r\n            \"main_content\": \"### Problem Statement \\nWrite a Python program that asks the user for their age and determines whether they are eligible to vote. A user must be at least 18 years old to vote. \\n\\n### Requirements: \\n1. Prompt the user to enter their age. \\n2. Use an if-else statement to check if the user is 18 or older. \\n3. If the user is 18 or older, print \'You are eligible to vote.\' \\n4. If the user is younger than 18, print \'You are not eligible to vote.\' \\n\\n### Example Output: \\n``` \\nEnter your age: 20 \\nYou are eligible to vote. \\n``` \\n``` \\nEnter your age: 16 \\nYou are not eligible to vote. \\n``` \\n\\n### Tips: \\n- Remember to convert the user input to an integer using `int()` before performing the comparison. \\n- You can use comments in your code to explain your logic. \\n\",\r\n            \"conclusion\": \"By completing this exercise, you will gain hands-on experience with if-else statements in Python. This foundational skill is crucial for creating interactive programs that respond to user input.\"\r\n        }\r\n    }', ''),
(101126, 101, 2, 'Nested if & elif', 'https://youtu.be/7498T9qPygI?si=ZpCK0EHhqjump3QT', '{\r\n        \"title\": \"Nested If and Elif Statements in Python\",\r\n        \"content\": {\r\n            \"introduction\": \"Nested if and elif statements allow for more complex decision-making in Python programming. By placing one if statement inside another, you can evaluate multiple conditions and execute code based on the results of those evaluations.\",\r\n            \"main_content\": \"### 1. Basic Syntax of Nested If Statements \\nNested if statements allow you to check a condition inside another condition: \\n```python \\nif condition1: \\n    if condition2: \\n        # code to execute if both condition1 and condition2 are true \\n    else: \\n        # code to execute if condition1 is true but condition2 is false \\nelse: \\n    # code to execute if condition1 is false \\n``` \\n\\n### 2. Example of Nested If \\nHere’s an example that checks if a person is eligible to vote based on their age and citizenship: \\n```python \\nage = 20 \\ncitizen = True \\nif age >= 18: \\n    if citizen: \\n        print(\'You are eligible to vote.\') \\n    else: \\n        print(\'You are not eligible to vote because you are not a citizen.\') \\nelse: \\n    print(\'You are not eligible to vote because you are too young.\') \\n``` \\n\\n### 3. Using Elif with Nested If \\nYou can also combine elif statements with nested if statements to check multiple conditions: \\n```python \\nscore = 85 \\nif score >= 90: \\n    print(\'Grade: A\') \\nelif score >= 80: \\n    if score >= 85: \\n        print(\'Grade: B+\') \\n    else: \\n        print(\'Grade: B\') \\nelif score >= 70: \\n    print(\'Grade: C\') \\nelse: \\n    print(\'Grade: F\') \\n``` \\n\\n### 4. Practical Example \\nHere’s a practical example that categorizes people based on age groups: \\n```python \\nage = 45 \\nif age < 13: \\n    print(\'You are a child.\') \\nelif age < 20: \\n    print(\'You are a teenager.\') \\nelif age < 65: \\n    if age < 40: \\n        print(\'You are a young adult.\') \\n    else: \\n        print(\'You are an adult.\') \\nelse: \\n    print(\'You are a senior citizen.\') \\n``` \\n\",\r\n            \"conclusion\": \"Nested if and elif statements are powerful tools for creating complex conditional logic in your Python programs. They allow you to evaluate multiple conditions, making your applications more dynamic and responsive to user inputs. Practice using nested structures to strengthen your understanding of conditional logic.\"\r\n        }\r\n    }', ''),
(101127, 101, 2, 'Exercise 7', 'https://youtu.be/a3n_9k06dY8?si=TAlEWyFVcf8fgOuH', '{\r\n        \"title\": \"Exercise 7: Nested If and Elif Statements\",\r\n        \"content\": {\r\n            \"introduction\": \"In this exercise, you will practice using nested if and elif statements in Python. This will help you understand how to control the flow of your program based on multiple conditions.\",\r\n            \"main_content\": \"### Exercise Instructions \\n1. **Problem Statement:** Write a program that checks a person\'s age and determines whether they are a child, teenager, adult, or senior citizen based on the following criteria: \\n   - Ages 0-12: Child \\n   - Ages 13-19: Teenager \\n   - Ages 20-64: Adult \\n   - Ages 65 and above: Senior Citizen \\n\\n2. **Steps to Follow:** \\n   - Prompt the user to enter their age. \\n   - Use nested if and elif statements to classify the age into one of the four categories. \\n   - Print the appropriate message based on the user\'s age. \\n\\n### Example Output \\n``` \\nEnter your age: 30 \\nYou are an adult. \\n``` \\n### Sample Code Structure \\nYou can use the following structure to get started: \\n```python \\n# Get the user\'s age \\nage = int(input(\'Enter your age: \')) \\n \\n# Classify the age \\nif age < 0: \\n    print(\'Invalid age\') \\nelif age <= 12: \\n    print(\'You are a child.\') \\nelif age <= 19: \\n    print(\'You are a teenager.\') \\nelif age <= 64: \\n    print(\'You are an adult.\') \\nelse: \\n    print(\'You are a senior citizen.\') \\n``` \\n\",\r\n            \"conclusion\": \"Completing this exercise will reinforce your understanding of nested if and elif statements. Experiment with different age inputs to see how your program responds. Remember to handle edge cases, such as invalid age inputs.\"\r\n        }\r\n    }', ''),
(101128, 101, 2, 'Exercise 8', 'https://youtu.be/sY6j_UR3pGI?si=1Sn-sARGwcX0SBPB', '{\r\n        \"title\": \"Exercise 8: For Loops and Range Function\",\r\n        \"content\": {\r\n            \"introduction\": \"In this exercise, you will practice using for loops in Python along with the range function. This will help you understand how to iterate over a sequence of numbers.\",\r\n            \"main_content\": \"### Exercise Instructions \\n1. **Problem Statement:** Write a program that prints the numbers from 1 to 10, along with their squares. \\n\\n2. **Steps to Follow:** \\n   - Use a for loop to iterate through the numbers from 1 to 10. \\n   - For each number, calculate its square and print both the number and its square. \\n\\n### Example Output \\n``` \\nNumber: 1, Square: 1 \\nNumber: 2, Square: 4 \\nNumber: 3, Square: 9 \\n... \\nNumber: 10, Square: 100 \\n``` \\n### Sample Code Structure \\nYou can use the following structure to get started: \\n```python \\n# Loop through numbers from 1 to 10 \\nfor num in range(1, 11): \\n    square = num ** 2  # Calculate the square \\n    print(f\'Number: {num}, Square: {square}\') \\n``` \\n\",\r\n            \"conclusion\": \"Completing this exercise will enhance your understanding of for loops and the range function in Python. Try modifying the range to print numbers in different intervals or calculate cubes instead of squares.\"\r\n        }\r\n    }', ''),
(101129, 101, 2, 'Multiple if Statements', 'https://youtu.be/O3MA3Hn7c2E?si=Xrij2ZIVVH9kFd3Z', '{\r\n        \"title\": \"Multiple If Statements\",\r\n        \"content\": {\r\n            \"introduction\": \"In Python, multiple if statements can be used to check various conditions independently. Each if statement is evaluated separately, allowing for more complex decision-making in your code.\",\r\n            \"main_content\": \"### Overview of Multiple If Statements \\n- **Syntax:** The basic structure of multiple if statements involves writing separate if conditions that execute independently of one another. \\n- **Use Case:** This is useful when you want to perform different actions based on different conditions without relying on else or elif statements. \\n\\n### Example Code \\n```python \\n# Define a variable \\nnumber = 10 \\n\\n# Multiple if statements \\nif number > 0: \\n    print(\'The number is positive.\') \\nif number < 0: \\n    print(\'The number is negative.\') \\nif number == 0: \\n    print(\'The number is zero.\') \\n``` \\n### Explanation: \\n1. The program checks if `number` is greater than 0 and prints the corresponding message. \\n2. It checks if `number` is less than 0, and if so, it prints a different message. \\n3. Finally, it checks if `number` equals 0, printing yet another message. \\n\\n### Important Note \\n- Each if statement runs independently, so you may get multiple outputs if multiple conditions are true. \\n- It’s often more efficient to use `elif` for mutually exclusive conditions, but multiple if statements are useful when conditions are not exclusive. \\n\",\r\n            \"conclusion\": \"Understanding how to use multiple if statements in Python allows you to create flexible and responsive programs. You can easily expand your logic with additional conditions as needed.\"\r\n        }\r\n    }', ''),
(101130, 101, 2, 'Exercise 9', 'https://youtu.be/9OwSWGguQXs?si=NBsVcwT32mwRrYTs', '{\r\n        \"title\": \"Exercise 9\",\r\n        \"content\": {\r\n            \"introduction\": \"Exercise 9 focuses on enhancing your understanding of decision-making in Python using conditional statements. In this exercise, you will implement multiple if statements to create a simple program that categorizes input based on certain criteria.\",\r\n            \"main_content\": \"### Task Description \\nWrite a Python program that prompts the user for their age and then determines the life stage they belong to: \\n- If the user is less than 13 years old, print \'You are a child.\' \\n- If the user is between 13 and 19 years old, print \'You are a teenager.\' \\n- If the user is between 20 and 64 years old, print \'You are an adult.\' \\n- If the user is 65 years or older, print \'You are a senior.\' \\n\\n### Example Code \\n```python \\n# Get user input \\nage = int(input(\'Enter your age: \')) \\n\\n# Determine life stage \\nif age < 13: \\n    print(\'You are a child.\') \\nif 13 <= age <= 19: \\n    print(\'You are a teenager.\') \\nif 20 <= age <= 64: \\n    print(\'You are an adult.\') \\nif age >= 65: \\n    print(\'You are a senior.\') \\n``` \\n### Explanation: \\n1. The program first takes the user\'s age as input. \\n2. It then checks the age against multiple conditions independently, printing the corresponding message for the life stage. \\n3. Each condition is evaluated separately, so even if the user input were to match multiple conditions, only the relevant message would be displayed. \\n\\n### Tips: \\n- Ensure to convert the user input to an integer since the input function returns a string. \\n- Test the program with different ages to see how it responds in each scenario. \\n\",\r\n            \"conclusion\": \"Completing this exercise will solidify your understanding of how to implement multiple if statements in your programs, giving you the ability to handle various input scenarios effectively.\"\r\n        }\r\n    }', ''),
(101131, 101, 2, 'Exercise 10', 'https://youtu.be/iRF5AB1VRS8?si=3ZasHZP2umSR5Lhj', '{\r\n        \"title\": \"Exercise 10\",\r\n        \"content\": {\r\n            \"introduction\": \"Exercise 10 continues to build on your skills with conditional statements in Python. This exercise will require you to utilize both if-else statements and logical operators to create a more complex decision-making structure.\",\r\n            \"main_content\": \"### Task Description \\nCreate a Python program that determines whether a person is eligible for a driver\'s license based on their age and whether they have passed the written test. The eligibility criteria are as follows: \\n- The person must be at least 18 years old. \\n- The person must have passed the written test. \\n\\n### Example Code \\n```python \\n# Get user input \\nage = int(input(\'Enter your age: \')) \\npassed_test = input(\'Have you passed the written test? (yes/no): \').strip().lower() \\n\\n# Determine eligibility \\nif age >= 18 and passed_test == \'yes\': \\n    print(\'You are eligible for a driver\'s license.\') \\nelse: \\n    print(\'You are not eligible for a driver\'s license.\') \\n``` \\n### Explanation: \\n1. The program prompts the user to enter their age and whether they have passed the written test. \\n2. It checks if the age is 18 or older and if the user has passed the test using a logical AND operator. \\n3. Based on the conditions, it prints the corresponding message regarding eligibility. \\n\\n### Tips: \\n- Make sure to handle user input properly, including case sensitivity for the test result. \\n- Test the program with different ages and test results to ensure it works as expected. \\n\",\r\n            \"conclusion\": \"This exercise helps you understand how to combine conditions using logical operators, allowing for more nuanced decision-making in your programs.\"\r\n        }\r\n    }', ''),
(101132, 101, 2, '(List Function)', 'https://youtu.be/1tnFQDo05hQ?si=gny896_ZaJFrRYch', '{\r\n        \"title\": \"List Functions in Python\",\r\n        \"content\": {\r\n            \"introduction\": \"In Python, lists are a versatile data structure that allows you to store a collection of items. Various built-in functions and methods enable you to manipulate lists efficiently. This article covers essential list functions, how to use them, and practical examples.\",\r\n            \"main_content\": \"### 1. Creating a List \\nYou can create a list by placing items inside square brackets `[]` separated by commas. \\n```python \\nmy_list = [1, 2, 3, 4, 5] \\n``` \\n \\n### 2. Accessing List Items \\nAccess items using their index, starting from 0. \\n```python \\nfirst_item = my_list[0]  # Returns 1 \\n``` \\n \\n### 3. Adding Items to a List \\n- **append()**: Adds an item to the end of the list. \\n```python \\nmy_list.append(6)  # my_list is now [1, 2, 3, 4, 5, 6] \\n``` \\n- **insert()**: Adds an item at a specified index. \\n```python \\nmy_list.insert(0, 0)  # my_list is now [0, 1, 2, 3, 4, 5, 6] \\n``` \\n \\n### 4. Removing Items from a List \\n- **remove()**: Removes the first occurrence of a specified item. \\n```python \\nmy_list.remove(3)  # my_list is now [0, 1, 2, 4, 5, 6] \\n``` \\n- **pop()**: Removes an item at a specified index (or the last item if no index is provided). \\n```python \\nlast_item = my_list.pop()  # Removes 6, my_list is now [0, 1, 2, 4, 5] \\n``` \\n \\n### 5. Sorting a List \\n- **sort()**: Sorts the list in ascending order. \\n```python \\nmy_list.sort()  # my_list is now [0, 1, 2, 4, 5] \\n``` \\n- **sorted()**: Returns a new sorted list without changing the original list. \\n```python \\nsorted_list = sorted(my_list)  # sorted_list is [0, 1, 2, 4, 5] \\n``` \\n \\n### 6. Other Useful Functions \\n- **len()**: Returns the number of items in the list. \\n```python \\nlength = len(my_list)  # Returns 5 \\n``` \\n- **count()**: Returns the number of times an item appears in the list. \\n```python \\ncount_of_twos = my_list.count(2)  # Returns how many times 2 appears \\n``` \\n- **index()**: Returns the index of the first occurrence of an item. \\n```python \\nindex_of_four = my_list.index(4)  # Returns the index of 4 \\n``` \\n \\n### Example of Using List Functions \\n```python \\n# Example list \\nfruits = [\'apple\', \'banana\', \'cherry\'] \\n \\n# Adding a fruit \\nfruits.append(\'orange\') \\n \\n# Removing a fruit \\nfruits.remove(\'banana\') \\n \\n# Sorting the list \\nfruits.sort() \\n \\n# Print the final list \\nprint(fruits)  # Output: [\'apple\', \'cherry\', \'orange\'] \\n```\",\r\n            \"conclusion\": \"Understanding list functions is essential for effective data manipulation in Python. By mastering these functions, you can create more efficient and powerful programs that handle collections of data with ease.\"\r\n        }\r\n    }', ''),
(101133, 101, 2, 'Random Module in Python', 'https://youtu.be/khZKoe0_B0I?si=bQntJcHjx-xPDep-', '{\r\n        \"title\": \"Random Module in Python\",\r\n        \"content\": {\r\n            \"introduction\": \"The Random module in Python provides various functions to generate random numbers and perform random selections. This module is widely used in applications such as simulations, games, and data analysis where randomness is required.\",\r\n            \"main_content\": \"### 1. Importing the Random Module \\nTo use the Random module, you need to import it first: \\n```python \\nimport random \\n``` \\n \\n### 2. Generating Random Numbers \\n- **random.random()**: Returns a random floating-point number between 0.0 and 1.0. \\n```python \\nrandom_float = random.random()  # Example: 0.37444887175646646 \\n``` \\n- **random.randint(a, b)**: Returns a random integer N such that a <= N <= b. \\n```python \\nrandom_integer = random.randint(1, 10)  # Example: 7 \\n``` \\n- **random.uniform(a, b)**: Returns a random floating-point number between a and b. \\n```python \\nrandom_uniform = random.uniform(1.0, 10.0)  # Example: 4.798865090914457 \\n``` \\n \\n### 3. Random Selections \\n- **random.choice(seq)**: Returns a randomly selected element from a non-empty sequence. \\n```python \\nitems = [\'apple\', \'banana\', \'cherry\'] \\nrandom_choice = random.choice(items)  # Example: \'banana\' \\n``` \\n- **random.sample(population, k)**: Returns a list of k unique elements chosen from the population sequence. \\n```python \\nrandom_sample = random.sample(range(1, 100), 5)  # Example: [34, 78, 45, 12, 99] \\n``` \\n- **random.shuffle(x)**: Shuffles the sequence x in place. \\n```python \\ndeck = [\'Ace\', \'King\', \'Queen\', \'Jack\'] \\nrandom.shuffle(deck)  # Deck is now shuffled \\n``` \\n \\n### 4. Example of Using the Random Module \\n```python \\nimport random \\n \\n# Generating random numbers \\nprint(random.random())  # Random float \\nprint(random.randint(1, 100))  # Random integer between 1 and 100 \\n \\n# Randomly choosing an item \\nfruits = [\'apple\', \'banana\', \'cherry\', \'date\'] \\nprint(random.choice(fruits))  # Random fruit \\n \\n# Shuffling a list \\nnumbers = [1, 2, 3, 4, 5] \\nrandom.shuffle(numbers) \\nprint(numbers)  # Shuffled list \\n```\",\r\n            \"conclusion\": \"The Random module is a powerful tool in Python for generating random numbers and making random selections. By understanding and utilizing its functions, you can enhance your programs with elements of unpredictability, making them more dynamic and engaging.\"\r\n        }\r\n    }', ''),
(101134, 101, 2, 'Exercise 11', 'https://youtu.be/7niNK-917fI?si=jXgt3JVPjS-IucHI', '{\r\n        \"title\": \"Exercise 11: Using the Random Module\",\r\n        \"content\": {\r\n            \"introduction\": \"In this exercise, you will practice using the Random module in Python to perform various tasks involving random number generation and random selections. This will help reinforce your understanding of how to utilize randomness in programming.\",\r\n            \"main_content\": \"### Task 1: Generate Random Numbers \\n1. Import the Random module. \\n2. Generate a random float between 0.0 and 1.0 and print it. \\n3. Generate a random integer between 1 and 100 and print it. \\n4. Generate a random float between 10.0 and 20.0 and print it. \\n \\n### Task 2: Random Selections \\n1. Create a list of your favorite fruits. \\n2. Use the `random.choice()` function to select and print a random fruit from your list. \\n3. Create a list of numbers from 1 to 50. \\n4. Use `random.sample()` to select and print 5 unique numbers from the list. \\n \\n### Task 3: Shuffle a List \\n1. Create a list of your favorite colors. \\n2. Use `random.shuffle()` to shuffle the list in place and print the shuffled list. \\n \\n### Example Code: \\n```python \\nimport random \\n \\n# Task 1: Generate Random Numbers \\nrandom_float = random.random() \\nrandom_integer = random.randint(1, 100) \\nrandom_uniform = random.uniform(10.0, 20.0) \\nprint(f\"Random Float: {random_float}\") \\nprint(f\"Random Integer: {random_integer}\") \\nprint(f\"Random Uniform Float: {random_uniform}\") \\n \\n# Task 2: Random Selections \\nfruits = [\'apple\', \'banana\', \'cherry\', \'date\', \'elderberry\'] \\nrandom_fruit = random.choice(fruits) \\nnumbers = list(range(1, 51)) \\nrandom_numbers = random.sample(numbers, 5) \\nprint(f\"Random Fruit: {random_fruit}\") \\nprint(f\"Random Numbers: {random_numbers}\") \\n \\n# Task 3: Shuffle a List \\ncolors = [\'red\', \'blue\', \'green\', \'yellow\', \'purple\'] \\nrandom.shuffle(colors) \\nprint(f\"Shuffled Colors: {colors}\") \\n```\",\r\n            \"conclusion\": \"By completing this exercise, you will have gained hands-on experience in generating random numbers and making random selections in Python. This knowledge is essential for creating dynamic applications and simulations that require randomness.\"\r\n        }\r\n    }', ''),
(101135, 101, 2, 'Exercise 12', 'https://youtu.be/ORMBycShqnc?si=qmfI1wtsjJaf7DOG', '{\r\n        \"title\": \"Exercise 12: Working with Lists\",\r\n        \"content\": {\r\n            \"introduction\": \"In this exercise, you will practice various operations on lists in Python. Lists are versatile data structures that allow you to store multiple items in a single variable. You will learn how to create, manipulate, and access elements in a list.\",\r\n            \"main_content\": \"### Task 1: Create a List \\n1. Create a list of your favorite movies. \\n2. Print the list. \\n \\n### Task 2: Access List Elements \\n1. Print the first movie in your list. \\n2. Print the last movie in your list. \\n3. Print a sublist containing the second and third movies. \\n \\n### Task 3: Modify the List \\n1. Add a new movie to the end of your list. \\n2. Remove a movie from your list by its name. \\n3. Replace the first movie in your list with a new title. \\n \\n### Task 4: List Operations \\n1. Create a list of numbers. \\n2. Calculate the sum of all numbers in the list. \\n3. Find the maximum and minimum numbers in the list. \\n4. Sort the list in ascending order. \\n \\n### Example Code: \\n```python \\n# Task 1: Create a List \\nfavorite_movies = [\'Inception\', \'The Matrix\', \'Interstellar\', \'The Dark Knight\'] \\nprint(f \"Favorite Movies: {favorite_movies}\") \\n \\n# Task 2: Access List Elements \\nprint(f \"First Movie: {favorite_movies[0]}\") \\nprint(f \"Last Movie: {favorite_movies[-1]}\") \\nprint(f \"Sublist: {favorite_movies[1:3]}\") \\n \\n# Task 3: Modify the List \\nfavorite_movies.append(\'Avatar\')  # Adding a new movie \\nfavorite_movies.remove(\'The Matrix\')  # Removing a movie \\nfavorite_movies[0] = \'Titanic\'  # Replacing the first movie \\nprint(f \"Modified Movies: {favorite_movies}\") \\n \\n# Task 4: List Operations \\nnumbers = [5, 2, 9, 1, 5, 6] \\nsum_numbers = sum(numbers) \\nmax_number = max(numbers) \\nmin_number = min(numbers) \\nnumbers.sort() \\nprint(f \"Sum: {sum_numbers}\") \\nprint(f \"Max: {max_number}\") \\nprint(f \"Min: {min_number}\") \\nprint(f \"Sorted Numbers: {numbers}\") \\n```\",\r\n            \"conclusion\": \"Completing this exercise will help you become proficient in using lists in Python. You\'ll learn how to create, access, modify, and perform operations on lists, which are fundamental skills for any Python programmer.\"\r\n        }\r\n    }', ''),
(101136, 101, 2, 'Index Error', 'https://youtu.be/wpmXETzX6xc?si=RN39-YBIZmlBsjs1', '{\r\n        \"title\": \"Exercise 12: Working with Lists\",\r\n        \"content\": {\r\n            \"introduction\": \"In this exercise, you will practice various operations on lists in Python. Lists are versatile data structures that allow you to store multiple items in a single variable. You will learn how to create, manipulate, and access elements in a list.\",\r\n            \"main_content\": \"### Task 1: Create a List \\n1. Create a list of your favorite movies. \\n2. Print the list. \\n \\n### Task 2: Access List Elements \\n1. Print the first movie in your list. \\n2. Print the last movie in your list. \\n3. Print a sublist containing the second and third movies. \\n \\n### Task 3: Modify the List \\n1. Add a new movie to the end of your list. \\n2. Remove a movie from your list by its name. \\n3. Replace the first movie in your list with a new title. \\n \\n### Task 4: List Operations \\n1. Create a list of numbers. \\n2. Calculate the sum of all numbers in the list. \\n3. Find the maximum and minimum numbers in the list. \\n4. Sort the list in ascending order. \\n \\n### Example Code: \\n```python \\n# Task 1: Create a List \\nfavorite_movies = [\'Inception\', \'The Matrix\', \'Interstellar\', \'The Dark Knight\'] \\nprint(f \"Favorite Movies: {favorite_movies}\") \\n \\n# Task 2: Access List Elements \\nif favorite_movies:  # Check if the list is not empty \\n    print(f \"First Movie: {favorite_movies[0]}\") \\n    print(f \"Last Movie: {favorite_movies[-1]}\") \\n    print(f \"Sublist: {favorite_movies[1:3]}\") \\nelse: \\n    print(\"The movie list is empty.\") \\n \\n# Task 3: Modify the List \\nfavorite_movies.append(\'Avatar\')  # Adding a new movie \\nif \'The Matrix\' in favorite_movies: \\n    favorite_movies.remove(\'The Matrix\')  # Removing a movie \\nfavorite_movies[0] = \'Titanic\'  # Replacing the first movie \\nprint(f \"Modified Movies: {favorite_movies}\") \\n \\n# Task 4: List Operations \\nnumbers = [5, 2, 9, 1, 5, 6] \\nsum_numbers = sum(numbers) \\nmax_number = max(numbers) \\nmin_number = min(numbers) \\nnumbers.sort() \\nprint(f \"Sum: {sum_numbers}\") \\nprint(f \"Max: {max_number}\") \\nprint(f \"Min: {min_number}\") \\nprint(f \"Sorted Numbers: {numbers}\") \\n```\",\r\n            \"conclusion\": \"Completing this exercise will help you become proficient in using lists in Python. You will learn how to create, access, modify, and perform operations on lists, which are fundamental skills for any Python programmer.\"\r\n        }\r\n    }', ''),
(101137, 101, 2, 'Nested List', 'https://youtu.be/KEpmUPxxjxI?si=fQkF3MOo_cVwBYQg', '{\r\n        \"title\": \"Nested Lists\",\r\n        \"content\": {\r\n            \"introduction\": \"Nested lists are lists that contain other lists as their elements. This data structure is useful for representing complex data and allows you to create multidimensional arrays. In Python, you can easily create and manipulate nested lists to store related data together.\",\r\n            \"main_content\": \"### Creating Nested Lists \\nYou can create a nested list by including lists within another list. For example: \\n```python \\nnested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \\n```   \\nThis creates a list with three sublists. \\n \\n### Accessing Elements \\nTo access elements in a nested list, you can use multiple indices. For instance: \\n```python \\nprint(nested_list[0])  # Outputs: [1, 2, 3] \\nprint(nested_list[1][2])  # Outputs: 6 (element at row 1, column 2) \\n```   \\nHere, `nested_list[1][2]` accesses the third element of the second sublist. \\n \\n### Modifying Nested Lists \\nYou can modify elements in nested lists just like you would in a regular list: \\n```python \\nnested_list[2][0] = 10  # Changes the first element of the third sublist to 10 \\nprint(nested_list)  # Outputs: [[1, 2, 3], [4, 5, 6], [10, 8, 9]] \\n```   \\n### Iterating Over Nested Lists \\nYou can iterate through nested lists using nested loops: \\n```python \\nfor sublist in nested_list: \\n    for item in sublist: \\n        print(item, end=) \\n# Outputs: 1 2 3 4 5 6 10 8 9 \\n```   \\n### Example Use Case \\nNested lists are particularly useful for representing matrices or grids. For example, a 3x3 matrix can be represented as: \\n```python \\nmatrix = [[1, 2, 3], \\n          [4, 5, 6], \\n          [7, 8, 9]] \\n```   \\nYou can perform various operations on this matrix, such as transposition or matrix multiplication. \\n \\n### Conclusion \\nNested lists provide a powerful way to organize complex data in Python. By understanding how to create, access, modify, and iterate through nested lists, you can handle multidimensional data structures effectively.\"\r\n        }\r\n    }', ''),
(101138, 101, 2, 'Exercise 13', 'https://youtu.be/jTIODDVCAus?si=8amHwNld9wo7Tbk8', '{\r\n        \"title\": \"Exercise 13\",\r\n        \"content\": {\r\n            \"introduction\": \"In this exercise, you will practice working with nested lists in Python. Nested lists allow you to organize complex data and perform various operations, making them an essential part of data manipulation in Python.\",\r\n            \"main_content\": \"### Task Description \\nCreate a nested list that represents a classroom of students. Each sublist should contain the names and scores of three students in a particular subject. Your nested list should look like this: \\n```python \\nclassroom = [ \\n    [\'Alice\', 85, 90, 78], \\n    [\'Bob\', 92, 88, 95], \\n    [\'Charlie\', 79, 85, 91] \\n] \\n``` \\n \\n### Steps to Follow: \\n1. **Create the Nested List**: Initialize the nested list with student names and their scores in three subjects. \\n2. **Access Student Data**: Print the name and scores of each student using a loop. \\n3. **Calculate Average Scores**: Write a function to calculate and print the average score for each student. \\n4. **Identify Top Scorer**: Write logic to determine which student has the highest average score. \\n \\n### Sample Code \\nHere\'s a sample solution to get you started: \\n```python \\nclassroom = [ \\n    [\'Alice\', 85, 90, 78], \\n    [\'Bob\', 92, 88, 95], \\n    [\'Charlie\', 79, 85, 91] \\n] \\n \\n# Accessing and printing student data \\nfor student in classroom: \\n    name = student[0] \\n    scores = student[1:] \\n    print(f\'Student: {name}, Scores: {scores}\') \\n \\n# Function to calculate average score \\ndef calculate_average(scores): \\n    return sum(scores) / len(scores) \\n \\n# Calculate and print average scores \\nfor student in classroom: \\n    name = student[0] \\n    average_score = calculate_average(student[1:]) \\n    print(f\'{name} Average Score: {average_score:.2f}\') \\n \\n# Determine the top scorer \\ntop_scorer = max(classroom, key=lambda x: calculate_average(x[1:])) \\nprint(f\'Top Scorer: {top_scorer[0]} with an average score of {calculate_average(top_scorer[1:]):.2f}\') \\n``` \\n \\n### Conclusion \\nCompleting this exercise will enhance your understanding of nested lists, loops, and functions in Python. Working with nested structures is crucial for data analysis and manipulation, and this exercise provides a practical approach to mastering these concepts.\"\r\n        }\r\n    }', ''),
(101139, 101, 2, 'Project #1 Rock Paper Scissors Game', 'https://youtu.be/Qcefu1jVPds?si=aeixyOmr_kphV2nu', '{\r\n        \"title\": \"Project #1 Rock Paper Scissors Game\",\r\n        \"content\": {\r\n            \"introduction\": \"The Rock Paper Scissors game is a classic hand game that is often played between two people. It is a simple yet engaging game where each player simultaneously forms one of three shapes with their hand. This project aims to implement this game in Python, allowing the user to play against the computer.\",\r\n            \"main_content\": \"### Project Overview \\nIn this project, you will create a Rock Paper Scissors game that allows users to choose one of the three options (rock, paper, or scissors), and the computer will randomly select one as well. The winner is determined based on the standard rules: \\n- Rock crushes Scissors \\n- Scissors cuts Paper \\n- Paper covers Rock \\n \\n### Steps to Build the Game: \\n1. **Import Required Libraries**: Use the `random` library to allow the computer to make random selections. \\n2. **Define the Game Logic**: Create a function that determines the winner based on user input and computer choice. \\n3. **User Input**: Prompt the user to enter their choice. \\n4. **Computer Choice**: Generate a random choice for the computer. \\n5. **Determine the Winner**: Compare the user’s choice with the computer’s choice to declare the winner. \\n6. **Play Again Option**: Ask the user if they want to play again after each round. \\n \\n### Sample Code \\nHere’s a simple implementation of the game: \\n```python \\nimport random \\n \\ndef determine_winner(user_choice, computer_choice): \\n    if user_choice == computer_choice: \\n        return  \"It\'s a tie!\" \\n    elif (user_choice == \'rock\' and computer_choice == \'scissors\') or \\n         (user_choice == \'scissors\' and computer_choice == \'paper\') or \\n         (user_choice == \'paper\' and computer_choice == \'rock\'): \\n        return  \"You win!\" \\n    else: \\n        return  \"Computer wins!\" \\n \\n# Main game loop \\nwhile True: \\n    user_choice = input(\"Enter rock, paper, or scissors: \").lower() \\n    if user_choice not in [\'rock\', \'paper\', \'scissors\']: \\n        print(\"Invalid choice! Please try again.\") \\n        continue \\n    computer_choice = random.choice([\'rock\', \'paper\', \'scissors\']) \\n    print(f\'Computer chose: {computer_choice}\') \\n    result = determine_winner(user_choice, computer_choice) \\n    print(result) \\n    play_again = input(\"Do you want to play again? (yes/no): \").lower() \\n    if play_again != \'yes\': \\n        break \\n``` \\n \\n### Conclusion \\nThis project is a great way to practice your Python skills by implementing basic programming concepts like loops, conditionals, and functions. Once you are comfortable with the basic game, you can extend its functionality by adding features such as score tracking, input validation, or even a graphical user interface.\"\r\n        }\r\n    }', ''),
(101140, 101, 2, 'Tuples', 'https://youtu.be/zLFituJxj6c?si=WV8kFiqcs6vkQvnM', '{\r\n    \"title\": \"Tuples\",\r\n    \"content\": {\r\n        \"introduction\": \"Tuples are a built-in data structure in Python that allows you to store multiple items in a single variable. They are similar to lists but have some key differences that make them a useful choice in certain situations. Unlike lists, tuples are immutable, meaning once they are created, their values cannot be changed or modified.\",\r\n        \"main_content\": \"### 1. Creating Tuples\\nTuples can be created by placing the items inside parentheses `()` separated by commas. Here are a few examples:\\n```python\\n# Creating a tuple\\nmy_tuple = (1, 2, 3)\\n# Tuple with different data types\\nmixed_tuple = (1, \'hello\', 3.14, True)\\n# A tuple with a single element (note the comma)\\nsingle_element_tuple = (1,)\\n```\\n\\n### 2. Accessing Tuple Elements\\nYou can access elements in a tuple using indexing. The index starts at `0` for the first element:\\n```python\\nprint(my_tuple[0])  # Outputs: 1\\nprint(mixed_tuple[1])  # Outputs: \'hello\'\\n```\\n\\n### 3. Tuple Operations\\nTuples support various operations, including:\\n- **Concatenation**: You can concatenate two tuples using the `+` operator.\\n```python\\nnew_tuple = my_tuple + mixed_tuple\\n```\\n- **Repetition**: You can repeat a tuple using the `*` operator.\\n```python\\nrepeated_tuple = my_tuple * 2  # (1, 2, 3, 1, 2, 3)\\n```\\n\\n### 4. Tuple Methods\\nTuples have a few built-in methods, including:\\n- **count()**: Returns the number of occurrences of a specified value.\\n```python\\nmy_tuple = (1, 2, 3, 2)\\nprint(my_tuple.count(2))  # Outputs: 2\\n```\\n- **index()**: Returns the index of the first occurrence of a specified value.\\n```python\\nprint(my_tuple.index(3))  # Outputs: 2\\n```\\n\\n### 5. Why Use Tuples?\\nTuples are often preferred over lists when you want to ensure that the data remains constant throughout the program. They can be used as keys in dictionaries due to their immutability, while lists cannot be used as dictionary keys. Additionally, tuples can be slightly more memory-efficient than lists due to their fixed size.\\n\\n### Conclusion\\nIn summary, tuples are a fundamental data structure in Python that can help you store and manage data effectively. Understanding when to use tuples versus lists can improve your programming skills and lead to more efficient code.\"\r\n    }\r\n}', ''),
(101141, 101, 2, 'Sets', 'https://youtu.be/eEbTvbG3los?si=3R_ci6ungBBQ5JfD', '{\r\n    \"title\": \"Sets\",\r\n    \"content\": {\r\n        \"introduction\": \"Sets are a built-in data structure in Python that allows you to store an unordered collection of unique items. They are defined using curly braces `{}` or the `set()` function. Sets are mutable, meaning you can add and remove elements after the set is created. However, since they do not allow duplicate values, any repeated items will only appear once.\",\r\n        \"main_content\": \"### 1. Creating Sets\nYou can create a set by placing items inside curly braces or by using the `set()` constructor. Here are some examples:\n```python\n# Creating a set using curly braces\nmy_set = {1, 2, 3}\n# Creating a set using the set() function\nanother_set = set([1, 2, 2, 3])  # Duplicates are ignored, so another_set will be {1, 2, 3}\n```\n\n### 2. Common Set Operations\nSets support various operations:\n- **Add an element:** You can add an item using the `add()` method.\n    ```python\n    my_set.add(4)  # my_set now contains {1, 2, 3, 4}\n    ```\n- **Remove an element:** Use the `remove()` method to delete an item. If the item does not exist, a KeyError will be raised.\n    ```python\n    my_set.remove(2)  # my_set now contains {1, 3, 4}\n    ```\n- **Check for membership:** Use the `in` keyword to check if an item exists in the set.\n    ```python\n    if 1 in my_set:\n        print(\"1 is in the set\")\n    ```\n\n### 3. Set Methods\nPython provides several built-in methods for sets:\n- **union(other_set)**: Returns a new set with all elements from the original and the specified set.\n    ```python\n    union_set = my_set.union(another_set)  # Combines both sets\n    ```\n- **intersection(other_set)**: Returns a new set with elements that are common to both sets.\n    ```python\n    intersection_set = my_set.intersection(another_set)\n    ```\n- **difference(other_set)**: Returns a new set with elements in the first set but not in the second set.\n    ```python\n    difference_set = my_set.difference(another_set)\n    ```\n\n### Conclusion\nIn conclusion, sets are a valuable data structure in Python that allows for efficient handling of unique collections of items. They support a variety of methods for adding, removing, and performing mathematical operations on their elements. By utilizing sets, you can ensure that your data remains unique and manage it effectively, which is essential for many programming tasks. Understanding how to leverage the features of sets will enhance your ability to write cleaner and more efficient code.\"\r\n    }\r\n}', ''),
(101142, 101, 2, 'Sets Method in Python', 'https://youtu.be/eEbTvbG3los?si=Kw5lrmSIK2nWLnxH', '{\r\n    \"title\": \"Exercise 12: Working with Lists\",\r\n    \"content\": {\r\n        \"introduction\": \"In this exercise, you will practice various operations on lists in Python. Lists are versatile data structures that allow you to store multiple items in a single variable. You will learn how to create, manipulate, and access elements in a list.\",\r\n        \"main_content\": \"### Task 1: Create a List\\n1. Create a list of your favorite movies.\\n2. Print the list.\\n\\n### Task 2: Access List Elements\\n1. Print the first movie in your list.\\n2. Print the last movie in your list.\\n3. Print a sublist containing the second and third movies.\\n\\n### Task 3: Modify the List\\n1. Add a new movie to the end of your list.\\n2. Remove a movie from your list by its name.\\n3. Replace the first movie in your list with a new title.\\n\\n### Task 4: List Operations\\n1. Create a list of numbers.\\n2. Calculate the sum of all numbers in the list.\\n3. Find the maximum and minimum numbers in the list.\\n4. Sort the list in ascending order.\\n\\n### Example Code:\\n```python\\nfavorite_movies = [\"Inception\", \"The Matrix\", \"Interstellar\", \"The Dark Knight\"]\\nprint(f\"Favorite Movies: {favorite_movies}\")\\n\\nif favorite_movies:  # Check if the list is not empty\\n    print(f\"First Movie: {favorite_movies[0]}\")\\n    print(f\"Last Movie: {favorite_movies[-1]}\")\\n    print(f\"Sublist: {favorite_movies[1:3]}\")\\nelse:\\n    print(\"The movie list is empty.\")\\n\\nfavorite_movies.append(\"Avatar\")  # Adding a new movie\\nif \"The Matrix\" in favorite_movies:\\n    favorite_movies.remove(\"The Matrix\")  # Removing a movie\\nfavorite_movies[0] = \"Titanic\"  # Replacing the first movie\\nprint(f\"Modified Movies: {favorite_movies}\")\\n\\nnumbers = [5, 2, 9, 1, 5, 6]\\nsum_numbers = sum(numbers)\\nmax_number = max(numbers)\\nmin_number = min(numbers)\\nnumbers.sort()\\nprint(f\"Sum: {sum_numbers}\")\\nprint(f\"Max: {max_number}\")\\nprint(f\"Min: {min_number}\")\\nprint(f\"Sorted Numbers: {numbers}\")\\n```\",\r\n        \"conclusion\": \"Completing this exercise will help you become proficient in using lists in Python. You all learn how to create, access, modify, and perform operations on lists, which are fundamental skills for any Python programmer.\"\r\n    }\r\n}', '');
INSERT INTO `python_course` (`id`, `course_id`, `level`, `topic_name`, `video_url`, `articles`, `created_at`) VALUES
(101143, 101, 2, 'For Loop', 'https://youtu.be/k4R7FwL2XYA?si=tFKgUnS_-DyknECg', '{\r\n    \"title\": \"For Loop\",\r\n    \"content\": {\r\n        \"introduction\": \"In Python, a for loop is a control flow statement used to iterate over a sequence (like a list, tuple, dictionary, set, or string). It allows you to execute a block of code multiple times, which is especially useful for processing items in a collection or performing repetitive tasks.\",\r\n        \"main_content\": \"### Syntax of For Loop\nThe basic syntax of a for loop in Python is as follows:\n```python\nfor variable in sequence:\n    # code to execute\n```\n\n### Example Code\nHere’s a simple example of using a for loop to iterate through a list of numbers and print each number:\n```python\nnumbers = [1, 2, 3, 4, 5]\nfor number in numbers:\n    print(number)\n```\n\n### Using For Loop with Range\nYou can also use the `range()` function to generate a sequence of numbers:\n```python\nfor i in range(5):  # Generates numbers from 0 to 4\n    print(i)\n```\n\n### Nested For Loops\nFor loops can be nested inside other for loops. Here’s an example of a nested for loop that prints a multiplication table:\n```python\nfor i in range(1, 4):\n    for j in range(1, 4):\n        print(f\"{i} x {j} = {i * j}\")\n```\n\n### List Comprehensions\nFor loops can also be used in a more concise way with list comprehensions. Here’s an example of creating a new list with squares of numbers:\n```python\nsquares = [x ** 2 for x in range(10)]\nprint(squares)\n```\",\r\n        \"conclusion\": \"For loops are a fundamental aspect of Python programming, enabling efficient iteration over data structures. Mastering for loops will enhance your coding skills, allowing you to automate repetitive tasks and manipulate collections of data effectively.\"\r\n    }\r\n}', ''),
(101144, 101, 2, 'For-Else Loop', 'https://youtu.be/jDJ718e-YIw?si=_v8v8ECOlJHElgG3', '{\r\n    \"title\": \"For-Else Loop\",\r\n    \"content\": {\r\n        \"introduction\": \"In Python, a `for-else` loop is a combination of a `for` loop and an `else` clause. The `else` block is executed after the `for` loop completes normally, meaning it iterates over all items in the sequence without encountering a `break` statement. If a `break` is encountered, the `else` block is skipped.\",\r\n        \"main_content\": \"### Syntax of For-Else Loop\\nThe syntax of a `for-else` loop is as follows: \\n```python\\nfor variable in sequence:\\n    # code to execute\\n    if condition:\\n        break\\nelse:\\n    # code to execute if no break\\n```\\n\\n### Example Code\\nHere’s an example where the `else` block is executed if no item in the sequence is divisible by 7: \\n```python\\nnumbers = [1, 2, 3, 4, 5]\\nfor number in numbers:\\n    if number % 7 == 0:\\n        print(\"Found a number divisible by 7\")\\n        break\\nelse:\\n    print(\"No number divisible by 7 found\")\\n```\\n\\n### Use Case\\nThe `for-else` construct is useful when searching for an item in a sequence. The `else` block will run only if the item is not found, providing a clear way to handle search failures without using a flag variable.\",\r\n        \"conclusion\": \"The `for-else` loop in Python offers an elegant solution when you need to execute code after a loop completes successfully (without `break`). It simplifies handling cases like searching for an item in a list and executing a block of code only if the search fails.\"\r\n    }\r\n}', ''),
(101145, 101, 2, 'Exercise 14', 'https://youtu.be/u-Ptydkqh7E?si=eQu_wZvDOx2IwmiH', '{\r\n    \"title\": \"For-Else Loop - Exercise 14\",\r\n    \"content\": {\r\n        \"introduction\": \"In this exercise, you will practice using the `for-else` loop to search for specific elements in a list. The goal is to understand how the `else` block works in conjunction with the `for` loop and how it can simplify logic when searching for items.\",\r\n        \"main_content\": \"### Problem Statement\\nYou are given a list of integers. Your task is to write a Python program that checks whether any number in the list is divisible by both 3 and 5. If such a number is found, print the number and stop the loop. If no number is found after checking all the elements, print a message saying no number is divisible by both 3 and 5. \\n\\n### Example Input\\nHere’s an example input list: \\n```python\\nnumbers = [1, 2, 4, 10, 12, 15, 7, 19] \\n```\\n\\n### Expected Output\\nFor the input above, your program should output: \\n```python\\nFound a number divisible by both 3 and 5: 15 \\n```\\nIf no number is found, the output should be: \\n```python\\nNo number divisible by both 3 and 5 found\\n```\\n\\n### Instructions\\n1. Create a list of integers.\\n2. Use a `for` loop to iterate through the list.\\n3. In the loop, check if any number is divisible by both 3 and 5 using the modulo operator `%`.\\n4. If such a number is found, print it and terminate the loop using `break`.\\n5. Use the `else` block to print a message if no number divisible by both 3 and 5 is found.\",\r\n        \"conclusion\": \"This exercise demonstrates how the `for-else` loop can be used for searching and provides an elegant way to handle both successful and unsuccessful searches without using additional flag variables.\"\r\n    }\r\n}', ''),
(101146, 101, 2, 'Exercise 15', 'https://youtu.be/rzMdf7cmHc0?si=nxVkbAwxXl3lvLTg', '{\r\n    \"title\": \"For-Else Loop - Exercise 15\",\r\n    \"content\": {\r\n        \"introduction\": \"In this exercise, you will continue practicing the `for-else` loop by working with prime numbers. You will write a program that checks if a given number is prime, using the `for-else` loop to elegantly handle the logic without extra flag variables.\",\r\n        \"main_content\": \"### Problem Statement\\nWrite a Python program that checks if a given number is prime. A prime number is a number greater than 1 that has no divisors other than 1 and itself. The program should use a `for-else` loop to iterate through possible divisors and determine if the number is prime. \\n\\n### Example Input\\nGiven the following number: \\n```python\\nnum = 29 \\n```\\n\\n### Expected Output\\nFor the input above, your program should output: \\n```python\\n29 is a prime number. \\n```\\nIf the number is not prime, the output should be: \\n```python\\nNot a prime number. \\n```\\n\\n### Instructions\\n1. Take an integer input (greater than 1).\\n2. Use a `for` loop to iterate through potential divisors from 2 up to the square root of the number.\\n3. If a divisor is found, print that the number is not prime and terminate the loop using `break`.\\n4. Use the `else` block to print that the number is prime if no divisors are found.\",\r\n        \"conclusion\": \"This exercise helps you understand how to use the `for-else` loop in Python to check for prime numbers. It shows how the `else` block is executed only if the loop completes without encountering a `break`, which is useful when searching for factors of a number.\"\r\n    }\r\n}', ''),
(101147, 101, 2, 'Range Function', 'https://youtu.be/YNDgutH6gjs?si=bc2PioVDbUwDDv5z', '{\r\n    \"title\": \"Range Function\",\r\n    \"content\": {\r\n        \"introduction\": \"In Python, the `range()` function generates a sequence of numbers and is commonly used in loops to iterate over a specific range. It is especially useful when you need a sequence of numbers to control the number of iterations in a loop.\",\r\n        \"main_content\": \"### Syntax of Range Function\\nThe basic syntax of the `range()` function is as follows: \\n```python\\nrange(start, stop, step)\\n```\\n\\n- `start` (optional): The starting number of the sequence. Defaults to 0.\\n- `stop` (required): The number at which the sequence stops (exclusive).\\n- `step` (optional): The difference between each number in the sequence. Defaults to 1.\\n\\n### Example Code\\nHere are a few examples of using the `range()` function: \\n\\n#### Example 1: Simple range\\n```python\\nfor i in range(5):  # Generates numbers from 0 to 4\\n    print(i)\\n```\\n\\n#### Example 2: Specifying start and stop\\n```python\\nfor i in range(2, 7):  # Generates numbers from 2 to 6\\n    print(i)\\n```\\n\\n#### Example 3: Using a step value\\n```python\\nfor i in range(1, 10, 2):  # Generates numbers 1, 3, 5, 7, 9\\n    print(i)\\n```\\n\\n### Working with Negative Values\\nYou can also use negative numbers in `range()` to create a sequence that decreases: \\n```python\\nfor i in range(10, 0, -1):  # Generates numbers from 10 to 1\\n    print(i)\\n```\\n\",\r\n        \"conclusion\": \"The `range()` function is a powerful and flexible tool for generating sequences of numbers. It is often used with loops to control iterations, and its ability to accept start, stop, and step arguments allows for a wide variety of use cases.\"\r\n    }\r\n}', ''),
(101148, 101, 2, 'Exercise 16', 'https://youtu.be/sI_Wb3JPQg8?si=A96tmLpdIcj6iEPM', '{\r\n    \"title\": \"Range Function - Exercise\",\r\n    \"content\": {\r\n        \"introduction\": \"In this exercise, you will practice using the `range()` function to generate sequences of numbers. The goal is to apply your understanding of the `start`, `stop`, and `step` parameters in different scenarios.\",\r\n        \"main_content\": \"### Problem Statement\\nWrite a Python program that uses the `range()` function to generate a sequence of even numbers from 0 to 20 and print them. Then, use the `range()` function again to generate a sequence of odd numbers from 1 to 19.\\n\\n### Example Input\\nNo specific input is required for this exercise, as you will define the ranges within the program.\\n\\n### Expected Output\\nFor the even numbers, your program should output: \\n```python\\n0\\n2\\n4\\n6\\n8\\n10\\n12\\n14\\n16\\n18\\n20\\n```\\nFor the odd numbers, the output should be: \\n```python\\n1\\n3\\n5\\n7\\n9\\n11\\n13\\n15\\n17\\n19\\n```\\n\",\r\n        \"conclusion\": \"This exercise reinforces your understanding of the `range()` function in Python. By generating both even and odd sequences, you will gain practical experience in applying the parameters of the `range()` function and working with loops.\"\r\n    }\r\n}', ''),
(101149, 101, 2, 'Exercise 17', 'https://youtu.be/nxYOmS7p6qY?si=OkU0VCI4ey8D5Umd', '{\r\n    \"title\": \"Range Function - Exercise 17\",\r\n    \"content\": {\r\n        \"introduction\": \"In this exercise, you will practice using the `range()` function to generate sequences of numbers. The goal is to apply your understanding of the `start`, `stop`, and `step` parameters in different scenarios.\",\r\n        \"main_content\": \"### Problem Statement\\nWrite a Python program that uses the `range()` function to: \\n1. Generate a sequence of multiples of 5 from 5 to 50 and print them. \\n2. Generate a sequence of numbers in reverse from 10 to 1 and print them. \\n3. Create a list of squares of even numbers from 0 to 20 and print that list. \\n\\n### Example Input\\nNo specific input is required for this exercise, as you will define the ranges within the program. \\n\\n### Expected Output\\nFor the multiples of 5, your program should output: \\n```python\\n5\\n10\\n15\\n20\\n25\\n30\\n35\\n40\\n45\\n50\\n```\\nFor the reverse numbers, the output should be: \\n```python\\n10\\n9\\n8\\n7\\n6\\n5\\n4\\n3\\n2\\n1\\n```\\nAnd for the list of squares: \\n```python\\n[0, 4, 16, 36, 64, 100, 144, 196, 256, 324]  # Squares of 0, 2, 4, 6, 8, 10, 12, 14, 16, 18\\n```\\n\",\r\n        \"conclusion\": \"This exercise reinforces your understanding of the `range()` function in Python. By generating different sequences and transformations, you will gain practical experience in applying the parameters of the `range()` function and working with loops.\"\r\n    }\r\n}', ''),
(101150, 101, 2, 'Project # 2 Password Generator', 'https://youtu.be/hGuA9WKTtRs?si=ybG_4AIHFKYm_S7w', '{\r\n    \"title\": \"Project # 2 Password Generator\",\r\n    \"content\": {\r\n        \"introduction\": \"In this project, you will create a password generator in Python. The objective is to understand how to work with strings, randomization, and user input to create strong passwords.\",\r\n        \"main_content\": \"### Problem Statement\\nWrite a Python program that generates a random password based on user-defined criteria. You should allow the user to specify: \\n1. The length of the password. \\n2. Whether to include uppercase letters. \\n3. Whether to include lowercase letters. \\n4. Whether to include numbers. \\n5. Whether to include special characters. \\n\\n### Example Input\\n- Length: 12\\n- Include uppercase: Yes\\n- Include lowercase: Yes\\n- Include numbers: Yes\\n- Include special characters: No\\n\\n### Expected Output\\nYour program should output a randomly generated password based on the specified criteria. Example output: \\n```python\\nA1b2C3d4E5\\n```\\n### Instructions\\n1. Use the `random` module to generate random choices from the character sets.\\n2. Create character sets for uppercase letters, lowercase letters, digits, and special characters.\\n3. Combine the selected character sets based on user input.\\n4. Generate a password of the specified length using random selections from the combined character set.\",\r\n        \"conclusion\": \"This project will help you practice working with strings and randomization in Python. You will learn how to create a user-friendly program that generates strong passwords based on specific criteria.\"\r\n    }\r\n}', ''),
(101151, 101, 2, 'While Loop', 'https://youtu.be/KOfCkEIxh_o?si=p4WQRzIYfHZ8YbvQ', '{\r\n    \"title\": \"While Loop - Exercise\",\r\n    \"content\": {\r\n        \"introduction\": \"In this exercise, you will practice using the `while` loop to control the flow of your program. The goal is to understand how to use the loop effectively, especially when the number of iterations is not predetermined.\",\r\n        \"main_content\": \"### Problem Statement\\nWrite a Python program that uses a `while` loop to: \\n1. Prompt the user to enter a number and keep asking until the user enters a negative number. For each valid number entered (non-negative), print the square of that number. \\n2. Implement a simple menu system where the user can enter options to perform different tasks, such as: \\n   - Option 1: Print  \\\"Hello, World!\\\" \\n   - Option 2: Print the current date and time. \\n   - Option 3: Exit the program. \\n\\n### Example Input\\n```plaintext\\nEnter a number (negative to stop): 5 \\n25 \\nEnter a number (negative to stop): 3 \\n9 \\nEnter a number (negative to stop): -1 \\n```\\nFor the menu system, example interaction: \\n```plaintext\\nChoose an option: \\n1: Print greeting \\n2: Print current date \\n3: Exit \\nEnter choice: 1 \\nHello, World! \\n```\",\r\n        \"conclusion\": \"This exercise reinforces your understanding of the `while` loop in Python. By implementing user input and creating interactive programs, you will gain practical experience in controlling program flow and handling conditions.\"\r\n    }\r\n}', ''),
(101152, 101, 2, 'Break Continue Pass', 'https://youtu.be/DpE5TJNNb9Q?si=nnfCNaLdZrPCOY6F', '{\r\n    \"title\": \"Break, Continue, Pass\",\r\n    \"content\": {\r\n        \"introduction\": \"In Python, `break`, `continue`, and `pass` are control flow statements that alter the behavior of loops. Understanding how to use these statements can help you manage the flow of your programs more effectively.\",\r\n        \"main_content\": \"### Break Statement\\nThe `break` statement is used to exit a loop prematurely when a certain condition is met. It stops the loop and transfers control to the statement immediately following the loop.\\n\\n#### Example Code\\n```python\\nfor i in range(10):\\n    if i == 5:\\n        break  # Exit the loop when i is 5\\n    print(i)\\n```\\n\\n### Continue Statement\\nThe `continue` statement is used to skip the current iteration of a loop and move to the next iteration. It does not terminate the loop but skips the remaining code in the current iteration.\\n\\n#### Example Code\\n```python\\nfor i in range(10):\\n    if i % 2 == 0:\\n        continue  # Skip even numbers\\n    print(i)\\n```\\n\\n### Pass Statement\\nThe `pass` statement is a null operation; it is used when a statement is syntactically required but you do not want to execute any code. It can be useful as a placeholder in your code.\\n\\n#### Example Code\\n```python\\nfor i in range(5):\\n    if i == 3:\\n        pass  # Do nothing for i == 3\\n    print(i)\\n```\\n\\n### Conclusion\\nUnderstanding `break`, `continue`, and `pass` will enhance your control over loops in Python. These statements can be used to handle complex logic within loops, making your code cleaner and more efficient.\"\r\n    }\r\n}', ''),
(101153, 101, 2, 'Indentation', 'https://youtu.be/xVndqyPFu-k?si=ArmUGB_edAHnU1-q', '{\r\n    \"title\": \"Indentation\",\r\n    \"content\": {\r\n        \"introduction\": \"In Python, indentation is crucial for defining the structure and flow of your code. Unlike many other programming languages that use braces or keywords to define code blocks, Python uses indentation to indicate a block of code, such as that within loops, conditionals, and function definitions.\",\r\n        \"main_content\": \"### Importance of Indentation\\nIndentation improves the readability of your code and helps to define the scope of loops, conditionals, and functions. Inconsistent indentation can lead to errors or unexpected behavior in your program.\\n\\n### Example Code\\nHere’s a simple example demonstrating correct indentation: \\n```python\\nif True:\\n    print( \"This is indented \")  # This line is part of the if statement\\n    for i in range(3):\\n        print(i)  # This line is part of the for loop\\nprint( \"This is not indented \")  # This line is outside of the if and for blocks\\n```\\n\\n### Common Indentation Errors\\n1. **Mixed Spaces and Tabs**: Using both spaces and tabs for indentation can cause `IndentationError`. It is recommended to use spaces consistently, as per PEP 8 guidelines.\\n2. **Inconsistent Indentation**: All lines in the same block must be indented the same amount. Different indentation levels can confuse the interpreter.\\n\\n### Best Practices\\n- Use 4 spaces per indentation level (recommended by PEP 8).\\n- Avoid mixing tabs and spaces for indentation.\\n- Configure your text editor to insert spaces when the tab key is pressed.\",\r\n        \"conclusion\": \"Mastering indentation is essential for writing clean, readable, and error-free Python code. Proper indentation not only prevents syntax errors but also makes your code easier to understand and maintain.\"\r\n    }\r\n}', ''),
(101154, 101, 2, 'Hanagama Game For Beginners Part1', 'https://youtu.be/dIFRJe2uHB4?si=9IOcREZ7Ev59jZng', '{\r\n    \"title\": \"Hanagama Game For Beginners - Part 1\",\r\n    \"content\": {\r\n        \"introduction\": \"Hanagama is a traditional Japanese game that offers a fun and engaging way to develop strategic thinking and enhance problem-solving skills. In this part, we will introduce the basic rules and mechanics of the game, making it accessible for beginners.\",\r\n        \"main_content\": \"### Overview of Hanagama\\nHanagama is played on a square grid, typically with 9x9 squares. The objective of the game is to create a specific arrangement of pieces that satisfies the winning conditions defined at the start of the game.\\n\\n### Game Components\\n1. **Game Board**: A grid (usually 9x9) where players will place their pieces.\\n2. **Game Pieces**: Each player has a set of pieces (commonly stones or markers) that they will use to make their moves.\\n3. **Winning Conditions**: Before starting the game, players must agree on the winning conditions, which can vary based on the preferred style of play.\\n\\n### Basic Rules\\n1. **Setup**: Players take turns placing their pieces on the grid. The first player typically goes first.\\n2. **Turns**: Players alternate turns, placing one piece on an empty square during their turn.\\n3. **Winning**: The first player to achieve the agreed-upon winning condition (like creating a line of five pieces horizontally, vertically, or diagonally) is declared the winner.\\n\\n### Example of Winning Conditions\\n- **Line of Five**: A player wins by placing five of their pieces in a row.\\n- **Block Formation**: Players can also win by creating a specific shape with their pieces.\",\r\n        \"conclusion\": \"In this part of the Hanagama game tutorial, we covered the basic components, rules, and winning conditions. Understanding these fundamentals is essential as we move forward into strategies and gameplay techniques in the next part. As you practice, you will develop your strategic thinking and enjoy the challenges that Hanagama presents.\"\r\n    }\r\n}', ''),
(101155, 101, 2, 'Function in Python', 'https://youtu.be/eezLhJ5oGYg?si=oSG4EECyw5fmD_KN', '{\r\n    \"title\": \"Functions in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"In Python, functions are reusable pieces of code that perform a specific task. They allow for better organization and modularization of code, making programs easier to read, maintain, and debug. This guide will introduce you to the basics of defining and using functions in Python.\",\r\n        \"main_content\": \"### Defining a Function\\nTo define a function in Python, you use the `def` keyword followed by the function name and parentheses containing any parameters. The basic syntax is as follows: \\n```python\\ndef function_name(parameters):\\n    # code to execute\\n```\\n\\n### Example Code\\nHere’s a simple example of a function that adds two numbers: \\n```python\\ndef add_numbers(a, b):\\n    return a + b\\n\\n\"\",\r\n        \"conclusion\": \"In summary, functions are essential in Python programming.\"\r\n    }\r\n}', ''),
(101156, 101, 2, 'Exercise 18', 'https://youtu.be/-gxUjXAG96U?si=OLjn6Zy0WwzklrIy', '{\r\n    \"title\": \"Functions in Python - Exercise 18\",\r\n    \"content\": {\r\n        \"introduction\": \"In this exercise, you will practice creating and using functions in Python. The goal is to solidify your understanding of function definition, parameters, return values, and scope.\",\r\n        \"main_content\": \"### Problem Statement \\nWrite a Python program that includes the following functions: \\n1. **`calculate_area(length, width)`**: This function should take the length and width of a rectangle as parameters and return the area of the rectangle. \\n2. **`is_even(number)`**: This function should take an integer as a parameter and return `True` if the number is even, and `False` otherwise. \\n3. **`fibonacci(n)`**: This function should take an integer `n` as a parameter and return a list of the first `n` Fibonacci numbers. \\n\\n### Example Input \\nNo specific input is required for this exercise, as you will define the functions and call them within the program. \\n\\n### Expected Output \\n- For the `calculate_area(5, 3)`, the output should be: \\n```python\\n15\\n```\\n- For the `is_even(10)`, the output should be: \\n```python\\nTrue\\n```\\n- For `fibonacci(5)`, the output should be: \\n```python\\n[0, 1, 1, 2, 3]\\n```\",\r\n        \"conclusion\": \"This exercise reinforces your understanding of how to define and use functions in Python. By creating functions that perform specific tasks, you will gain practical experience in applying concepts such as parameters, return values, and scope. Practicing these exercises will enhance your programming skills and prepare you for more complex challenges.\"\r\n    }\r\n}', ''),
(101157, 101, 2, 'Exercise 19', 'https://youtu.be/O79JMm7GFlA?si=suHQVKMg7lVfw4k8', '{\r\n    \"title\": \"Functions in Python - Exercise 19\",\r\n    \"content\": {\r\n        \"introduction\": \"In this exercise, you will further develop your skills in creating and utilizing functions in Python. This exercise will emphasize function parameters, return values, and the concept of recursion.\",\r\n        \"main_content\": \"### Problem Statement \\nWrite a Python program that includes the following functions: \\n1. **`factorial(n)`**: This function should take a non-negative integer `n` and return the factorial of `n`. (Factorial of `n` is the product of all positive integers up to `n`.) \\n2. **`count_vowels(string)`**: This function should take a string as a parameter and return the number of vowels (a, e, i, o, u) in the string. \\n3. **`reverse_string(string)`**: This function should take a string and return the string reversed. \\n\\n### Example Input \\nNo specific input is required for this exercise, as you will define the functions and call them within the program. \\n\\n### Expected Output \\n- For the `factorial(5)`, the output should be: \\n```python\\n120\\n```\\n- For the `count_vowels( \'Hello World\' )`, the output should be: \\n```python\\n3\\n```\\n- For `reverse_string( \'Python\' )`, the output should be: \\n```python\\n\'nohtyP\'\\n```\",\r\n        \"conclusion\": \"This exercise reinforces your understanding of various functions in Python, including handling recursion, string manipulation, and mathematical calculations. By implementing these functions, you will improve your programming skills and gain confidence in working with function-based programming.\"\r\n    }\r\n}', ''),
(101158, 101, 2, 'Function With Arguments', 'https://youtu.be/uY8QPE0dcSs?si=sehaY5rSiSeTWbPK', '{\r\n    \"title\": \"Functions with Arguments\",\r\n    \"content\": {\r\n        \"introduction\": \"In Python, functions can take parameters, allowing you to pass data into them. This capability enables more flexible and reusable code. This guide will explore how to define functions with different types of arguments, including positional arguments, keyword arguments, and default arguments.\",\r\n        \"main_content\": \"### Defining Functions with Arguments \\nYou can define functions that accept parameters to work with data. The syntax for defining a function with arguments is as follows: \\n```python\\ndef function_name(arg1, arg2):\\n    # code to execute\\n```\\n\\n### Example Code\\nHere’s an example of a function that takes two numbers and returns their sum: \\n```python\\ndef add(a, b):\\n    return a + b\\n\\nresult = add(3, 5)\\nprint(result)  # Output: 8\\n```\\n\\n### Positional Arguments\\nPositional arguments are the most common type of arguments. The values you pass to the function are assigned to the parameters in the order they are defined: \\n```python\\ndef subtract(a, b):\\n    return a - b\\n\\nresult = subtract(10, 4)\\nprint(result)  # Output: 6\\n```\\n\\n### Keyword Arguments\\nKeyword arguments allow you to pass arguments by explicitly stating the parameter name. This can make your function calls clearer: \\n```python\\ndef greet(name, greeting):\\n    return f \\\"{greeting}, {name}!\\\"\\n\\nprint(greet(name=\\\"Alice\\\", greeting=\\\"Hello\\\"))  # Output: Hello, Alice!\\n```\\n\\n### Default Arguments\\nYou can also provide default values for parameters. If no value is provided for that parameter during the function call, the default value is used: \\n```python\\ndef multiply(a, b=1):\\n    return a * b\\n\\nprint(multiply(5))      # Output: 5 (b uses the default value 1)\\nprint(multiply(5, 3))   # Output: 15\\n```\",\r\n        \"conclusion\": \"In conclusion, functions with arguments are essential for writing reusable and modular code in Python. By understanding how to use positional, keyword, and default arguments, you can create more flexible functions that can handle a variety of inputs. This knowledge enhances your ability to write clean, efficient code and promotes better programming practices.\"\r\n    }\r\n}', ''),
(101159, 101, 2, 'args and kwargs', 'https://youtu.be/pY6mZ-RbBZg?si=nwz2q_7SIa-0-wW9', '{\r\n    \"title\": \"Using *args and **kwargs in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"In Python, `*args` and `**kwargs` are powerful tools that allow you to pass a variable number of arguments to a function. These features enhance the flexibility of your functions, enabling you to handle both positional and keyword arguments dynamically.\",\r\n        \"main_content\": \"### Understanding *args \\nThe `*args` syntax allows you to pass a variable number of positional arguments to a function. Inside the function, `args` is treated as a tuple containing all the arguments passed to it. \\n\\n#### Example of *args \\n```python\\ndef add_numbers(*args):\\n    return sum(args)\\n\\nresult = add_numbers(1, 2, 3, 4, 5)\\nprint(result)  # Output: 15\\n```\\n\\n### Understanding **kwargs \\nThe `**kwargs` syntax allows you to pass a variable number of keyword arguments (key-value pairs) to a function. Inside the function, `kwargs` is treated as a dictionary. \\n\\n#### Example of **kwargs \\n```python\\ndef display_info(**kwargs):\\n    for key, value in kwargs.items():\\n        print(f \\\"{key}: {value}\\\")\\n\\ndisplay_info(name=\\\"Alice\\\", age=25, city=\\\"New York\\\")\\n# Output:\\n# name: Alice\\n# age: 25\\n# city: New York\\n```\\n\\n### Combining *args and **kwargs \\nYou can use both `*args` and `**kwargs` in the same function definition. However, `*args` must come before `**kwargs`. \\n\\n#### Example Combining Both \\n```python\\ndef person_info(name, *args, **kwargs):\\n    print(f \\\"Name: {name}\\\")\\n    if args:\\n        print(\\\"Additional Info:\\\")\\n        for info in args:\\n            print(f \\\"- {info}\\\")\\n    if kwargs:\\n        print(\\\"Details:\\\")\\n        for key, value in kwargs.items():\\n            print(f \\\"{key}: {value}\\\")\\n\\nperson_info(\\\"Alice\\\", 30, \\\"Engineer\\\", city=\\\"New York\\\", country=\\\"USA\\\")\\n# Output:\\n# Name: Alice\\n# Additional Info:\\n# - 30\\n# - Engineer\\n# Details:\\n# city: New York\\n# country: USA\\n```\",\r\n        \"conclusion\": \"In conclusion, understanding `*args` and `**kwargs` is essential for writing flexible and reusable functions in Python. These features allow you to handle variable numbers of arguments and keyword arguments, making your functions more adaptable to different use cases. Mastering these concepts will significantly enhance your programming capabilities and improve code maintainability.\"\r\n    }\r\n}', ''),
(101160, 101, 2, 'Exercise 20', 'https://youtu.be/JpBamlGdb5I?si=zNe619WuG3LbqBs4', '{\r\n    \"title\": \"Exercise 20 - Using *args and **kwargs\",\r\n    \"content\": {\r\n        \"introduction\": \"In this exercise, you will practice using `*args` and `**kwargs` in Python functions. The goal is to understand how to pass variable numbers of positional and keyword arguments and how to utilize them within your functions.\",\r\n        \"main_content\": \"### Problem Statement \\nWrite a Python program that includes two functions: \\n\\n1. **Function with *args**: Create a function named `calculate_sum` that accepts a variable number of numerical arguments using `*args` and returns their sum. \\n   - **Example Input**: `calculate_sum(1, 2, 3, 4)` \\n   - **Expected Output**: `10` \\n\\n2. **Function with **kwargs**: Create a function named `print_student_info` that accepts a student\'s name as a positional argument and a variable number of keyword arguments representing additional information about the student (e.g., age, grade). \\n   - **Example Input**: `print_student_info(\'Alice\', age=20, grade=\'A\')` \\n   - **Expected Output**: Name: Alice, Age: 20, Grade: A\"\r\n    }\r\n}', ''),
(101161, 101, 2, 'Project Caesar Cipher Part 1', 'https://youtu.be/0heejX0rtII?si=bMj3j4Fo2jyGMObD', '{\r\n    \"title\": \"Project: Caesar Cipher - Part 1\",\r\n    \"content\": {\r\n        \"introduction\": \"The Caesar Cipher is one of the simplest and most well-known encryption techniques. It works by shifting the letters of the alphabet by a fixed number of positions. This project will guide you through implementing a basic Caesar Cipher in Python, covering both the encryption and decryption processes.\",\r\n        \"main_content\": \"### Overview of the Caesar Cipher \\nThe Caesar Cipher involves substituting each letter in the plaintext with a letter found by moving a fixed number of places down or up the alphabet. For example, with a shift of 3: \\n- A -> D \\n- B -> E \\n- C -> F \\n- ... \\n- X -> A \\n- Y -> B \\n- Z -> C \\n\\n### Implementing the Caesar Cipher \\n#### Step 1: Define the Encryption Function \\nCreate a function named `encrypt` that takes a plaintext string and a shift value as arguments. The function should return the encrypted string. \\n\\n#### Example Code \\n```python \\ndef encrypt(plaintext, shift): \\n    encrypted_text =  \" \" \\n    for char in plaintext: \\n        if char.isalpha(): \\n            # Shift character and maintain case \\n            shift_amount = shift % 26 \\n            new_char = chr((ord(char) - ord(\'A\' if char.isupper() else \'a\') + shift_amount) % 26 + ord(\'A\' if char.isupper() else \'a\')) \\n            encrypted_text += new_char \\n        else: \\n            encrypted_text += char  # Non-alphabetic characters remain unchanged \\n    return encrypted_text \\n``` \\n\\n#### Step 2: Testing the Encryption Function \\nYou can test the `encrypt` function by calling it with a sample plaintext and shift value. \\n```python \\nplaintext =  \"Hello, World! \" \\nshift = 3 \\ncipher_text = encrypt(plaintext, shift) \\nprint(f\"Encrypted: {cipher_text}\")  # Output should be: Khoor, Zruog! \\n\"\",\r\n        \"conclusion\": \"In Part 1 of the Caesar Cipher project, you have learned how to implement the encryption function. This function processes each character in the input string, applying the specified shift to produce the encrypted output. In the next part, you will implement the decryption function to reverse the encryption process.\"\r\n    }\r\n}', ''),
(101162, 101, 2, 'Project Caesar Cipher Part 2', 'https://youtu.be/0heejX0rtII?si=WbCPRHD0cRhd7EJF', '{\r\n    \"title\": \"Project: Caesar Cipher - Part 2\",\r\n    \"content\": {\r\n        \"introduction\": \"In Part 2 of the Caesar Cipher project, you will implement the decryption function that reverses the encryption process. This function will take an encrypted text and a shift value as input and return the original plaintext. You will also enhance the project by adding user interaction for a more complete application.\",\r\n        \"main_content\": \"### Implementing the Decryption Function \\n#### Step 1: Define the Decryption Function \\nCreate a function named `decrypt` that takes an encrypted string and a shift value as arguments. The function should return the decrypted string. \\n\\n#### Example Code \\n```python \\ndef decrypt(ciphertext, shift): \\n    decrypted_text =  \" \" \\n    for char in ciphertext: \\n        if char.isalpha(): \\n            # Reverse the shift character and maintain case \\n            shift_amount = shift % 26 \\n            new_char = chr((ord(char) - ord(\'A\' if char.isupper() else \'a\') - shift_amount) % 26 + ord(\'A\' if char.isupper() else \'a\')) \\n            decrypted_text += new_char \\n        else: \\n            decrypted_text += char  # Non-alphabetic characters remain unchanged \\n    return decrypted_text \\n``` \\n\\n#### Step 2: Testing the Decryption Function \\nYou can test the `decrypt` function by calling it with the previously encrypted text and the same shift value used for encryption. \\n```python \\nshift = 3 \\noriginal_text = decrypt(cipher_text, shift) \\nprint(f\"Decrypted: {original_text}\")  # Output should be: Hello, World! \\n``` \\n\\n### Step 3: User Interaction \\nEnhance the program by allowing users to choose whether they want to encrypt or decrypt a message. You can use a simple command-line interface for this. \\n```python \\nif __name__ == \'__main__\': \\n    choice = input(\"Do you want to (E)ncrypt or (D)ecrypt?\").strip().upper() \\n    text = input(\"Enter the text: \") \\n    shift = int(input(\"Enter the shift value: \")) \\n\\n    if choice == \'E\': \\n        encrypted_message = encrypt(text, shift) \\n        print(f\"Encrypted Message: {encrypted_message}\") \\n    elif choice == \'D\': \\n        decrypted_message = decrypt(text, shift) \\n        print(f\"Decrypted Message: {decrypted_message}\") \\n    else: \\n        print(\"Invalid choice! Please choose E or D.\") \\n```\",\r\n        \"conclusion\": \"In Part 2 of the Caesar Cipher project, you successfully implemented the decryption function and added user interaction for a complete cipher application. Users can now encrypt and decrypt messages using a specified shift value, making the program more interactive and functional. This project provides a solid foundation for understanding basic encryption techniques and enhances your programming skills in Python.\"\r\n    }\r\n}', ''),
(101163, 101, 3, 'OOP in Python', 'https://youtu.be/Ic7ZBKqkS1E?si=74by1vdLJqnJ31XR', '{\r\n    \"title\": \"Object-Oriented Programming (OOP) in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"Object-Oriented Programming (OOP) is a programming paradigm that uses \'objects\' to design software. Python, being an object-oriented language, allows for the creation of classes and objects that encapsulate data and behavior, promoting code reuse and organization. This approach is essential for managing complex programs and building scalable applications.\",\r\n        \"main_content\": \"### Key Concepts of OOP \\nOOP in Python is based on four fundamental principles: \\n\\n1. **Classes and Objects**: A class is a blueprint for creating objects (instances). An object has attributes (data) and methods (functions) that operate on the data. \\n   - **Example**: \\n   ```python \\n   class Dog: \\n       def __init__(self, name, age): \\n           self.name = name \\n           self.age = age \\n\\n       def bark(self): \\n           return \"Woof!\" \\n\\n   my_dog = Dog(\"Buddy\", 3) \\n   print(my_dog.name)  # Output: Buddy \\n   print(my_dog.bark())  # Output: Woof! \\n   ``` \\n\\n2. **Encapsulation**: This principle restricts direct access to some of an object\'s components, which can prevent the accidental modification of data. Encapsulation is implemented using private and public access modifiers. \\n   - **Example**: \\n   ```python \\n   class BankAccount: \\n       def __init__(self, balance): \\n           self.__balance = balance  # Private attribute \\n\\n       def deposit(self, amount): \\n           self.__balance += amount \\n\\n       def get_balance(self): \\n           return self.__balance \\n   ``` \\n\\n3. **Inheritance**: This allows a class (child class) to inherit attributes and methods from another class (parent class). It promotes code reuse and establishes a relationship between classes. \\n   - **Example**: \\n   ```python \\n   class Animal: \\n       def speak(self): \\n           return \"Some sound\" \\n\\n   class Cat(Animal): \\n       def speak(self): \\n           return \"Meow\" \\n\\n   my_cat = Cat() \\n   print(my_cat.speak())  # Output: Meow \\n   ``` \\n\\n4. **Polymorphism**: This principle allows methods to do different things based on the object it is acting upon, enabling one interface to be used for different data types. \\n   - **Example**: \\n   ```python \\n   def animal_sound(animal): \\n       print(animal.speak()) \\n\\n   animal_sound(Dog(\"Rex\", 5))  # Output: Woof! \\n   animal_sound(Cat())  # Output: Meow \\n   ```\",\r\n        \"conclusion\": \"Understanding OOP in Python is crucial for writing clean, efficient, and scalable code. By leveraging classes and objects, you can create modular applications that are easier to maintain and extend. Mastering these concepts will enhance your programming skills and allow you to tackle more complex problems effectively.\"\r\n    }\r\n}', ''),
(101164, 101, 3, 'Classes and Objects', 'https://youtu.be/Gvm2Sg1rZek?si=WGfgX5z-6CjvUtkK', '{\r\n    \"title\": \"Classes and Objects in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"In Python, classes and objects are fundamental building blocks of Object-Oriented Programming (OOP). A class serves as a blueprint for creating objects, encapsulating data and functions that operate on that data. Understanding how to define and use classes and objects is essential for structuring programs effectively and promoting code reuse.\",\r\n        \"main_content\": \"### Defining a Class \\nA class is defined using the `class` keyword followed by the class name. Inside the class, you can define attributes (variables) and methods (functions) that describe the object\'s behavior and state. \\n\\n#### Example Code for Class Definition \\n```python \\nclass Car: \\n    def __init__(self, make, model, year): \\n        self.make = make  # Attribute \\n        self.model = model  # Attribute \\n        self.year = year  # Attribute \\n\\n    def display_info(self):  # Method \\n        return f\"{self.year} {self.make} {self.model}\" \\n``` \\n\\n### Creating an Object \\nAn object is an instance of a class. You create an object by calling the class name followed by parentheses, which may include arguments that match the class\'s `__init__` method. \\n\\n#### Example Code for Creating an Object \\n```python \\nmy_car = Car(\"Toyota\", \"Corolla\", 2020)  # Creating an object \\nprint(my_car.display_info())  # Output: 2020 Toyota Corolla \\n```   \\n\\n### Accessing Attributes and Methods \\nYou can access an object\'s attributes and methods using the dot notation. This allows you to manipulate the object\'s state and invoke its behavior. \\n\\n#### Example Code for Accessing Attributes \\n```python \\nprint(my_car.make)  # Output: Toyota \\nmy_car.year = 2021  # Modifying an attribute \\nprint(my_car.display_info())  # Output: 2021 Toyota Corolla \\n```   \\n\\n### Example of Multiple Objects \\nYou can create multiple objects from the same class, each with its own state. \\n```python \\ncar1 = Car(\"Honda\", \"Civic\", 2019) \\ncar2 = Car(\"Ford\", \"Focus\", 2021) \\nprint(car1.display_info())  # Output: 2019 Honda Civic \\nprint(car2.display_info())  # Output: 2021 Ford Focus \\n```\",\r\n        \"conclusion\": \"Understanding classes and objects is crucial for leveraging the power of Object-Oriented Programming in Python. Classes provide a way to encapsulate data and functions, while objects allow you to create multiple instances with different states. Mastering these concepts will help you write cleaner, more organized, and reusable code in your projects.\"\r\n    }\r\n}', ''),
(101165, 101, 3, 'Self and __init__()', 'https://youtu.be/G6Bd6tJ9ft0?si=uJjB1m9r4ErmFIvu', '{\r\n    \"title\": \"Self and `__init__()` in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"In Python, `self` and the `__init__()` method are essential concepts in Object-Oriented Programming (OOP) that help define how classes and objects interact. `self` refers to the instance of the class, allowing access to its attributes and methods, while `__init__()` initializes a new object\'s state upon creation.\",\r\n        \"main_content\": \"### The `__init__()` Method \\nThe `__init__()` method is a special method in Python classes that automatically runs when a new object of the class is created. It is often used to initialize attributes of the object. \\n\\n#### Syntax of `__init__()` \\n```python \\nclass ClassName: \\n    def __init__(self, parameters): \\n        # Initialize attributes \\n``` \\n\\n### Example Code for `__init__()` \\nHere’s an example demonstrating how to use the `__init__()` method to initialize attributes: \\n```python \\nclass Person: \\n    def __init__(self, name, age): \\n        self.name = name  # Assign name to the instance \\n        self.age = age    # Assign age to the instance \\n \\n    def display_info(self): \\n        return f\"Name: {self.name}, Age: {self.age}\" \\n``` \\n\\n### Understanding `self` \\n`self` is a reference to the current instance of the class. It must be the first parameter of any method in the class (including `__init__()`). Using `self`, you can access attributes and methods of the class in Python. \\n\\n#### Example Code for Using `self` \\n```python \\nperson1 = Person(\"Alice\", 30) \\nprint(person1.display_info())  # Output: Name: Alice, Age: 30 \\n``` \\n\\n### Why Use `self`? \\nUsing `self` helps distinguish between instance attributes and local variables within methods. It allows for clear access to the attributes defined in the `__init__()` method or elsewhere in the class. \\n\\n#### Example Code Showing the Difference \\n```python \\nclass Circle: \\n    def __init__(self, radius): \\n        self.radius = radius  # Instance attribute \\n \\n    def area(self): \\n        return 3.14 * (self.radius ** 2) \\n \\ncircle = Circle(5) \\nprint(circle.area())  # Output: 78.5 \\n```\",\r\n        \"conclusion\": \"Understanding `self` and the `__init__()` method is crucial for effectively utilizing classes and objects in Python. The `__init__()` method allows you to set up object attributes at the time of creation, while `self` provides a way to access those attributes and methods. Mastering these concepts is foundational for writing organized and maintainable object-oriented code.\"\r\n    }\r\n}', ''),
(101166, 101, 3, 'Class Method ', 'https://youtu.be/tJNsmm7ZUmk?si=9wKKNmHdwDc4HV9-', '{\r\n    \"title\": \"Class Method in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"In Python, a class method is a method that belongs to the class rather than any particular instance of the class. It is defined using the `@classmethod` decorator and takes the class itself as the first parameter, conventionally named `cls`. Class methods are often used for factory methods or when you need to modify class state that applies across all instances.\",\r\n        \"main_content\": \"### Defining a Class Method \\nA class method is created by using the `@classmethod` decorator before the method definition. The first parameter of a class method is always `cls`, which refers to the class itself, allowing access to class attributes and methods. \\n\\n#### Example Code for Class Method Definition \\n```python \\nclass Car: \\n    number_of_wheels = 4  # Class attribute \\n \\n    def __init__(self, make, model): \\n        self.make = make  # Instance attribute \\n        self.model = model  # Instance attribute \\n \\n    @classmethod \\n    def wheels_info(cls): \\n        return f\"All cars have {cls.number_of_wheels} wheels.\" \\n``` \\n\\n### Using Class Methods \\nYou can call a class method using either the class name or an instance of the class. However, it is more common to call it using the class name for clarity. \\n\\n#### Example Code for Calling a Class Method \\n```python \\nprint(Car.wheels_info())  # Output: All cars have 4 wheels. \\n \\nmy_car = Car(\"Toyota\", \"Corolla\") \\nprint(my_car.wheels_info())  # Output: All cars have 4 wheels. \\n```   \\n \\n### Class Methods as Factory Methods \\nClass methods can be used as factory methods to create instances of the class in a specific way. This can be particularly useful for alternative constructors. \\n\\n#### Example Code for Factory Method \\n```python \\nclass Person: \\n    def __init__(self, name, age): \\n        self.name = name \\n        self.age = age \\n \\n    @classmethod \\n    def from_birth_year(cls, name, birth_year): \\n        age = 2024 - birth_year  # Calculate age \\n        return cls(name, age)  # Create an instance using cls \\n \\n# Create a Person object using the factory method \\nperson = Person.from_birth_year(\"Alice\", 1990) \\nprint(person.name, person.age)  # Output: Alice 34 \\n```\",\r\n        \"conclusion\": \"Class methods in Python provide a way to define methods that are tied to the class rather than instances. They are useful for accessing or modifying class-level data and can serve as alternative constructors. Understanding class methods enhances your ability to structure your code more effectively, promoting better organization and readability.\"\r\n    }\r\n}', ''),
(101167, 101, 3, 'Exercise', 'https://youtu.be/cezNT43xmAY?si=DLZhA7UZ-9owHbuH', '{\r\n    \"title\": \"Class Method - Exercise\",\r\n    \"content\": {\r\n        \"introduction\": \"In this exercise, you will practice using class methods in Python. The goal is to understand how to define and utilize class methods, as well as to implement a factory method for creating class instances.\",\r\n        \"main_content\": \"### Problem Statement \\n1. Create a class called `Book` that has the following attributes: \\n   - `title` \\n   - `author` \\n   - `publication_year` \\n   - `genre` \\n\\n2. Define a class method called `from_genre` that takes a genre as an argument and returns a list of books belonging to that genre from a predefined list of books. \\n\\n3. Implement the `__init__` method to initialize the book attributes. \\n\\n4. Create a few `Book` instances and demonstrate how to use the `from_genre` method to retrieve books of a specific genre.\"\r\n    }\r\n}', '');
INSERT INTO `python_course` (`id`, `course_id`, `level`, `topic_name`, `video_url`, `articles`, `created_at`) VALUES
(101168, 101, 3, 'Inheritance', 'https://youtu.be/4SO3sScshvA?si=ot6ZxOvGWLc0yThN', '{\r\n    \"title\": \"Inheritance in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"Inheritance is a fundamental concept of object-oriented programming (OOP) that allows one class (child or derived class) to inherit properties and methods from another class (parent or base class). It helps to create hierarchical class structures and promotes code reuse.\",\r\n        \"main_content\": \"### 1. What is Inheritance? \\nInheritance allows a class to use attributes and methods from another class without having to rewrite them. The class that inherits is called the **child class**, and the class being inherited from is the **parent class**. \\n\\n### 2. Types of Inheritance in Python \\n- **Single Inheritance**: A child class inherits from one parent class. \\n- **Multiple Inheritance**: A child class inherits from more than one parent class. \\n- **Multilevel Inheritance**: A class inherits from another child class, forming a hierarchy of inheritance. \\n- **Hierarchical Inheritance**: Multiple child classes inherit from a single parent class. \\n- **Hybrid Inheritance**: A combination of two or more types of inheritance. \\n\\n### 3. Example of Single Inheritance \\nHere’s an example to demonstrate single inheritance: \\n\\n```python \\n# Parent class \\nclass Animal: \\n    def speak(self): \\n        print( \"Animal speaks \") \\n\\n# Child class inheriting from Animal \\nclass Dog(Animal): \\n    def bark(self): \\n        print( \"Dog barks \") \\n\\n# Create an instance of Dog \\ndog = Dog() \\n \\ndog.speak()  # Inherited from Animal class \\n``` \\n\\n### 4. Overriding Methods \\nA child class can override methods from the parent class to modify their behavior: \\n\\n```python \\nclass Animal: \\n    def speak(self): \\n        print( \"Animal speaks \") \\n\\nclass Cat(Animal): \\n    def speak(self): \\n        print( \"Cat meows \")  # Method overriding \\n\\ncat = Cat() \\ncat.speak()  # Output: Cat meows \\n``` \\n\\n### 5. Using the `super()` Function \\nThe `super()` function allows you to call methods from the parent class in the child class, often useful when overriding methods: \\n\\n```python \\nclass Animal: \\n    def speak(self): \\n        print( \"Animal speaks \") \\n\\nclass Bird(Animal): \\n    def speak(self): \\n        super().speak()  # Call parent class method \\n        print( \"Bird chirps \") \\n \\nbird = Bird() \\nbird.speak() \\n``` \\n\\n### 6. Conclusion \\nInheritance simplifies code maintenance and promotes reusability by allowing classes to inherit properties and behaviors from other classes. It helps to model relationships between different entities and is one of the key features of object-oriented programming.\",\r\n        \"conclusion\": \"Mastering inheritance helps in designing scalable and modular code structures. Understanding how to use different types of inheritance effectively can significantly reduce redundancy and improve code clarity in Python projects.\"\r\n    }\r\n}', ''),
(101169, 101, 3, 'Multiple Inheritance', 'https://youtu.be/Smlbgao6VL4?si=QNvQC-MqfvLbD-I3', '{\r\n    \"title\": \"Multiple Inheritance in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"Multiple inheritance is a feature in object-oriented programming where a class can inherit attributes and methods from more than one parent class. This allows for more complex and flexible class structures, enabling the reuse of code across multiple classes.\",\r\n        \"main_content\": \"### 1. Understanding Multiple Inheritance \\nIn multiple inheritance, a derived class can inherit properties and behaviors from multiple base classes. This is useful when a class needs to incorporate functionality from different sources. \\n\\n### 2. Benefits of Multiple Inheritance \\n- **Code Reusability**: Allows classes to inherit methods and attributes from multiple classes, reducing code duplication. \\n- **Flexibility**: Classes can combine functionalities from different classes, leading to more dynamic designs. \\n- **Improved Organization**: Promotes cleaner code by separating different functionalities into different classes. \\n\\n### 3. Implementing Multiple Inheritance \\nHere’s an example of how to implement multiple inheritance in Python: \\n\\n```python \\n# Base class 1 \\nclass Teacher: \\n    def teach(self): \\n        print( \"Teaching \") \\n\\n# Base class 2 \\nclass Driver: \\n    def drive(self): \\n        print( \"Driving \") \\n\\n# Derived class \\nclass Student(Teacher, Driver): \\n    def study(self): \\n        print( \"Studying \") \\n\\n# Creating an object of the Student class \\nstudent = Student() \\n\\n# Calling methods from multiple parent classes \\nstudent.teach()  # Output: Teaching \\nstudent.drive()   # Output: Driving \\nstudent.study()   # Output: Studying \\n``` \\n\\n### 4. Method Resolution Order (MRO) \\nPython uses the C3 linearization algorithm for MRO, which ensures a consistent order for method resolution in multiple inheritance scenarios. You can check the MRO for a class using the `mro()` method: \\n\\n```python \\nprint(Student.mro())  # Output the method resolution order for Student \\n``` \\n\\n### 5. Conclusion \\nMultiple inheritance provides a powerful way to create classes that leverage the capabilities of multiple parent classes. However, it should be used with caution, as it can lead to complexity and ambiguity in method resolution if not properly managed.\"\r\n    }\r\n}', ''),
(101170, 101, 3, 'Multilevel Inheritance', 'https://youtu.be/Fv1xFd3LzJo?si=qs_pVkDCO2_kavnq', '{\r\n    \"title\": \"Multilevel Inheritance in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"Multilevel inheritance is a type of inheritance in object-oriented programming where a class is derived from another derived class, creating a chain of inheritance. This structure allows for a clear hierarchy and enables reusability of code across multiple levels.\",\r\n        \"main_content\": \"### 1. Understanding Multilevel Inheritance \\nIn multilevel inheritance, a base class is inherited by a derived class, which in turn can be inherited by another derived class. This creates a multi-tiered structure that reflects relationships and dependencies between classes. \\n\\n### 2. Benefits of Multilevel Inheritance \\n- **Code Reusability**: Each derived class can reuse methods and properties from its parent classes. \\n- **Organizational Structure**: It establishes a clear hierarchy, making it easier to understand the relationships between classes. \\n- **Specialization**: Derived classes can extend or override functionalities from their parent classes, allowing for tailored behaviors. \\n\\n### 3. Implementing Multilevel Inheritance \\nHere’s a simple example of multilevel inheritance in Python: \\n\\n```python \\n# Base class \\nclass Animal: \\n    def speak(self): \\n        print( \"Animal speaks \") \\n\\n# Derived class 1 \\nclass Dog(Animal): \\n    def bark(self): \\n        print( \"Dog barks \") \\n\\n# Derived class 2 \\nclass Puppy(Dog): \\n    def weep(self): \\n        print( \"Puppy weeps \") \\n\\n# Creating an object of the Puppy class \\npuppy = Puppy() \\n\\n# Calling methods \\npuppy.speak()  # Output: Animal speaks \\npuppy.bark()   # Output: Dog barks \\npuppy.weep()   # Output: Puppy weeps \\n``` \\n\\n### 4. Method Resolution Order (MRO) \\nPython follows the Method Resolution Order (MRO) to determine the order in which base classes are searched when executing a method. This ensures that the correct method is called based on the inheritance hierarchy. \\n\\n```python \\nprint(Puppy.mro())  # Output the method resolution order for Puppy \\n``` \\n\\n### 5. Conclusion \\nMultilevel inheritance is a powerful concept in object-oriented programming that allows for the creation of complex class structures with clear hierarchies. By understanding and utilizing multilevel inheritance, developers can build more organized and reusable code.\"\r\n    }\r\n}', ''),
(101171, 101, 3, 'Hierarchical Inheritance', 'https://youtu.be/UYxJBJQZU-I?si=zVb_F8SsNnM8Mxkr', '{\r\n    \"title\": \"Hierarchical Inheritance in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"Hierarchical inheritance is a type of inheritance in object-oriented programming where multiple derived classes inherit from a single base class. This structure allows for code reuse and a clear representation of relationships between classes.\",\r\n        \"main_content\": \"### 1. Understanding Hierarchical Inheritance \\nIn hierarchical inheritance, a single base class is inherited by multiple derived classes. This allows the derived classes to share the common features of the base class while also defining their unique behaviors. \\n\\n### 2. Benefits of Hierarchical Inheritance \\n- **Code Reusability**: Common functionalities are defined in the base class, allowing derived classes to reuse this code. \\n- **Logical Structure**: It provides a clear organizational structure that reflects real-world relationships. \\n- **Ease of Maintenance**: Changes made in the base class can automatically propagate to derived classes, simplifying maintenance. \\n\\n### 3. Implementing Hierarchical Inheritance \\nHere’s a simple example of hierarchical inheritance in Python: \\n\\n```python \\n# Base class \\nclass Animal: \\n    def speak(self): \\n        print( \"Animal speaks \") \\n\\n# Derived class 1 \\nclass Dog(Animal): \\n    def bark(self): \\n        print( \"Dog barks \") \\n\\n# Derived class 2 \\nclass Cat(Animal): \\n    def meow(self): \\n        print( \"Cat meows \") \\n\\n# Derived class 3 \\nclass Cow(Animal): \\n    def moo(self): \\n        print( \"Cow moos \") \\n\\n# Creating objects of each derived class \\ndog = Dog() \\ncat = Cat() \\ncow = Cow() \\n\\n# Calling methods \\n\\ndog.speak()  # Output: Animal speaks \\ndog.bark()   # Output: Dog barks \\n\\ncat.speak()  # Output: Animal speaks \\ncat.meow()   # Output: Cat meows \\n\\ncow.speak()  # Output: Animal speaks \\ncow.moo()    # Output: Cow moos \\n``` \\n\\n### 4. Method Resolution Order (MRO) \\nIn hierarchical inheritance, when methods are called, Python uses the Method Resolution Order (MRO) to determine which method to execute. The MRO helps to resolve conflicts when methods with the same name exist in the hierarchy. \\n\\n```python \\nprint(Dog.mro())  # Output the method resolution order for Dog \\n``` \\n\\n### 5. Conclusion \\nHierarchical inheritance is a fundamental concept in object-oriented programming that promotes code reuse and organization. By understanding how to implement hierarchical inheritance effectively, developers can create clear and maintainable class structures that reflect real-world relationships.\"\r\n    }\r\n}', ''),
(101172, 101, 3, 'File Handling', 'https://youtu.be/Sx1Hjr67xO0?si=ml6ESQbp2DX97M6L', '{\r\n    \"title\": \"File Handling in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"File handling in Python is a critical aspect of programming that allows users to read from and write to files stored on disk. Python provides built-in functions and methods to interact with files seamlessly, making it easy to manage data.\",\r\n        \"main_content\": \"### 1. Opening a File To work with a file in Python, you need to open it first. You can use the built-in `open()` function, which takes two parameters: the filename and the mode. The most common modes are: - **\'r\'**: Read (default mode). - **\'w\'**: Write (overwrites the file if it exists). - **\'a\'**: Append (adds data to the end of the file). - **\'b\'**: Binary mode. Example: ```python file = open(\'example.txt\', \'r\') ``` ### 2. Reading from a File Once a file is opened in read mode, you can read its contents using various methods: - **read()**: Reads the entire file. ```python content = file.read() print(content) ``` - **readline()**: Reads a single line from the file. ```python line = file.readline() print(line) ``` - **readlines()**: Reads all the lines into a list. ```python lines = file.readlines() print(lines) ``` ### 3. Writing to a File You can write to a file by opening it in write or append mode. Here’s how: - **write()**: Writes a string to the file. ```python file = open(\'example.txt\', \'w\') file.write(\'Hello, World!\') ``` - **writelines()**: Writes a list of strings to the file. ```python lines = [\'Line 1\\n\', \'Line 2\\n\'] file.writelines(lines) ``` ### 4. Closing a File It is essential to close a file after finishing operations to free up system resources. Use the `close()` method: ```python file.close() ``` ### 5. Using \'with\' Statement Python provides a cleaner way to handle files using the `with` statement, which automatically closes the file after the block is executed: ```python with open(\'example.txt\', \'r\') as file: content = file.read() print(content) ``` ### 6. Exception Handling File operations can lead to errors, such as trying to read a non-existent file. You can handle these exceptions using try-except blocks: ```python try: with open(\'example.txt\', \'r\') as file: content = file.read() except FileNotFoundError: print(\'File not found.\') ``` ### 7. Working with Different File Types Python can handle various file formats, such as text, CSV, JSON, and more. You can use libraries like `csv` and `json` to work with these file types effectively: - **CSV:** ```python import csv with open(\'data.csv\', \'r\') as file: reader = csv.reader(file) for row in reader: print(row) ``` - **JSON:** ```python import json with open(\'data.json\', \'r\') as file: data = json.load(file) print(data) ``` ### 8. Conclusion File handling is an essential skill in Python programming, enabling you to store, retrieve, and manipulate data efficiently. By mastering file operations, you can manage data persistence in your applications, ensuring that user data and other information are saved securely.\"\r\n    }\r\n}', ''),
(101173, 101, 3, 'Modules in Python', 'https://youtu.be/L6BoHn8NdX4?si=LrnMz-tni_Di7yo7', '{\r\n    \"title\": \"Modules in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"In Python, a module is a file containing Python code that can define functions, classes, and variables. Modules allow for the logical organization of Python code, making it easier to manage and reuse. By using modules, developers can separate code into different files, enhancing code readability and maintainability.\",\r\n        \"main_content\": \"### 1. What are Modules? Modules are simply Python files with a `.py` extension. They help you organize your code into manageable sections and provide a way to encapsulate related functionality. ### 2. Creating a Module To create a module, you just need to save your Python code in a file with a `.py` extension. For example, if you create a file named `math_operations.py`, you can define functions inside it: ```python # math_operations.py def add(a, b): return a + b def subtract(a, b): return a - b ``` This file can then be imported and used in other Python scripts. ### 3. Importing Modules You can import a module in your Python code using the `import` statement. There are different ways to import modules: - **Import the entire module:** ```python import math_operations result = math_operations.add(5, 3) print(result)  # Outputs: 8 ``` - **Import specific functions from a module:** ```python from math_operations import add result = add(5, 3) print(result)  # Outputs: 8 ``` - **Import with an alias:** ```python import math_operations as mo result = mo.subtract(5, 3) print(result)  # Outputs: 2 ``` ### 4. Standard Library Modules Python comes with a rich set of built-in modules known as the Standard Library. Some commonly used modules include: - **math:** Provides mathematical functions. - **datetime:** Handles date and time manipulation. - **os:** Provides functions for interacting with the operating system. - **sys:** Provides access to system-specific parameters and functions. ### 5. Third-Party Modules In addition to the standard library, you can also install third-party modules from the Python Package Index (PyPI) using package managers like `pip`. Examples include: - **NumPy:** For numerical computations. - **Pandas:** For data analysis and manipulation. - **Requests:** For making HTTP requests. ### 6. Benefits of Using Modules - **Reusability:** Write code once and use it across multiple projects. - **Organization:** Keep your code clean and organized by separating functionality into different modules. - **Namespace Management:** Avoid name collisions by encapsulating functions and classes within modules. ### 7. Conclusion Modules are a fundamental part of Python programming, allowing you to structure your code logically and improve its maintainability. By utilizing both built-in and third-party modules, you can enhance your development experience and streamline your projects.\"\r\n    }\r\n}', ''),
(101174, 101, 3, 'Abstraction in Python', 'https://www.youtube.com/watch?v=Z1RJmh_OqeA&t=4350s', '{\r\n    \"title\": \"Abstraction in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"Abstraction is one of the fundamental principles of object-oriented programming (OOP) in Python. It involves hiding the complex implementation details and exposing only the essential features of an object. This simplifies interaction with the object and allows users to focus on high-level operations without worrying about the underlying complexity.\",\r\n        \"main_content\": \"### 1. What is Abstraction? Abstraction is the process of simplifying complex reality by modeling classes based on the essential properties and behaviors an object should have. In Python, abstraction can be achieved through abstract classes and interfaces, enabling you to define methods that must be implemented by derived classes while keeping the implementation details hidden. ### 2. Abstract Classes in Python An abstract class is a class that cannot be instantiated directly and may contain one or more abstract methods. Abstract methods are defined using the `abc` module and require subclasses to provide implementations. This enforces a contract for subclasses. #### Example: ```python from abc import ABC, abstractmethod class Shape(ABC):  # Abstract class @abstractmethod def area(self):  # Abstract method pass class Circle(Shape):  # Subclass implementing the abstract class def __init__(self, radius): self.radius = radius def area(self):  # Implementation of abstract method return 3.14 * self.radius ** 2 class Rectangle(Shape):  # Another subclass def __init__(self, width, height): self.width = width self.height = height def area(self):  # Implementation of abstract method return self.width * self.height ``` In this example, `Shape` is an abstract class with an abstract method `area()`. The `Circle` and `Rectangle` classes inherit from `Shape` and provide their specific implementations of the `area()` method. ### 3. Benefits of Abstraction - **Reduces Complexity:** Abstraction hides the intricate details and allows users to interact with objects through a simpler interface. - **Encapsulation:** It promotes the encapsulation of data and behaviors, protecting the internal state of an object from unintended interference. - **Improves Maintainability:** By defining clear interfaces, abstraction makes the code easier to understand and maintain, as changes to the implementation do not affect the users of the class. ### 4. Encapsulation vs. Abstraction While both encapsulation and abstraction are OOP principles, they serve different purposes. Encapsulation focuses on bundling the data and methods that operate on that data within one unit (class) and restricting access to some components. Abstraction, on the other hand, is about simplifying the interface and hiding the implementation details from the user. ### 5. Real-World Example of Abstraction Consider a car as an example of abstraction. When you drive a car, you use the steering wheel, pedals, and gear shift, but you do not need to understand the internal workings of the engine or the intricacies of the transmission system. This separation of concerns is a practical application of abstraction. ### 6. Conclusion Abstraction in Python allows developers to define complex systems while exposing only the necessary parts to the user. By using abstract classes and methods, you can create a clear structure that promotes code reusability, maintainability, and clarity in your programs. Understanding and applying abstraction is crucial for effective object-oriented design.\"\r\n    }\r\n}', ''),
(101175, 101, 3, 'Abstract Class and Abstract Method', 'https://youtu.be/64tJdFVh1Vs?si=X5pK7LU1cDLR8c3d', '{\r\n    \"title\": \"Abstract Class and Abstract Method in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"In Python, abstract classes and abstract methods are used to define a common interface for a group of related classes. They serve as templates for subclasses to implement specific functionality while ensuring that certain methods are always overridden. This promotes a clear structure and enhances code maintainability.\",\r\n        \"main_content\": \"### 1. What is an Abstract Class? An abstract class is a class that cannot be instantiated on its own and must be subclassed. It can contain both concrete methods (with implementations) and abstract methods (without implementations). Abstract classes are defined using the `abc` module, which provides the necessary tools for defining abstract base classes in Python. #### Example: ```python from abc import ABC, abstractmethod class Animal(ABC):  # Abstract class @abstractmethod def sound(self):  # Abstract method pass def sleep(self):  # Concrete method return  \"Sleeping... \" ``` In this example, `Animal` is an abstract class with an abstract method `sound()` that must be implemented by any subclass. ### 2. What is an Abstract Method? An abstract method is a method that is declared in an abstract class but does not have an implementation. Subclasses of the abstract class must provide an implementation for the abstract methods. #### Example: ```python class Dog(Animal):  # Subclass of Animal def sound(self):  # Implementation of abstract method return  \"Bark! \" class Cat(Animal):  # Subclass of Animal def sound(self):  # Implementation of abstract method return  \"Meow! \" dog = Dog() cat = Cat() print(dog.sound())  # Output: Bark! print(cat.sound())  # Output: Meow! ``` In this example, both `Dog` and `Cat` are subclasses of `Animal` that implement the abstract method `sound()`. This enforces that any subclass of `Animal` must define how it sounds. ### 3. Key Points about Abstract Classes and Methods - **Instantiation:** You cannot create an instance of an abstract class directly. Attempting to do so will raise a `TypeError`. - **Implementation Requirement:** Subclasses must implement all abstract methods defined in the abstract class, or they will also be considered abstract classes. - **Polymorphism:** Abstract classes enable polymorphism by allowing different subclasses to define specific behaviors while adhering to a common interface. ### 4. Benefits of Using Abstract Classes - **Code Reusability:** Abstract classes allow you to define shared behavior that can be reused across multiple subclasses. - **Encapsulation:** They help encapsulate common functionality and separate the definition of behavior from the implementation. - **Enforcement of Interface:** Abstract classes enforce a consistent interface across different subclasses, making it easier to manage and maintain the codebase. ### 5. Comparison with Interfaces While abstract classes can contain both abstract and concrete methods, interfaces (in languages like Java) typically define only abstract methods. Python does not have a formal interface construct, but abstract classes can be used to achieve similar functionality.\",\r\n        \"conclusion\": \"Abstract classes and abstract methods are powerful features in Python that allow you to create a clear and structured hierarchy of classes. They promote code reuse, ensure that subclasses implement specific methods, and enable polymorphism. By leveraging these concepts, you can build flexible and maintainable applications that follow best practices in object-oriented programming.\"\r\n    }\r\n}', ''),
(101176, 101, 3, 'Access Modifier', 'https://youtu.be/aF6usfcTYqQ?si=N_FNu7xPGMD3H6eJ', '{\r\n    \"title\": \"Access Modifiers in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"Access modifiers in Python are a way to restrict access to certain parts of a class. They define the visibility of class attributes and methods to other classes and instances. Python uses a set of conventions to manage access to class members, primarily focusing on public, protected, and private attributes.\",\r\n        \"main_content\": \"### 1. Public Access Modifier Public members are accessible from anywhere, both inside and outside the class. In Python, all class attributes and methods are public by default. #### Example: ```python class Dog: def __init__(self, name): self.name = name  # Public attribute def bark(self): return  \"Woof! \" dog = Dog( \"Buddy \") print(dog.name)  # Output: Buddy print(dog.bark())  # Output: Woof! ``` In this example, both the `name` attribute and the `bark()` method are public and can be accessed directly from outside the class. ### 2. Protected Access Modifier Protected members are intended to be accessed only within the class and its subclasses. In Python, you can indicate that an attribute is protected by prefixing its name with a single underscore (`_`). However, this is just a convention and does not enforce strict access control. #### Example: ```python class Animal: def __init__(self, species): self._species = species  # Protected attribute class Cat(Animal): def meow(self): return f \"I am a {self._species}. \" cat = Cat( \"Feline \") print(cat.meow())  # Output: I am a Feline. ``` In this example, the `_species` attribute is protected and can be accessed in the `Cat` subclass but is not meant to be accessed directly from outside the `Animal` class. ### 3. Private Access Modifier Private members are not accessible from outside the class. To define a private attribute in Python, you prefix its name with double underscores (`__`). This invokes name mangling, where Python changes the attribute name to include the class name, making it more difficult to access from outside the class. #### Example: ```python class Car: def __init__(self, model): self.__model = model  # Private attribute def get_model(self): return self.__model car = Car( \"Tesla \") # print(car.__model)  # This will raise an AttributeError print(car.get_model())  # Output: Tesla ``` In this example, `__model` is a private attribute and cannot be accessed directly from outside the `Car` class. The only way to access it is through the `get_model()` method. ### 4. Comparison of Access Modifiers | Modifier   | Accessibility                                | Convention  | |------------|---------------------------------------------|-------------| | Public     | Accessible from anywhere                     | No prefix   | | Protected  | Accessible within the class and subclasses   | Single `_`  | | Private    | Accessible only within the class            | Double `__` | ### 5. Use Cases for Access Modifiers - **Public Members:** Use public members when you want to provide an interface for your class that is meant to be widely accessible. - **Protected Members:** Use protected members when you want to allow subclasses to access and modify certain attributes while hiding them from external classes. - **Private Members:** Use private members to enforce encapsulation and prevent unintended interference with the internal state of an object. ### 6. Access Modifiers in Other Languages Access modifiers in Python differ from those in languages like Java or C#. In Java, access modifiers are strictly enforced, while Python relies on conventions. In Python, the focus is more on programmer discipline rather than strict access control.\",\r\n        \"conclusion\": \"Access modifiers in Python play a crucial role in encapsulating and protecting data within classes. By understanding public, protected, and private access modifiers, you can effectively control how attributes and methods are accessed, ensuring data integrity and enhancing the maintainability of your code. Adhering to these conventions will lead to better-structured and more secure Python applications.\"\r\n    }\r\n}', ''),
(101177, 101, 3, 'Encapsulation', 'https://youtu.be/fjIUS1jlVkA?si=gOxtXDNXZFSAcFGf', '{\r\n    \"title\": \"Encapsulation in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"Encapsulation is one of the fundamental principles of object-oriented programming (OOP). It refers to the bundling of data (variables) and methods (functions) that operate on the data into a single unit, typically a class. Encapsulation also restricts direct access to some of the object\'s components, which is important for protecting the integrity of the data and preventing unintended interference.\",\r\n        \"main_content\": \"### 1. What is Encapsulation? Encapsulation involves keeping an object\'s state (its data) private and providing controlled access through public methods. This hides the internal implementation details of an object, ensuring that the data cannot be modified directly from outside the class. Instead, it can only be accessed or modified using methods defined within the class. ### 2. Public and Private Members In Python, all class attributes are public by default, meaning they can be accessed from outside the class. However, you can define private attributes by prefixing their names with double underscores (`__`). Private members cannot be accessed directly from outside the class. #### Example of encapsulation with private members: ```python class Employee: def __init__(self, name, salary): self.name = name # Public attribute self.__salary = salary # Private attribute def get_salary(self): return self.__salary def set_salary(self, salary): if salary > 0: self.__salary = salary else: print( \"Invalid salary!\") emp = Employee( \"John\", 5000) print(emp.name) # Output: John # print(emp.__salary) # This will raise an AttributeError print(emp.get_salary()) # Output: 5000 ``` In this example, `name` is a public attribute, accessible directly from outside the class, whereas `__salary` is a private attribute that can only be accessed or modified through the public `get_salary()` and `set_salary()` methods. ### 3. Benefits of Encapsulation Encapsulation provides several advantages in software development: - **Data Hiding:** It hides the internal state of an object from the outside world, which reduces the risk of data corruption. - **Controlled Access:** It ensures that data can only be accessed or modified through designated methods, allowing better control over how attributes are manipulated. - **Modularity:** Encapsulation helps break the code into modular components, making it easier to understand, maintain, and debug. - **Security:** By preventing unauthorized access to an object\'s internal data, encapsulation enhances the security of the application. ### 4. Getter and Setter Methods Encapsulation often involves the use of getter and setter methods to control access to private attributes. Getter methods return the value of a private attribute, while setter methods allow you to update it, often with some validation. #### Example of getters and setters: ```python class Student: def __init__(self, name, grade): self.__name = name # Private attribute self.__grade = grade # Private attribute def get_name(self): return self.__name def set_name(self, name): self.__name = name def get_grade(self): return self.__grade def set_grade(self, grade): if grade >= 0 and grade <= 100: self.__grade = grade else: print( \"Invalid grade!\") student = Student( \"Alice\", 85) print(student.get_name()) # Output: Alice student.set_grade(90) print(student.get_grade()) # Output: 90 ``` This example demonstrates how encapsulation is implemented through getters and setters. The private attributes `__name` and `__grade` can only be accessed or modified using these methods, ensuring that the data is managed securely and consistently. ### 5. Name Mangling Python uses a technique called *name mangling* to make private variables inaccessible from outside the class. When you define a private attribute with a double underscore (`__`), Python internally changes its name by adding `_ClassName` as a prefix. This prevents accidental access to private attributes, although they can still be accessed if necessary (but not recommended). #### Example of name mangling: ```python class Car: def __init__(self, model): self.__model = model car = Car( \"Tesla\") # Accessing private attribute using name mangling (not recommended) print(car._Car__model) # Output: Tesla ``` While this method allows access to private attributes, it\'s discouraged because it defeats the purpose of encapsulation. ### 6. Encapsulation in Python vs Other Languages Unlike some other languages like Java or C++, Python does not enforce strict access control. While Python uses name mangling for private members, it relies on the convention rather than strict enforcement to control access. In Python, private members are just a way to signal to the programmer that they should not be accessed directly, but they are not truly inaccessible as in other languages.\",\r\n        \"conclusion\": \"Encapsulation is a key principle in object-oriented programming that helps ensure data integrity and security by restricting direct access to an object\'s attributes. By using private members and providing controlled access through getter and setter methods, you can maintain control over how data is modified and accessed within your code. This leads to more modular, maintainable, and secure applications.\"\r\n    }\r\n}', ''),
(101178, 101, 3, 'Polymorphism', 'https://youtu.be/UPT4Q_sTOpY?si=CtQcazrIJH7dCkVu', '{\r\n    \"title\": \"Polymorphism in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"Polymorphism is a fundamental concept in object-oriented programming (OOP) that allows different objects to be treated in the same way, even if they come from different classes. It is based on the idea of \'many forms,\' where a single function or method can work with objects of different types. In Python, polymorphism is implemented through methods and operator overloading, enabling flexible and reusable code.\",\r\n        \"main_content\": \"### 1. What is Polymorphism? Polymorphism refers to the ability of different objects to respond to the same method call in a way that is specific to their type. It allows the same interface (such as a method name) to be used for objects of different classes. This enhances flexibility and simplifies code maintenance. ### 2. Polymorphism with Methods In Python, polymorphism is often implemented by defining the same method in different classes. The method behaves differently depending on the type of object that calls it. #### Example of polymorphism with methods: ```python class Dog: def speak(self): return  \"Woof!\" class Cat: def speak(self): return  \"Meow!\" animals = [Dog(), Cat()] for animal in animals: print(animal.speak()) ``` In this example, both the `Dog` and `Cat` classes have a `speak()` method, but each class provides a different implementation. The for loop iterates over a list of animals and calls the `speak()` method, which behaves differently based on the object type. ### 3. Polymorphism with Inheritance Polymorphism is closely tied to inheritance, where a parent class defines methods that are inherited by child classes. The child classes can override these methods to provide specific behavior. #### Example: ```python class Animal: def speak(self): pass  # Abstract method class Dog(Animal): def speak(self): return  \"Woof!\" class Cat(Animal): def speak(self): return  \"Meow!\" animals = [Dog(), Cat()] for animal in animals: print(animal.speak()) ``` Here, the `Animal` class defines a generic `speak()` method, which is overridden in the `Dog` and `Cat` classes. This demonstrates polymorphism via inheritance, where different subclasses implement the same method in their own way. ### 4. Polymorphism with Functions Polymorphism can also be applied to functions that operate on objects of different types. This allows you to define a function that can handle different types of objects by calling their respective methods. #### Example of polymorphism in functions: ```python def animal_sound(animal): print(animal.speak()) animal_sound(Dog())  # Output: Woof! animal_sound(Cat())  # Output: Meow! ``` In this example, the `animal_sound()` function can accept any object as an argument, as long as the object has a `speak()` method. The function behaves polymorphically by calling the `speak()` method appropriate for the given object. ### 5. Polymorphism with Operator Overloading Polymorphism can also be implemented through operator overloading, where the same operator behaves differently depending on the operands\' types. Python allows operators like `+`, `*`, and `==` to be overloaded for user-defined types (as discussed in operator overloading). #### Example of polymorphism with operator overloading: ```python class Number: def __init__(self, value): self.value = value def __add__(self, other): return self.value + other.value num1 = Number(5) num2 = Number(10) print(num1 + num2)  # Output: 15 ``` In this case, the `+` operator is overloaded to work with objects of the `Number` class, allowing for polymorphic behavior when adding two `Number` objects.\",\r\n        \"conclusion\": \"Polymorphism is a key feature of object-oriented programming that promotes code flexibility and reusability. By allowing objects of different types to be treated uniformly, polymorphism simplifies function definitions, supports method overriding, and enables operator overloading. Understanding and leveraging polymorphism helps create more adaptable and maintainable code, a critical skill in software development.\"\r\n    }\r\n}', ''),
(101179, 101, 3, 'Operators Overloading', 'https://youtu.be/CGZJ-d4T5eQ?si=CBi1fRsoCIXCGJ7i', '{\r\n    \"title\": \"Operator Overloading in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"Operator overloading in Python allows developers to redefine the behavior of operators for user-defined types (like classes). It provides a way to use operators such as `+`, `-`, `*`, and others with custom objects, enabling intuitive operations that mirror how these operators work with built-in types.\",\r\n        \"main_content\": \"### 1. What is Operator Overloading?\\nOperator overloading enables custom behavior when operators are used with objects of a user-defined class. In Python, every operator corresponds to a special method (called a magic method or dunder method) that you can override in your class.\\n\\nFor example, the addition operator `+` is linked to the `__add__()` method. By implementing or overriding this method in a class, you can define how the `+` operator works with instances of that class.\\n\\n### 2. Example of Operator Overloading\\nLet\'s consider a class that represents a mathematical vector. We can overload the `+` operator to allow addition of two vectors:\\n```python\\nclass Vector:\\n    def __init__(self, x, y):\\n        self.x = x\\n        self.y = y\\n\\n    def __add__(self, other):\\n        return Vector(self.x + other.x, self.y + other.y)\\n\\n    def __repr__(self):\\n        return f\'Vector({self.x}, {self.y})\'\\nv1 = Vector(2, 3)\\nv2 = Vector(5, 7)\\nresult = v1 + v2\\nprint(result)  # Output: Vector(7, 10)\\n```\\nHere, the `__add__()` method is overloaded to define how the `+` operator works for Vector objects.\\n\\n### 3. Common Magic Methods for Operator Overloading\\nBelow are some of the most common operators and their corresponding magic methods that you can overload:\\n- `+`  : `__add__(self, other)`\\n- `-`  : `__sub__(self, other)`\\n- `*`  : `__mul__(self, other)`\\n- `/`  : `__truediv__(self, other)`\\n- `%`  : `__mod__(self, other)`\\n- `**` : `__pow__(self, other)`\\n- `==` : `__eq__(self, other)`\\n- `<`  : `__lt__(self, other)`\\n- `>`  : `__gt__(self, other)`\\nYou can override any of these methods in your class to define custom behavior for your objects.\\n\\n### 4. Overloading Comparison Operators\\nIn addition to arithmetic operators, you can also overload comparison operators such as `==`, `<`, and `>`. This is useful when you want to define how instances of your class should be compared.\\n\\nExample of overloading `==` and `<` operators:\\n```python\\nclass Point:\\n    def __init__(self, x, y):\\n        self.x = x\\n        self.y = y\\n\\n    def __eq__(self, other):\\n        return self.x == other.x and self.y == other.y\\n\\n    def __lt__(self, other):\\n        return (self.x + self.y) < (other.x + other.y)\\np1 = Point(1, 2)\\np2 = Point(1, 2)\\np3 = Point(2, 3)\\nprint(p1 == p2)  # Output: True\\nprint(p1 < p3)   # Output: True\\n```\\nHere, the `__eq__()` method checks whether two points have the same coordinates, while the `__lt__()` method compares their summed coordinates.\\n\\n### 5. Overloading Unary Operators\\nYou can also overload unary operators like `-` (negation) and `+` (positive). These operators work with only one operand.\\n\\nExample of overloading the unary `-` operator:\\n```python\\nclass Number:\\n    def __init__(self, value):\\n        self.value = value\\n\\n    def __neg__(self):\\n        return -self.value\\nnum = Number(5)\\nprint(-num)  # Output: -5\\n```\\nHere, the `__neg__()` method is used to define the behavior of the unary minus operator `-` for the `Number` class.\\n\\n### 6. Limitations of Operator Overloading\\nWhile operator overloading can make your code more intuitive and user-friendly, it should be used cautiously to avoid confusion. Overloading operators in an unexpected or non-standard way can lead to maintenance challenges and decrease code readability. Make sure the behavior you define aligns with what users would naturally expect from the operators.\",\r\n        \"conclusion\": \"Operator overloading in Python provides flexibility to customize the behavior of standard operators for user-defined classes. By overriding magic methods such as `__add__()` and `__eq__()`, you can define how your objects interact with common operators. However, operator overloading should be used judiciously to ensure that your code remains intuitive and maintainable.\"\r\n    }\r\n}', ''),
(101180, 101, 3, 'Method Overloading', 'https://youtu.be/1gJQMSZ05HA?si=hqGLWVB8AD1bHRUe', '{\r\n    \"title\": \"Method Overloading in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"Method overloading is a concept where multiple methods with the same name can exist in a class but with different signatures (i.e., different parameters). Although Python does not natively support method overloading like other languages (such as Java or C++), you can achieve similar behavior using default parameters, variable-length arguments, and type checking.\",\r\n        \"main_content\": \"### 1. What is Method Overloading? In traditional method overloading, a class can have multiple methods with the same name, but they differ in the number of parameters or the type of the parameters. Depending on how many arguments you provide, the appropriate version of the method is invoked. Example in languages like Java:```java // Java method overloading example class Example { public int add(int a, int b) { return a + b; } public double add(double a, double b) { return a + b; } }``` In Python, you cannot define multiple methods with the same name and different signatures. Instead, you can use default parameters, variable-length arguments (`*args`, `**kwargs`), and type checking to achieve similar behavior. Here is an example in Python: ```python def add(a, b=0): if isinstance(a, str): return a + b # Concatenates if both are strings return a + b # Adds if both are numbers print(add(5))  # Output: 5 print(add(5, 10))  # Output: 15 print(add(\'Hello\', \'World\'))  # Output: \'HelloWorld\' (concatenates strings) ``` In this example, the same `add` function is able to handle both integer addition and string concatenation depending on the type of arguments passed to it.\"\r\n    }\r\n}', ''),
(101181, 101, 3, 'pip & PyPI', 'https://youtu.be/h2fu66y0_uA?si=dLarp3Cx93b4QHxE', '{\r\n    \"title\": \"pip & PyPI\",\r\n    \"content\": {\r\n        \"introduction\": \"In Python, pip is the package installer used to install and manage packages from the Python Package Index (PyPI). PyPI is a repository that hosts thousands of third-party packages that extend Python’s functionality. Using pip, developers can install, update, and remove these packages efficiently, making it a crucial tool for Python development.\",\r\n        \"main_content\": \"### 1. What is pip?\\n pip is a command-line utility that allows you to manage Python packages. It simplifies the process of installing, upgrading, and uninstalling packages. \\n - To check if pip is installed, run the following command: \\n bash \\n pip --version \\n \\n If pip is not installed, you can install it by following the instructions on [pip\'s official website](https://pip.pypa.io/en/stable/installation/). \\n \\n### 2. Installing Packages with pip \\n To install a package using pip, use the following command: \\n ```bash \\n pip install package_name \\n ``` \\n For example, to install the popular requests package: \\n ```bash \\n pip install requests \\n ``` \\n This command will download and install the package from PyPI and its dependencies if required. \\n \\n### 3. PyPI (Python Package Index) \\n PyPI is the official third-party software repository for Python packages. It hosts thousands of libraries and tools that developers can use in their projects. You can browse available packages at [pypi.org](https://pypi.org). \\n - PyPI allows developers to share their libraries with the Python community and enables easy installation and management of packages via pip. \\n \\n### 4. Basic pip Commands \\n - **Installing a package:** \\n ```bash \\n pip install package_name \\n ``` \\n - **Upgrading a package to the latest version:** \\n ```bash \\n pip install --upgrade package_name \\n ``` \\n - **Uninstalling a package:** \\n ```bash \\n pip uninstall package_name \\n ``` \\n - **Listing installed packages:** \\n ```bash \\n pip list \\n ``` \\n - **Showing package information:** \\n ```bash \\n pip show package_name \\n ``` \\n \\n### 5. Requirements Files \\n A requirements.txt file is commonly used in Python projects to list all the packages and their versions required for the project. You can install all the required packages using this file. \\n - Example of a requirements.txt file: \\n ``` \\n requests==2.25.1 \\n numpy==1.19.5 \\n ``` \\n - To install packages from this file: \\n ```bash \\n pip install -r requirements.txt \\n ``` \\n \\n### 6. Virtual Environments and pip \\n It is a best practice to use virtual environments to manage project-specific dependencies. Virtual environments allow you to isolate the packages for each project. \\n - Create a virtual environment: \\n ```bash \\n python -m venv myenv \\n ``` \\n - Activate the virtual environment: \\n - On Windows: \\n ```bash \\n myenv\\Scripts\\activate \\n ``` \\n - On macOS/Linux: \\n ```bash \\n source myenv/bin/activate \\n ``` \\n Once activated, you can install packages using pip, and they will only be available inside that virtual environment. \\n \\n### 7. Publishing Packages to PyPI \\n Python developers can publish their own packages to PyPI, making them available for others to install using pip. \\n - **Steps to publish a package to PyPI:** \\n 1. Create a setup.py file for your project that defines the package name, version, description, and dependencies. \\n 2. Build a distribution using setuptools. \\n ```bash \\n python setup.py sdist bdist_wheel \\n ``` \\n 3. Upload the distribution to PyPI using twine. \\n ```bash \\n twine upload dist/* \\n ``` \\n \\n### 8. Alternative Python Repositories \\n Although PyPI is the default repository used by pip, you can configure pip to install packages from other repositories or from local files. \\n - Install a package from a custom URL: \\n ```bash \\n pip install --index-url <repository_url> package_name \\n ``` \\n\",\r\n        \"conclusion\": \"pip and PyPI together form the backbone of Python\'s package management system, enabling developers to install and share packages with ease. Understanding how to use pip effectively is crucial for managing dependencies and ensuring smooth project development. By mastering these tools, developers can streamline their workflows and contribute to the Python ecosystem.\"\r\n    }\r\n}', '');
INSERT INTO `python_course` (`id`, `course_id`, `level`, `topic_name`, `video_url`, `articles`, `created_at`) VALUES
(101182, 101, 3, 'Package in Python', 'https://youtu.be/bcDMDlH3Vu8?si=OlCBv0KIcOdBTRqr', '{\r\n    \"title\": \"Package in Python\",\r\n    \"content\": {\r\n        \"introduction\": \"In Python, a package is a way of organizing related modules into a single directory. Packages allow for the structuring of large codebases into manageable modules, enabling better code organization, reuse, and maintainability. A package contains a special file called __init__.py, which differentiates it from a normal directory and signifies that it is a package.\",\r\n        \"main_content\": \"### 1. What is a Python Package?\\n   A Python package is essentially a directory that contains multiple modules. It can also contain sub-packages, making it a hierarchical structure of modules.\\n   - Example directory structure of a package: \\n   ```\\n   mypackage/\\n   ├── __init__.py\\n   ├── module1.py\\n   ├── module2.py\\n   └── subpackage/\\n       ├── __init__.py\\n       └── submodule.py\\n   ```\\n   In the example above, `mypackage` is the main package, and `subpackage` is a sub-package inside `mypackage`.\\n\\n### 2. Creating a Python Package\\n   To create a package, you need to create a directory and add an `__init__.py` file inside it. The `__init__.py` file can be empty or contain initialization code for the package.\\n   - Example: \\n   ```bash\\n   mkdir mypackage\\n   touch mypackage/__init__.py\\n   ```\\n   Now, you can add Python modules inside the package.\\n\\n### 3. Importing from a Package\\n   Once a package is created, you can import modules from it using dot notation.\\n   - Example: Importing a module from a package.\\n   ```python\\n   from mypackage import module1\\n   module1.some_function()\\n   ```\\n   You can also import specific functions or variables directly: \\n   ```python\\n   from mypackage.module1 import some_function\\n   some_function()\\n   ```\\n\\n### 4. Sub-Packages\\n   A package can also contain sub-packages, which are simply directories within the main package that have their own `__init__.py` files.\\n   - Example: \\n   ```python\\n   from mypackage.subpackage import submodule\\n   submodule.some_function()\\n   ```\\n\\n### 5. Role of `__init__.py`\\n   The `__init__.py` file plays a key role in the package by initializing the package when it is imported. It can be used to define package-wide variables, import sub-modules, or perform setup tasks.\\n   - Example `__init__.py` file: \\n   ```python\\n   from .module1 import some_function\\n   __all__ = [\'some_function\']  # Controls what is exported when using \'from package import *\'\\n   ```\\n\\n### 6. Using `pip` to Install Packages\\n   Python comes with a package manager called `pip` that allows you to install third-party packages from the Python Package Index (PyPI).\\n   - Example: Installing a package with `pip`.\\n   ```bash\\n   pip install requests\\n   ```\\n   After installation, you can import the installed package in your code: \\n   ```python\\n   import requests\\n   response = requests.get(\'https://example.com\')\\n   ```\\n\\n### 7. Namespace Packages\\n   In Python, namespace packages allow multiple directories to contribute to the same package. This can be useful when a large package is developed across multiple projects or teams.\\n   - A namespace package does not require an `__init__.py` file.\\n\\n### 8. Best Practices for Organizing Packages\\n   - **Use meaningful names:** The package and module names should reflect their functionality.\\n   - **Limit complexity:** Avoid creating deeply nested sub-packages unless necessary.\\n   - **Document your package:** Provide clear documentation within each module and package.\\n\",\r\n        \"conclusion\": \"Packages in Python provide a structured way to organize large codebases, making it easier to manage and reuse code across projects. By understanding how to create and use packages, you can improve the modularity and scalability of your Python programs. As you advance, you can explore more complex packaging solutions, including creating and distributing your own Python packages on PyPI.\"\r\n    }\r\n}', ''),
(101183, 101, 3, 'Turtles Graphics Part1', 'https://youtu.be/BxYR_sABIww?si=TpBkxtz13Fpj6Bta', '{\r\n    \"title\": \"Turtle Graphics Part 1\",\r\n    \"content\": {\r\n        \"introduction\": \"The turtle module in Python provides a fun and interactive way to create drawings and animations using code. It is particularly useful for beginners learning the basics of programming because it offers a visual representation of code execution. In this tutorial, we will explore the basics of using the turtle module to draw simple shapes and control the turtle\'\'s movement on the screen.\",\r\n        \"main_content\": \"### Getting Started with Turtle Graphics\\n\\n1. **Importing the Turtle Module**: \\n - To begin using turtle graphics, you need to import the turtle module. \\n ```python \\n import turtle \\n ``` \\n\\n2. **Creating a Turtle Object**: \\n - You create a turtle object that you can control. The turtle moves around the screen, leaving a trail behind, much like a pen or a pencil. \\n ```python \\n t = turtle.Turtle() \\n ``` \\n\\n3. **Moving the Turtle**: \\n - You can use commands to move the turtle around the screen. Common commands include: \\n - `t.forward(distance)`: Move the turtle forward by a specified distance. \\n - `t.backward(distance)`: Move the turtle backward by a specified distance. \\n - `t.right(angle)`: Turn the turtle right by a specified angle (in degrees). \\n - `t.left(angle)`: Turn the turtle left by a specified angle. \\n ```python \\n t.forward(100) # Moves the turtle forward by 100 units \\n t.right(90) # Turns the turtle right by 90 degrees \\n t.forward(50) # Moves the turtle forward by 50 units \\n ``` \\n\\n4. **Changing the Turtle\'\'s Appearance**: \\n - You can change the turtle\'\'s shape and color to make your drawings more interesting. \\n - `t.shape(\'turtle\')`: Changes the turtle\'\'s shape to resemble a turtle. \\n - `t.color(\'blue\')`: Sets the turtle\'\'s pen color to blue. \\n ```python \\n t.shape(\'turtle\') # Changes the turtle\'\'s appearance to look like a turtle \\n t.color(\'blue\') # Changes the turtle\'\'s pen color to blue \\n ``` \\n\\n5. **Drawing Simple Shapes**: \\n - Using a combination of forward movements and turns, you can draw various shapes. For example, to draw a square, you can repeat a forward movement and a 90-degree turn four times. \\n ```python \\n for _ in range(4): \\n t.forward(100) \\n t.right(90) \\n ``` \\n This code will draw a square. \\n\\n### Clearing the Screen and Resetting the Turtle \\n- You can clear the screen using the `turtle.clearscreen()` function, which will remove all drawings but keep the turtle in the same place. \\n- If you want to reset both the screen and the turtle position, you can use the `turtle.reset()` function. \\n\\n### Conclusion \\nTurtle graphics is an excellent way to visualize code execution and understand how different programming concepts such as loops, conditionals, and functions work. With basic commands, you can create various shapes and patterns, which lays the foundation for more advanced projects in Turtle Graphics Part 2.\"\r\n    }\r\n}', ''),
(101184, 101, 3, 'Turtles Graphics Part2', 'https://youtu.be/UmwQ1ROPYBs?si=lz8KvaTFFprzEI-i', '{\r\n    \"title\": \"Turtle Graphics Part 2\",\r\n    \"content\": {\r\n        \"introduction\": \"In Part 2 of Turtle Graphics, we will build on the basics covered in Part 1 and explore more advanced features of the turtle module. This will include creating complex shapes, using loops for repetitive patterns, customizing the turtle’s pen, and controlling the screen settings.\",\r\n        \"main_content\": \"### 1. Using Loops for Complex Shapes\\n   Loops are useful for drawing repetitive patterns or complex shapes. Instead of writing each line individually, you can use a loop to repeat a set of instructions.\\n   - Example: Drawing a hexagon using a `for` loop.\\n   ```python\\n   for _ in range(6):\\n       t.forward(100)\\n       t.right(60)\\n   ```\\n   This code draws a hexagon, where each side is 100 units long and each turn is 60 degrees.\\n\\n### 2. Nested Loops for Advanced Patterns\\n   You can nest loops inside one another to create intricate designs. A nested loop allows you to repeat one action multiple times within another repeating action.\\n   - Example: Drawing multiple concentric circles.\\n   ```python\\n   for i in range(10):\\n       t.circle(50 + i * 10)\\n       t.right(36)\\n   ```\\n   This will create 10 circles, each with increasing radii, rotated slightly from the previous one.\\n\\n### 3. Changing the Pen’s Attributes\\n   You can customize the pen to create more interesting drawings by modifying the pen’s size, color, and fill behavior.\\n   - **Changing Pen Size**: Use `t.pensize(size)` to change the thickness of the turtle’s pen.\\n   ```python\\n   t.pensize(5)  # Sets the pen size to 5 units\\n   t.forward(100)\\n   ```\\n   - **Changing Pen Color**: You can change the pen color to add variety to your drawings using `t.pencolor(color)`.\\n   ```python\\n   t.pencolor(\'red\')  # Changes the pen color to red\\n   t.forward(100)\\n   ```\\n   - **Filling Shapes with Color**: You can also fill shapes with color using the `begin_fill()` and `end_fill()` methods.\\n   ```python\\n   t.begin_fill()      # Starts filling with the current pen color\\n   t.circle(50)        # Draws a circle\\n   t.end_fill()        # Ends the fill\\n   ```\\n\\n### 4. Controlling the Turtle\'s Speed\\n   - You can adjust the speed of the turtle using `t.speed(speed_value)`. The speed value can range from 1 (slow) to 10 (fast) or you can set it to 0 for the fastest drawing speed.\\n   ```python\\n   t.speed(3)  # Slows down the turtle to a speed of 3\\n   t.forward(100)\\n   ```\\n\\n### 5. Working with Screen Settings\\n   The turtle module allows you to control screen settings, such as the background color and window title.\\n   - **Changing the Background Color**: You can change the background color of the screen using `turtle.Screen().bgcolor(\'color\')`.\\n   ```python\\n   screen = turtle.Screen()\\n   screen.bgcolor(\'lightblue\')  # Sets the background to light blue\\n   ```\\n   - **Setting the Window Title**: You can also change the title of the window using `screen.title(\'Your Title\')`.\\n   ```python\\n   screen.title(\'Turtle Graphics Project\')  # Changes the window title\\n   ```\\n\\n### 6. Clearing the Screen\\n   To clear the screen or reset the turtle’s position and direction, you can use the `turtle.clearscreen()` or `t.reset()` methods.\\n   ```python\\n   t.clear()  # Clears all drawings from the screen\\n   t.reset()  # Resets the turtle to its initial state\\n   ```\",\r\n        \"conclusion\": \"Turtle Graphics Part 2 introduces more advanced features of the turtle module, allowing for the creation of complex and dynamic patterns. By mastering the use of loops, pen customization, screen settings, and advanced turtle control, you can create intricate graphics and improve your Python coding skills. In the next section, we will explore more complex projects, including animations and user interactions.\"\r\n    }\r\n}', ''),
(101185, 101, 3, 'Project #4 Turtle Race', 'https://youtu.be/y38sbuRjhAs?si=mpJ_DCehNgMCUhq6', '{\r\n    \"title\": \"Project #4: Turtle Race\",\r\n    \"content\": {\r\n        \"introduction\": \"In this project, you will create a simple and fun turtle race game using the Python `turtle` module. This project will introduce you to basic graphics programming and event-driven programming in Python. The objective is to have multiple turtles race across the screen, with random movement, and determine a winner.\",\r\n        \"main_content\": \"### Project Objective\\nBuild a turtle race simulation where several turtles move at random speeds to the finish line, and the program declares the winner.\\n\\n### Steps to Complete the Project:\\n\\n1. **Import the `turtle` and `random` modules**:\\n   - Use the `turtle` module for drawing and `random` for generating random speeds for the turtles.\\n\\n   Example:\\n   ```python\\n   import turtle\\n   import random\\n   ```\\n\\n2. **Set up the screen and turtle environment**:\\n   - Create a screen using the `turtle.Screen()` object.\\n   - Define the dimensions of the race track and setup the start and finish lines.\\n\\n   Example:\\n   ```python\\n   screen = turtle.Screen()\\n   screen.setup(width=600, height=400)\\n   ```\\n\\n3. **Create multiple turtles**:\\n   - Use the `turtle.Turtle()` class to create a turtle for each racer.\\n   - Customize each turtle by changing their colors and starting positions.\\n\\n   Example:\\n   ```python\\n   colors = [\'red\', \'blue\', \'green\', \'yellow\', \'purple\']\\n   turtles = []\\n   start_y = -100\\n   for color in colors:\\n       racer = turtle.Turtle(shape=\'turtle\')\\n       racer.color(color)\\n       racer.penup()\\n       racer.goto(-250, start_y)\\n       start_y += 50\\n       turtles.append(racer)\\n   ```\\n\\n4. **Move the turtles randomly**:\\n   - Create a loop that moves each turtle forward by a random number of units on each iteration, simulating the race.\\n\\n   Example:\\n   ```python\\n   winner = None\\n   while not winner:\\n       for racer in turtles:\\n           distance = random.randint(1, 10)\\n           racer.forward(distance)\\n           if racer.xcor() > 250:  # Finish line at x=250\\n               winner = racer\\n               break\\n   ```\\n\\n5. **Declare the winner**:\\n   - Once a turtle reaches the finish line, print a message announcing the winner based on its color.\\n\\n   Example:\\n   ```python\\n   print(f\"The winner is {winner.color()[0]}!\")\\n   ```\\n\\n### Example Output\\nThe turtle race will display turtles racing across the screen, and the program will announce the winner. The output will look like:\\n```\\nThe winner is blue!\\n```\\n\\n### Conclusion\\nThe Turtle Race project introduces you to the basics of using the `turtle` module for graphics, and the `random` module for generating random movements. This project enhances your understanding of loops, conditionals, and graphics programming in Python. It\'s a fun way to practice coding and see immediate visual results!\"\r\n    }\r\n}', '');

-- --------------------------------------------------------

--
-- Table structure for table `python_qna`
--

CREATE TABLE `python_qna` (
  `id` int(11) NOT NULL,
  `questions` varchar(255) NOT NULL,
  `option_1` varchar(255) NOT NULL,
  `option_2` varchar(255) NOT NULL,
  `option_3` varchar(255) NOT NULL,
  `option_4` varchar(255) NOT NULL,
  `correct_option` varchar(255) NOT NULL,
  `level` int(11) NOT NULL,
  `title` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `python_qna`
--

INSERT INTO `python_qna` (`id`, `questions`, `option_1`, `option_2`, `option_3`, `option_4`, `correct_option`, `level`, `title`) VALUES
(1, 'Which of the following is a feature of Python?', 'Strongly Typed', 'Interpreted Language', 'Compiled Language', 'Low-Level Language', 'Interpreted Language', 1, 'Introduction to Python'),
(2, 'Who created Python?', 'Guido van Rossum', 'James Gosling', 'Bjarne Stroustrup', 'Dennis Ritchie', 'Guido van Rossum', 1, 'Introduction to Python'),
(3, 'Which website is the official source to download Python?', 'python.org', 'python.com', 'pythondownloads.com', 'python.net', 'python.org', 1, 'Downloading and Installing Python'),
(4, 'What is the standard file extension for Python files?', '.pt', '.py', '.pyn', '.python', '.py', 1, 'Downloading and Installing Python'),
(5, 'What tool can be used to manage Python packages?', 'pip', 'npm', 'gem', 'composer', 'pip', 1, 'Downloading and Installing Python'),
(6, 'In which year was Python first released?', '1990', '1991', '1995', '2000', '1991', 1, 'History of Python'),
(7, 'Which version of Python introduced list comprehensions?', 'Python 2.0', 'Python 3.0', 'Python 1.5', 'Python 1.0', 'Python 2.0', 1, 'History of Python'),
(8, 'Who is considered the father of Python?', 'Guido van Rossum', 'Bjarne Stroustrup', 'James Gosling', 'Dennis Ritchie', 'Guido van Rossum', 1, 'History of Python'),
(9, 'What is the output of print(\"Hello, World!\")?', 'Hello, World!', 'Hello World', 'Error', 'None', 'Hello, World!', 1, 'First Python Program'),
(10, 'Which of the following is the correct syntax for defining a function in Python?', 'def function_name():', 'function function_name[]:', 'define function_name{}', 'function_name() =', 'def function_name():', 1, 'First Python Program'),
(11, 'What symbol is used to start a comment in Python?', '#', '//', '/*', '--', '#', 1, 'First Python Program'),
(12, 'Which operator is used for string concatenation in Python?', '+', '&', '|', '*', '+', 1, 'String Concatenation'),
(13, 'What will be the output of \"Hello\" + \"World\"?', 'HelloWorld', 'Hello World', 'Hello+World', 'Hello*World', 'HelloWorld', 1, 'String Concatenation'),
(14, 'What function is used to combine multiple strings in Python?', 'combine()', 'concat()', 'join()', 'append()', 'join()', 1, 'String Concatenation'),
(15, 'Which function is used to get user input in Python?', 'input()', 'get()', 'read()', 'scan()', 'input()', 1, 'User Input'),
(16, 'What will be the type of input received from input() function?', 'int', 'float', 'str', 'bool', 'str', 1, 'User Input'),
(17, 'How do you convert a string input to an integer in Python?', 'int(input())', 'str(input())', 'float(input())', 'convert(input())', 'int(input())', 1, 'User Input'),
(18, 'Which of the following is a valid variable name in Python?', '1variable', '_variable', 'variable-1', 'variable name', '_variable', 1, 'Variables'),
(19, 'What is the default value of a variable in Python?', 'None', '0', 'False', 'Empty string', 'None', 1, 'Variables'),
(20, 'Which keyword is used to declare a variable in Python?', 'var', 'let', 'const', 'No keyword needed', 'No keyword needed', 1, 'Variables'),
(21, 'Which of the following characters is NOT allowed in variable names?', 'underscore', 'letter', 'digit', '-', '-', 1, 'Variable Naming Rules'),
(22, 'Variable names in Python are case sensitive. True or False?', 'True', 'False', 'Depends on the version', 'None of the above', 'True', 1, 'Variable Naming Rules'),
(23, 'What is the maximum length of a variable name in Python?', 'No limit', '79 characters', '255 characters', '32 characters', 'No limit', 1, 'Variable Naming Rules'),
(24, 'Which of the following is not a built-in data type in Python?', 'List', 'Set', 'Character', 'Dictionary', 'Character', 2, 'Data Types'),
(25, 'What is the output of type(3.14) in Python?', '<class \'int\'>', '<class \'float\'>', '<class \'str\'>', '<class \'list\'>', '<class \'float\'>', 2, 'Data Types'),
(26, 'Which data type is used to store a sequence of characters in Python?', 'List', 'String', 'Tuple', 'Set', 'String', 2, 'Data Types'),
(27, 'Which function is used to check the data type of a variable in Python?', 'type()', 'isinstance()', 'check_type()', 'var_type()', 'type()', 2, 'Type Checking & Type Conversion'),
(28, 'What is the result of int(\"123\") in Python?', '123.0', '\"123\"', '123', 'Error', '123', 2, 'Type Checking & Type Conversion'),
(29, 'Which of the following converts a float to an integer in Python?', 'round()', 'abs()', 'float()', 'int()', 'int()', 2, 'Type Checking & Type Conversion'),
(30, 'What is the output of 5 % 2 in Python?', '1', '2', '0', '5', '1', 2, 'Arithmetic Operators'),
(31, 'What does the ** operator do in Python?', 'Addition', 'Subtraction', 'Exponentiation', 'Division', 'Exponentiation', 2, 'Arithmetic Operators'),
(32, 'What is the output of 10 // 3 in Python?', '3.33', '3', '3.0', '4', '3', 2, 'Arithmetic Operators'),
(33, 'What does the operator `==` do in Python?', 'Assigns value', 'Compares two values', 'Checks if both are true', 'None of the above', 'Compares two values', 2, 'Assignment & Comparison Operators'),
(34, 'What is the output of `x = 5; x += 2`?', '7', '5', '2', 'Error', '7', 2, 'Assignment & Comparison Operators'),
(35, 'Which of the following is a comparison operator?', '=', '==', '+=', 'None of the above', '==', 2, 'Assignment & Comparison Operators'),
(36, 'What does the `and` operator do in Python?', 'Returns True if both are true', 'Returns True if one is true', 'Negates a condition', 'None of the above', 'Returns True if both are true', 2, 'Logical Operators'),
(37, 'What will `True and False` evaluate to?', 'True', 'False', '1', 'None', 'False', 2, 'Logical Operators'),
(38, 'Which operator is used for logical NOT?', '!', 'not', '&&', '||', 'not', 2, 'Logical Operators'),
(39, 'What is the result of 5 | 3 in Python?', '5', '6', '7', '8', '7', 2, 'Bitwise Operators'),
(40, 'Which of the following is a bitwise operator?', '&', '&&', '||', '==', '&', 2, 'Bitwise Operators'),
(41, 'What will be the output of `a is b` if both refer to the same object?', 'True', 'False', 'Error', 'None of the above', 'True', 2, 'Identity Operators'),
(42, 'Which operator checks if two variables point to the same object?', '==', 'is', '!=', 'None of the above', 'is', 2, 'Identity Operators'),
(43, 'What does the `in` operator do in Python?', 'Checks if a value exists in a sequence', 'Checks if two variables are equal', 'Compares data types', 'None of the above', 'Checks if a value exists in a sequence', 2, 'Membership Operators'),
(44, 'What will be the output of `3 in [1, 2, 3]`?', 'True', 'False', 'None', 'Error', 'True', 2, 'Membership Operators'),
(45, 'Which of the following is a membership operator?', 'in', '&&', '==', 'or', 'in', 2, 'Membership Operators'),
(46, 'What does the round() function do in Python?', 'Rounds a number to the nearest integer', 'Converts a float to int', 'Returns the floor of a number', 'None of the above', 'Rounds a number to the nearest integer', 2, 'Round() Function'),
(47, 'What will `round(2.5)` return in Python?', '2', '3', '2.5', 'None of the above', '3', 2, 'Round() Function'),
(48, 'How many decimal places can you round to using the round() function?', '1', '2', 'Any number', 'Only 0', 'Any number', 2, 'Round() Function'),
(49, 'What is an f-string in Python?', 'A string that starts with f and allows expressions inside', 'A formatted string using format()', 'A type of list', 'None of the above', 'A string that starts with f and allows expressions inside', 2, 'F-Strings in Python'),
(50, 'How do you access a variable `name` in an f-string?', '\"My name is {name}\"', '\"My name is $name\"', '\"My name is @name\"', 'None of the above', '\"My name is {name}\"', 2, 'F-Strings in Python'),
(51, 'Which version of Python introduced f-strings?', 'Python 2.7', 'Python 3.5', 'Python 3.6', 'Python 3.8', 'Python 3.6', 2, 'F-Strings in Python'),
(52, 'What is the purpose of the if-else statement in Python?', 'To execute code based on a condition', 'To create loops', 'To define functions', 'None of the above', 'To execute code based on a condition', 2, 'if-else Statements'),
(53, 'Which of the following is the correct syntax for an if statement in Python?', 'if condition: do_something', 'if condition then do_something', 'if (condition) { do_something }', 'None of the above', 'if condition: do_something', 2, 'if-else Statements'),
(54, 'What will be the output of `x = 10; if x < 5: print(\"Low\") else: print(\"High\")`?', '\"Low\"', '\"High\"', 'Error', 'None of the above', '\"High\"', 2, 'if-else Statements'),
(55, 'What does an elif statement do?', 'Provides a new condition if the if condition is false', 'Ends the if statement', 'Creates a loop', 'None of the above', 'Provides a new condition if the if condition is false', 2, 'Nested if & elif'),
(56, 'What will be the output of `x = 10; if x > 5: if x < 15: print(\"In range\") else: print(\"Out of range\")`?', '\"In range\"', '\"Out of range\"', 'Error', 'None of the above', '\"In range\"', 2, 'Nested if & elif'),
(57, 'How many elif statements can you have in a single if block?', 'One', 'Two', 'Any number', 'None of the above', 'Any number', 2, 'Nested if & elif'),
(58, 'What will be the output of `x = 5; if x > 0: print(\"Positive\"); if x < 10: print(\"Less than 10\")`?', '\"Positive\", \"Less than 10\"', '\"Positive\"', '\"Less than 10\"', 'Error', '\"Positive\", \"Less than 10\"', 2, 'Multiple if Statements'),
(59, 'Can you have multiple if statements without using elif or else?', 'Yes', 'No', 'Only in loops', 'None of the above', 'Yes', 2, 'Multiple if Statements'),
(60, 'What is the result of executing multiple independent if statements?', 'Only one block executes', 'All blocks can execute', 'None can execute', 'Error', 'All blocks can execute', 2, 'Multiple if Statements'),
(61, 'What does the list() function do in Python?', 'Converts an iterable to a list', 'Creates a new list', 'Returns a list of data types', 'None of the above', 'Converts an iterable to a list', 2, 'List Function'),
(62, 'What is the output of `list(\"abc\")`?', '[\'a\', \'b\', \'c\']', '[\'abc\']', '[\'a\', \'b\', \'c\']', 'None of the above', '[\'a\', \'b\', \'c\']', 2, 'List Function'),
(63, 'What does the random.randint(a, b) function do?', 'Returns a random float between a and b', 'Returns a random integer between a and b', 'Returns a random number', 'None of the above', 'Returns a random integer between a and b', 2, 'Random Module in Python'),
(64, 'Which function generates a random float between 0.0 to 1.0 in the random module?', 'random.random()', 'random.randint()', 'random.uniform()', 'None of the above', 'random.random()', 2, 'Random Module in Python'),
(65, 'What is the purpose of the random.shuffle() function?', 'Shuffles a list in place', 'Sorts a list', 'Generates random numbers', 'None of the above', 'Shuffles a list in place', 2, 'Random Module in Python'),
(66, 'What is an IndexError in Python?', 'Accessing an element from a list using an invalid index', 'Using an invalid variable name', 'Trying to divide by zero', 'None of the above', 'Accessing an element from a list using an invalid index', 2, 'Index Error'),
(67, 'What will be the output of `my_list = [1, 2, 3]; print(my_list[3])`?', '1', 'Error', 'None', '3', 'Error', 2, 'Index Error'),
(68, 'Which of the following can cause an IndexError?', 'Accessing the first element of an empty list', 'Accessing the last element of a list with a negative index', 'Using a variable that hasn’t been defined', 'None of the above', 'Accessing the first element of an empty list', 2, 'Index Error'),
(69, 'What is a nested list in Python?', 'A list containing other lists', 'A list of tuples', 'A 3D list', 'None of the above', 'A list containing other lists', 2, 'Nested List'),
(70, 'How do you access an element from a nested list?', 'Using multiple indices', 'Using a single index', 'Using slices', 'None of the above', 'Using multiple indices', 2, 'Nested List'),
(71, 'What will be the output of `nested = [[1, 2], [3, 4]]; print(nested[1][1])`?', '3', '4', 'Error', 'None', '4', 2, 'Nested List'),
(72, 'What is the winning condition in the Rock Paper Scissors game?', 'Rock beats Scissors, Scissors beat Paper, Paper beats Rock', 'Rock beats Paper, Paper beats Scissors, Scissors beat Rock', 'Rock beats Scissors, Paper beats Rock, Scissors beat Rock', 'None of the above', 'Rock beats Scissors, Scissors beat Paper, Paper beats Rock', 2, 'Project #1 Rock Paper Scissors Game'),
(73, 'What Python module is commonly used to randomly generate Rock, Paper, or Scissors?', 'random', 'math', 'time', 'sys', 'random', 2, 'Project #1 Rock Paper Scissors Game'),
(74, 'What is the common method to compare user input and computer choice in Rock Paper Scissors?', 'if-else statement', 'for loop', 'while loop', 'None of the above', 'if-else statement', 2, 'Project #1 Rock Paper Scissors Game'),
(75, 'What is a tuple in Python?', 'An immutable list', 'A mutable list', 'A set', 'None of the above', 'An immutable list', 2, 'Tuples'),
(76, 'How do you define a tuple?', '(1, 2, 3)', '[1, 2, 3]', '{1, 2, 3}', 'None of the above', '(1, 2, 3)', 2, 'Tuples'),
(77, 'Can you change the elements of a tuple?', 'No', 'Yes', 'Only the last element', 'None of the above', 'No', 2, 'Tuples'),
(78, 'What is a set in Python?', 'An unordered collection of unique elements', 'An ordered collection of elements', 'A mutable list', 'None of the above', 'An unordered collection of unique elements', 2, 'Sets'),
(79, 'How do you define a set in Python?', '{1, 2, 3}', '[1, 2, 3]', '(1, 2, 3)', 'None of the above', '{1, 2, 3}', 2, 'Sets'),
(80, 'What will be the output of `{1, 1, 2, 2, 3}`?', '{1, 2, 3}', '{1, 1, 2, 2, 3}', '{1, 3, 2}', 'Error', '{1, 2, 3}', 2, 'Sets'),
(81, 'What does the add() method do in a set?', 'Adds an element to the set', 'Removes an element from the set', 'Clears the set', 'None of the above', 'Adds an element to the set', 2, 'Sets Method in Python'),
(82, 'What does the remove() method do in a set?', 'Removes an element from the set', 'Adds an element to the set', 'Clears the set', 'None of the above', 'Removes an element from the set', 2, 'Sets Method in Python'),
(83, 'What will be the result of `set1 = {1, 2, 3}; set1.clear()`?', '{}', '{1, 2, 3}', '{1, 2}', 'Error', '{}', 2, 'Sets Method in Python'),
(84, 'What is the purpose of a for loop in Python?', 'To iterate over a sequence', 'To execute code based on a condition', 'To compare values', 'None of the above', 'To iterate over a sequence', 2, 'For Loop'),
(85, 'What is the output of `for i in range(3): print(i)`?', '0, 1, 2', '1, 2, 3', '0, 1, 2, 3', 'None of the above', '0, 1, 2', 2, 'For Loop'),
(86, 'Which of the following can be used in a for loop?', 'Lists', 'Tuples', 'Strings', 'All of the above', 'All of the above', 2, 'For Loop'),
(87, 'What does the else block in a for loop do?', 'Executes after the loop completes without a break', 'Executes only if the loop breaks', 'Runs after each iteration', 'None of the above', 'Executes after the loop completes without a break', 2, 'For-Else Loop'),
(88, 'What is the output of the following code? `for i in range(3): print(i) else: print(\"Done\")`', '0, 1, 2, Done', '0, 1, 2', 'Error', 'None of the above', '0, 1, 2, Done', 2, 'For-Else Loop'),
(89, 'When is the else block not executed in a for-else loop?', 'When the loop is terminated by a break', 'When the loop finishes normally', 'When there is an error', 'None of the above', 'When the loop is terminated by a break', 2, 'For-Else Loop'),
(90, 'What does the `range()` function in Python do?', 'Generates a sequence of numbers', 'Generates random numbers', 'Generates a list of strings', 'None of the above', 'Generates a sequence of numbers', 2, 'Range Function'),
(91, 'What is the third parameter in `range(start, stop, step)` used for?', 'To define the step size', 'To define the start', 'To define the stop', 'None of the above', 'To define the step size', 2, 'Range Function'),
(92, 'Which Python module is commonly used for generating random passwords?', 'random', 'math', 'time', 'os', 'random', 2, 'Project #2 Password Generator'),
(93, 'How can you generate a password of length 8 using random module?', 'random.choices()', 'random.randint()', 'random.choice()', 'random.password()', 'random.choices()', 2, 'Project #2 Password Generator'),
(94, 'What function is typically used to shuffle a list of characters in a password?', 'random.shuffle()', 'random.sort()', 'random.arrange()', 'random.change()', 'random.shuffle()', 2, 'Project #2 Password Generator'),
(95, 'What is the purpose of a while loop?', 'To execute a block of code repeatedly as long as a condition is true', 'To execute a block of code once', 'To compare values', 'None of the above', 'To execute a block of code repeatedly as long as a condition is true', 2, 'While Loop'),
(96, 'What is the output of the following code? `i = 0; while i < 3: print(i); i += 1`', '0, 1, 2', '1, 2, 3', '0, 1, 2, 3', 'Error', '0, 1, 2', 2, 'While Loop'),
(97, 'How can you exit a while loop prematurely?', 'Using the break statement', 'Using the continue statement', 'Using the pass statement', 'None of the above', 'Using the break statement', 2, 'While Loop'),
(98, 'What does the break statement do in Python?', 'Exits the current loop', 'Skips the current iteration', 'Passes control to the next block', 'None of the above', 'Exits the current loop', 2, 'Break Continue Pass'),
(99, 'What does the continue statement do in Python?', 'Skips the rest of the code inside the loop for the current iteration', 'Exits the current loop', 'Passes control to the next block', 'None of the above', 'Skips the rest of the code inside the loop for the current iteration', 2, 'Break Continue Pass'),
(100, 'What does the pass statement do in Python?', 'Does nothing and moves to the next iteration', 'Exits the current loop', 'Skips the current iteration', 'None of the above', 'Does nothing and moves to the next iteration', 2, 'Break Continue Pass'),
(101, 'What does proper indentation signify in Python?', 'A block of code', 'The end of a function', 'A comment', 'None of the above', 'A block of code', 2, 'Indentation'),
(102, 'What happens if the code is not properly indented in Python?', 'IndentationError is raised', 'SyntaxError is raised', 'TypeError is raised', 'None of the above', 'IndentationError is raised', 2, 'Indentation'),
(103, 'How many spaces is a typical indentation in Python?', '4', '2', '6', '8', '4', 2, 'Indentation'),
(104, 'What is the goal of the Hanagama game?', 'To guess a hidden word', 'To match pairs of cards', 'To solve a math problem', 'None of the above', 'To guess a hidden word', 2, 'Hanagama Game For Beginners Part 1'),
(105, 'What method is used to accept user input in a Python-based Hanagama game?', 'input()', 'print()', 'read()', 'scan()', 'input()', 2, 'Hanagama Game For Beginners Part 1'),
(106, 'What Python statement is commonly used to give feedback after each guess in Hanagama?', 'if-else', 'for loop', 'while loop', 'None of the above', 'if-else', 2, 'Hanagama Game For Beginners Part 1'),
(107, 'What is a function in Python?', 'A block of reusable code', 'A variable', 'A loop structure', 'None of the above', 'A block of reusable code', 2, 'Function in Python'),
(108, 'How do you define a function in Python?', 'Using the def keyword', 'Using the function keyword', 'Using the lambda keyword', 'None of the above', 'Using the def keyword', 2, 'Function in Python'),
(109, 'What is the correct syntax to call a function in Python?', 'function_name()', 'call function_name()', 'invoke function_name()', 'None of the above', 'function_name()', 2, 'Function in Python'),
(110, 'What is a function argument in Python?', 'A value passed to a function', 'A loop inside a function', 'A type of variable', 'None of the above', 'A value passed to a function', 2, 'Function With Arguments'),
(111, 'How do you pass multiple arguments to a function?', 'Separate them with commas', 'Use a list', 'Use a dictionary', 'None of the above', 'Separate them with commas', 2, 'Function With Arguments'),
(112, 'What is the output of the function call `add(2, 3)` if the function `def add(a, b): return a + b` is defined?', '5', '23', 'Error', 'None of the above', '5', 2, 'Function With Arguments'),
(113, 'What does `*args` allow in a Python function?', 'Passing a variable number of arguments', 'Passing only one argument', 'Passing keyword arguments', 'None of the above', 'Passing a variable number of arguments', 2, 'args and kwargs'),
(114, 'What does `**kwargs` allow in a Python function?', 'Passing a variable number of keyword arguments', 'Passing a variable number of positional arguments', 'Passing only one argument', 'None of the above', 'Passing a variable number of keyword arguments', 2, 'args and kwargs'),
(115, 'What is the difference between `*args` and `**kwargs`?', 'args is for positional arguments, kwargs is for keyword arguments', 'Both are for positional arguments', 'Both are for keyword arguments', 'None of the above', 'args is for positional arguments, kwargs is for keyword arguments', 2, 'args and kwargs'),
(116, 'What is a Caesar Cipher?', 'A type of substitution cipher', 'A type of block cipher', 'A type of transposition cipher', 'None of the above', 'A type of substitution cipher', 2, 'Project Caesar Cipher'),
(117, 'In a Caesar Cipher, what does shifting the alphabet by 3 mean?', 'Replacing each letter with the third letter after it', 'Replacing each letter with the third letter before it', 'Swapping letters in pairs', 'None of the above', 'Replacing each letter with the third letter after it', 2, 'Project Caesar Cipher'),
(118, 'Which Python function can be used to encode a Caesar Cipher?', 'chr() and ord()', 'int() and str()', 'sum() and max()', 'None of the above', 'chr() and ord()', 2, 'Project Caesar Cipher'),
(119, 'What is Object-Oriented Programming (OOP) in Python?', 'A programming paradigm based on objects', 'A type of function programming', 'A type of procedural programming', 'None of the above', 'A programming paradigm based on objects', 3, 'OOP in Python'),
(120, 'Which of the following is a key feature of OOP?', 'Encapsulation', 'Recursion', 'Iteration', 'None of the above', 'Encapsulation', 3, 'OOP in Python'),
(121, 'Which of the following does OOP in Python allow?', 'Inheritance, Polymorphism, and Encapsulation', 'Procedural code only', 'Functional programming only', 'None of the above', 'Inheritance, Polymorphism, and Encapsulation', 3, 'OOP in Python'),
(122, 'What is a class in Python?', 'A blueprint for creating objects', 'A built-in data type', 'A variable', 'None of the above', 'A blueprint for creating objects', 3, 'Classes and Objects'),
(123, 'What is an object in Python?', 'An instance of a class', 'A block of code', 'A function', 'None of the above', 'An instance of a class', 3, 'Classes and Objects'),
(124, 'How do you define a class in Python?', 'Using the class keyword', 'Using the def keyword', 'Using the function keyword', 'None of the above', 'Using the class keyword', 3, 'Classes and Objects'),
(125, 'What is the purpose of the `self` parameter in Python?', 'To refer to the instance of the class', 'To refer to a global variable', 'To refer to the class itself', 'None of the above', 'To refer to the instance of the class', 3, 'Self and __init__()'),
(126, 'What is the purpose of the `__init__()` method in Python?', 'To initialize the object’s attributes', 'To return the class name', 'To define a static method', 'None of the above', 'To initialize the object’s attributes', 3, 'Self and __init__()'),
(127, 'When is the `__init__()` method called in Python?', 'When a new object is created', 'When a class is defined', 'When a variable is assigned', 'None of the above', 'When a new object is created', 3, 'Self and __init__()'),
(128, 'What is a class method in Python?', 'A method that belongs to the class and not the instance', 'A method that belongs to an object', 'A method that defines a class', 'None of the above', 'A method that belongs to the class and not the instance', 3, 'Class Method'),
(129, 'How do you define a class method in Python?', 'By using the @classmethod decorator', 'By using the def keyword only', 'By using the @staticmethod decorator', 'None of the above', 'By using the @classmethod decorator', 3, 'Class Method'),
(130, 'Which parameter does a class method take by convention?', 'cls', 'self', 'object', 'None of the above', 'cls', 3, 'Class Method'),
(131, 'What is inheritance in Python?', 'A mechanism to acquire properties of another class', 'A method to copy objects', 'A type of function', 'None of the above', 'A mechanism to acquire properties of another class', 3, 'Inheritance'),
(132, 'Which class is called the base class in inheritance?', 'The class being inherited from', 'The class that inherits', 'The function inside a class', 'None of the above', 'The class being inherited from', 3, 'Inheritance'),
(133, 'Which class is called the derived class in inheritance?', 'The class that inherits from another class', 'The class that is inherited', 'A subclass of a function', 'None of the above', 'The class that inherits from another class', 3, 'Inheritance'),
(134, 'What is multiple inheritance in Python?', 'A class inheriting from more than one base class', 'A class inheriting from itself', 'A function inside a class', 'None of the above', 'A class inheriting from more than one base class', 3, 'Multiple Inheritance'),
(135, 'Which of the following is a correct example of multiple inheritance?', 'class A(B, C)', 'class A(B)', 'class B(A)', 'None of the above', 'class A(B, C)', 3, 'Multiple Inheritance'),
(136, 'Why is multiple inheritance used in Python?', 'To inherit attributes from more than one base class', 'To define global variables', 'To avoid object creation', 'None of the above', 'To inherit attributes from more than one base class', 3, 'Multiple Inheritance'),
(137, 'What is multilevel inheritance in Python?', 'Inheritance where a derived class is derived from another derived class', 'Inheritance with multiple base classes', 'A derived class without a base class', 'None of the above', 'Inheritance where a derived class is derived from another derived class', 3, 'Multilevel Inheritance'),
(138, 'Which of the following is an example of multilevel inheritance?', 'class A(B), class B(C)', 'class A(B, C)', 'class B(A, C)', 'None of the above', 'class A(B), class B(C)', 3, 'Multilevel Inheritance'),
(139, 'What is the benefit of multilevel inheritance?', 'It allows a class to inherit properties from multiple levels of base classes', 'It removes redundant code', 'It allows objects to be created without classes', 'None of the above', 'It allows a class to inherit properties from multiple levels of base classes', 3, 'Multilevel Inheritance'),
(140, 'What is hierarchical inheritance in Python?', 'Inheritance where multiple derived classes inherit from a single base class', 'Inheritance with multiple base classes', 'Inheritance where each class has its own base class', 'None of the above', 'Inheritance where multiple derived classes inherit from a single base class', 3, 'Hierarchical Inheritance'),
(141, 'Which of the following is an example of hierarchical inheritance?', 'class A(B), class C(A)', 'class A(B), class B(C)', 'class B(A), class C(A)', 'None of the above', 'class B(A), class C(A)', 3, 'Hierarchical Inheritance'),
(142, 'What is a key feature of hierarchical inheritance?', 'Multiple derived classes share the same base class', 'Only one derived class is created', 'Base classes cannot be reused', 'None of the above', 'Multiple derived classes share the same base class', 3, 'Hierarchical Inheritance'),
(143, 'Which function is used to open a file in Python?', 'open()', 'read()', 'write()', 'None of the above', 'open()', 3, 'File Handling'),
(144, 'What mode is used to read a file in Python?', 'r', 'w', 'a', 'x', 'r', 3, 'File Handling'),
(145, 'Which method is used to read a file line by line?', 'readline()', 'read()', 'readlines()', 'None of the above', 'readline()', 3, 'File Handling'),
(146, 'What is a module in Python?', 'A file containing Python code', 'A function', 'A variable', 'None of the above', 'A file containing Python code', 3, 'Modules in Python'),
(147, 'Which statement is used to import a module?', 'import', 'from', 'module', 'None of the above', 'import', 3, 'Modules in Python'),
(148, 'How do you list all functions in a module?', 'Using the dir() function', 'Using the print() function', 'Using the help() function', 'None of the above', 'Using the dir() function', 3, 'Modules in Python'),
(149, 'What is abstraction in Python?', 'Hiding the implementation details and showing only the functionality', 'A function inside a class', 'Creating objects from classes', 'None of the above', 'Hiding the implementation details and showing only the functionality', 3, 'Abstraction in Python'),
(150, 'Which Python feature allows abstraction?', 'Abstract classes and methods', 'Inheritance', 'Polymorphism', 'None of the above', 'Abstract classes and methods', 3, 'Abstraction in Python'),
(151, 'Why is abstraction used?', 'To reduce complexity by hiding unnecessary details', 'To create multiple classes', 'To increase the length of the code', 'None of the above', 'To reduce complexity by hiding unnecessary details', 3, 'Abstraction in Python'),
(152, 'What is an abstract class in Python?', 'A class that cannot be instantiated directly', 'A class with no methods', 'A class that inherits from multiple base classes', 'None of the above', 'A class that cannot be instantiated directly', 3, 'Abstract Class and Abstract Method'),
(153, 'What is an abstract method?', 'A method that has no implementation in the base class', 'A method that can be overridden', 'A method that is defined in multiple classes', 'None of the above', 'A method that has no implementation in the base class', 3, 'Abstract Class and Abstract Method'),
(154, 'Which module is used to create abstract classes in Python?', 'abc', 'abstract', 'inheritance', 'None of the above', 'abc', 3, 'Abstract Class and Abstract Method'),
(155, 'Which access modifier is used to declare private members in Python?', 'Single underscore (_) before the variable name', 'Double underscore (__) before the variable name', 'No underscore', 'None of the above', 'Double underscore (__) before the variable name', 3, 'Access Modifier'),
(156, 'Which access modifier allows access only within the class?', 'Private', 'Protected', 'Public', 'None of the above', 'Private', 3, 'Access Modifier'),
(157, 'Which access modifier allows access within the class and its subclasses?', 'Protected', 'Private', 'Public', 'None of the above', 'Protected', 3, 'Access Modifier'),
(158, 'What is encapsulation in Python?', 'Wrapping data and methods into a single unit', 'Inheritance from a base class', 'Hiding the implementation', 'None of the above', 'Wrapping data and methods into a single unit', 3, 'Encapsulation'),
(159, 'Why is encapsulation important?', 'To protect data from unauthorized access', 'To allow multiple inheritance', 'To define abstract classes', 'None of the above', 'To protect data from unauthorized access', 3, 'Encapsulation'),
(160, 'Which feature of Python supports encapsulation?', 'Private and protected access modifiers', 'Public access', 'Inheritance', 'None of the above', 'Private and protected access modifiers', 3, 'Encapsulation'),
(161, 'What is polymorphism in Python?', 'The ability to define methods with the same name in different classes', 'The ability to define multiple classes', 'Inheriting from multiple classes', 'None of the above', 'The ability to define methods with the same name in different classes', 3, 'Polymorphism'),
(162, 'Which function is an example of polymorphism?', 'len() function used for strings, lists, and dictionaries', 'print() function', 'type() function', 'None of the above', 'len() function used for strings, lists, and dictionaries', 3, 'Polymorphism'),
(163, 'Why is polymorphism useful?', 'It allows functions to work with objects of different types', 'It prevents inheritance', 'It hides the implementation details', 'None of the above', 'It allows functions to work with objects of different types', 3, 'Polymorphism'),
(164, 'What is operator overloading in Python?', 'Using the same operator for different data types', 'Using multiple operators in a single expression', 'Using operators inside a class', 'None of the above', 'Using the same operator for different data types', 3, 'Operator Overloading'),
(165, 'Which method is used for operator overloading of the addition (+) operator?', '__add__()', '__mul__()', '__sub__()', 'None of the above', '__add__()', 3, 'Operator Overloading'),
(166, 'What is the purpose of operator overloading?', 'To define the behavior of operators for user-defined data types', 'To restrict operator usage', 'To create new operators', 'None of the above', 'To define the behavior of operators for user-defined data types', 3, 'Operator Overloading'),
(167, 'What is method overloading in Python?', 'Defining multiple methods with the same name but different arguments', 'Using multiple methods inside a class', 'Inheriting methods from a parent class', 'None of the above', 'Defining multiple methods with the same name but different arguments', 3, 'Method Overloading'),
(168, 'Does Python support method overloading?', 'No, Python does not support method overloading directly', 'Yes, Python fully supports method overloading', 'Only for some built-in methods', 'None of the above', 'No, Python does not support method overloading directly', 3, 'Method Overloading'),
(169, 'Which operator can be used to mimic method overloading in Python?', '*args and **kwargs', 'self and cls', 'lambda and map', 'None of the above', '*args and **kwargs', 3, 'Method Overloading'),
(170, 'What is pip in Python?', 'A package manager for Python', 'A command-line tool', 'A Python function', 'None of the above', 'A package manager for Python', 3, 'pip & PyPI'),
(171, 'What is PyPI?', 'Python Package Index, a repository for Python packages', 'Python’s internal library', 'An IDE for Python', 'None of the above', 'Python Package Index, a repository for Python packages', 3, 'pip & PyPI'),
(172, 'How do you install a package using pip?', 'pip install package_name', 'pip download package_name', 'install package_name', 'None of the above', 'pip install package_name', 3, 'pip & PyPI'),
(173, 'What is a package in Python?', 'A directory containing multiple modules', 'A module inside a class', 'A collection of functions', 'None of the above', 'A directory containing multiple modules', 3, 'Package in Python'),
(174, 'How do you import a package in Python?', 'import package_name', 'import function_name', 'from module import package', 'None of the above', 'import package_name', 3, 'Package in Python'),
(175, 'What is the purpose of an __init__.py file in a package?', 'It indicates that the directory is a Python package', 'It is used to define global variables', 'It initializes the package', 'None of the above', 'It indicates that the directory is a Python package', 3, 'Package in Python'),
(176, 'What is Turtle Graphics in Python?', 'A popular way for introducing programming to kids', 'A graphical interface for Python', 'An IDE for Python', 'None of the above', 'A popular way for introducing programming to kids', 3, 'Turtle Graphics'),
(177, 'Which command is used to move the turtle forward in Python?', 'forward()', 'move()', 'turtle()', 'None of the above', 'forward()', 3, 'Turtle Graphics'),
(178, 'How do you change the direction of the turtle in Python?', 'Using the right() or left() function', 'Using the setangle() function', 'Using the rotate() function', 'None of the above', 'Using the right() or left() function', 3, 'Turtle Graphics');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `email_id` varchar(280) NOT NULL,
  `course_title` varchar(240) NOT NULL,
  `level` varchar(200) NOT NULL,
  `datentime` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `email_id`, `course_title`, `level`, `datentime`) VALUES
(4, 'akkii77580@gg.co', 'Excel', 'Beginner', '2024-10-02 23:19:32'),
(24, 'edumindsup20@gmail.com', 'Data Analysis', 'Advanced', '2024-10-07 21:29:41'),
(27, 'edumindsup20@gmail.com', 'Python', 'Advanced', '2024-10-07 22:39:26'),
(28, 'edumindsup20@gmail.com', 'Excel', 'Intermediate', '2024-10-07 23:00:47');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `courses`
--
ALTER TABLE `courses`
  ADD PRIMARY KEY (`c_id`);

--
-- Indexes for table `data_analytics_course`
--
ALTER TABLE `data_analytics_course`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `data_analytics_qna`
--
ALTER TABLE `data_analytics_qna`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `excel_course`
--
ALTER TABLE `excel_course`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `excel_qna`
--
ALTER TABLE `excel_qna`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `level`
--
ALTER TABLE `level`
  ADD PRIMARY KEY (`C_ID`);

--
-- Indexes for table `profiles`
--
ALTER TABLE `profiles`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `progress`
--
ALTER TABLE `progress`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `python_course`
--
ALTER TABLE `python_course`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `python_qna`
--
ALTER TABLE `python_qna`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `progress`
--
ALTER TABLE `progress`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=29;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
